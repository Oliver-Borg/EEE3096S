
EEE3096S_2022_Prac_4_PWM_DAC_Student_Version.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f8c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800404c  0800404c  0001404c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040cc  080040cc  00020670  2**0
                  CONTENTS
  4 .ARM          00000000  080040cc  080040cc  00020670  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040cc  080040cc  00020670  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040cc  080040cc  000140cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040d0  080040d0  000140d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000670  20000000  080040d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  20000670  08004744  00020670  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000818  08004744  00020818  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020670  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca94  00000000  00000000  00020698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a84  00000000  00000000  0002d12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  0002ebb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b08  00000000  00000000  0002f760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000126c5  00000000  00000000  00030268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da5f  00000000  00000000  0004292d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000711f5  00000000  00000000  0005038c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c1581  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002df8  00000000  00000000  000c15d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000670 	.word	0x20000670
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004034 	.word	0x08004034

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000674 	.word	0x20000674
 8000104:	08004034 	.word	0x08004034

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800040e:	f000 fc67 	bl	8000ce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000412:	f000 f84b 	bl	80004ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000416:	f000 f9db 	bl	80007d0 <MX_GPIO_Init>
  MX_DMA_Init();
 800041a:	f000 f9bb 	bl	8000794 <MX_DMA_Init>
  MX_TIM2_Init();
 800041e:	f000 f88f 	bl	8000540 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000422:	f000 f907 	bl	8000634 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000426:	f000 f985 	bl	8000734 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //TO DO:
  //TASK 4
  //Start TIM3 in PWM mode on channel 1
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800042a:	4b18      	ldr	r3, [pc, #96]	; (800048c <main+0x84>)
 800042c:	2100      	movs	r1, #0
 800042e:	0018      	movs	r0, r3
 8000430:	f001 ff24 	bl	800227c <HAL_TIM_PWM_Start>
  //Start TIM2 in Output Compare (OC) mode on channel 1.
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8000434:	4b16      	ldr	r3, [pc, #88]	; (8000490 <main+0x88>)
 8000436:	2100      	movs	r1, #0
 8000438:	0018      	movs	r0, r3
 800043a:	f001 fe0f 	bl	800205c <HAL_TIM_OC_Start>
  //Start the DMA in interrupt (IT) mode.
  uint32_t DestAddress = (uint32_t) &(TIM3->CCR1);
 800043e:	4b15      	ldr	r3, [pc, #84]	; (8000494 <main+0x8c>)
 8000440:	607b      	str	r3, [r7, #4]
  HAL_DMA_Start_IT(&hdma_tim2_ch1, (uint32_t)sin_LUT, DestAddress, 4);
 8000442:	4915      	ldr	r1, [pc, #84]	; (8000498 <main+0x90>)
 8000444:	687a      	ldr	r2, [r7, #4]
 8000446:	4815      	ldr	r0, [pc, #84]	; (800049c <main+0x94>)
 8000448:	2304      	movs	r3, #4
 800044a:	f000 fdd3 	bl	8000ff4 <HAL_DMA_Start_IT>
  //Start the DMA transfer
  __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 800044e:	4b10      	ldr	r3, [pc, #64]	; (8000490 <main+0x88>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	68da      	ldr	r2, [r3, #12]
 8000454:	4b0e      	ldr	r3, [pc, #56]	; (8000490 <main+0x88>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	2180      	movs	r1, #128	; 0x80
 800045a:	0089      	lsls	r1, r1, #2
 800045c:	430a      	orrs	r2, r1
 800045e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // Display the mode
	  sprintf(buffer, "%d\r\n", HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6));
 8000460:	2390      	movs	r3, #144	; 0x90
 8000462:	05db      	lsls	r3, r3, #23
 8000464:	2140      	movs	r1, #64	; 0x40
 8000466:	0018      	movs	r0, r3
 8000468:	f001 f884 	bl	8001574 <HAL_GPIO_ReadPin>
 800046c:	0003      	movs	r3, r0
 800046e:	001a      	movs	r2, r3
 8000470:	490b      	ldr	r1, [pc, #44]	; (80004a0 <main+0x98>)
 8000472:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <main+0x9c>)
 8000474:	0018      	movs	r0, r3
 8000476:	f003 f973 	bl	8003760 <siprintf>
	  // Transmit data via UART
	  HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 800047a:	23fa      	movs	r3, #250	; 0xfa
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	4909      	ldr	r1, [pc, #36]	; (80004a4 <main+0x9c>)
 8000480:	4809      	ldr	r0, [pc, #36]	; (80004a8 <main+0xa0>)
 8000482:	220e      	movs	r2, #14
 8000484:	f002 fd90 	bl	8002fa8 <HAL_UART_Transmit>
	  sprintf(buffer, "%d\r\n", HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6));
 8000488:	e7ea      	b.n	8000460 <main+0x58>
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	200006d4 	.word	0x200006d4
 8000490:	2000068c 	.word	0x2000068c
 8000494:	40000434 	.word	0x40000434
 8000498:	20000000 	.word	0x20000000
 800049c:	2000071c 	.word	0x2000071c
 80004a0:	0800404c 	.word	0x0800404c
 80004a4:	200007f0 	.word	0x200007f0
 80004a8:	20000760 	.word	0x20000760

080004ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ac:	b590      	push	{r4, r7, lr}
 80004ae:	b091      	sub	sp, #68	; 0x44
 80004b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b2:	2410      	movs	r4, #16
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	0018      	movs	r0, r3
 80004b8:	2330      	movs	r3, #48	; 0x30
 80004ba:	001a      	movs	r2, r3
 80004bc:	2100      	movs	r1, #0
 80004be:	f003 f947 	bl	8003750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c2:	003b      	movs	r3, r7
 80004c4:	0018      	movs	r0, r3
 80004c6:	2310      	movs	r3, #16
 80004c8:	001a      	movs	r2, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	f003 f940 	bl	8003750 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004d0:	0021      	movs	r1, r4
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2202      	movs	r2, #2
 80004d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	2201      	movs	r2, #1
 80004dc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	2210      	movs	r2, #16
 80004e2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004e4:	187b      	adds	r3, r7, r1
 80004e6:	2202      	movs	r2, #2
 80004e8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004ea:	187b      	adds	r3, r7, r1
 80004ec:	2200      	movs	r2, #0
 80004ee:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	22a0      	movs	r2, #160	; 0xa0
 80004f4:	0392      	lsls	r2, r2, #14
 80004f6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	2200      	movs	r2, #0
 80004fc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	0018      	movs	r0, r3
 8000502:	f001 f897 	bl	8001634 <HAL_RCC_OscConfig>
 8000506:	1e03      	subs	r3, r0, #0
 8000508:	d001      	beq.n	800050e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800050a:	f000 fa4f 	bl	80009ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800050e:	003b      	movs	r3, r7
 8000510:	2207      	movs	r2, #7
 8000512:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000514:	003b      	movs	r3, r7
 8000516:	2202      	movs	r2, #2
 8000518:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800051a:	003b      	movs	r3, r7
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000520:	003b      	movs	r3, r7
 8000522:	2200      	movs	r2, #0
 8000524:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000526:	003b      	movs	r3, r7
 8000528:	2101      	movs	r1, #1
 800052a:	0018      	movs	r0, r3
 800052c:	f001 fb9c 	bl	8001c68 <HAL_RCC_ClockConfig>
 8000530:	1e03      	subs	r3, r0, #0
 8000532:	d001      	beq.n	8000538 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000534:	f000 fa3a 	bl	80009ac <Error_Handler>
  }
}
 8000538:	46c0      	nop			; (mov r8, r8)
 800053a:	46bd      	mov	sp, r7
 800053c:	b011      	add	sp, #68	; 0x44
 800053e:	bd90      	pop	{r4, r7, pc}

08000540 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b08e      	sub	sp, #56	; 0x38
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000546:	2328      	movs	r3, #40	; 0x28
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	0018      	movs	r0, r3
 800054c:	2310      	movs	r3, #16
 800054e:	001a      	movs	r2, r3
 8000550:	2100      	movs	r1, #0
 8000552:	f003 f8fd 	bl	8003750 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000556:	2320      	movs	r3, #32
 8000558:	18fb      	adds	r3, r7, r3
 800055a:	0018      	movs	r0, r3
 800055c:	2308      	movs	r3, #8
 800055e:	001a      	movs	r2, r3
 8000560:	2100      	movs	r1, #0
 8000562:	f003 f8f5 	bl	8003750 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	0018      	movs	r0, r3
 800056a:	231c      	movs	r3, #28
 800056c:	001a      	movs	r2, r3
 800056e:	2100      	movs	r1, #0
 8000570:	f003 f8ee 	bl	8003750 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000574:	4b2e      	ldr	r3, [pc, #184]	; (8000630 <MX_TIM2_Init+0xf0>)
 8000576:	2280      	movs	r2, #128	; 0x80
 8000578:	05d2      	lsls	r2, r2, #23
 800057a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800057c:	4b2c      	ldr	r3, [pc, #176]	; (8000630 <MX_TIM2_Init+0xf0>)
 800057e:	2200      	movs	r2, #0
 8000580:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000582:	4b2b      	ldr	r3, [pc, #172]	; (8000630 <MX_TIM2_Init+0xf0>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000588:	4b29      	ldr	r3, [pc, #164]	; (8000630 <MX_TIM2_Init+0xf0>)
 800058a:	2264      	movs	r2, #100	; 0x64
 800058c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800058e:	4b28      	ldr	r3, [pc, #160]	; (8000630 <MX_TIM2_Init+0xf0>)
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000594:	4b26      	ldr	r3, [pc, #152]	; (8000630 <MX_TIM2_Init+0xf0>)
 8000596:	2280      	movs	r2, #128	; 0x80
 8000598:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800059a:	4b25      	ldr	r3, [pc, #148]	; (8000630 <MX_TIM2_Init+0xf0>)
 800059c:	0018      	movs	r0, r3
 800059e:	f001 fcb5 	bl	8001f0c <HAL_TIM_Base_Init>
 80005a2:	1e03      	subs	r3, r0, #0
 80005a4:	d001      	beq.n	80005aa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80005a6:	f000 fa01 	bl	80009ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005aa:	2128      	movs	r1, #40	; 0x28
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	0152      	lsls	r2, r2, #5
 80005b2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005b4:	187a      	adds	r2, r7, r1
 80005b6:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <MX_TIM2_Init+0xf0>)
 80005b8:	0011      	movs	r1, r2
 80005ba:	0018      	movs	r0, r3
 80005bc:	f002 f834 	bl	8002628 <HAL_TIM_ConfigClockSource>
 80005c0:	1e03      	subs	r3, r0, #0
 80005c2:	d001      	beq.n	80005c8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80005c4:	f000 f9f2 	bl	80009ac <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80005c8:	4b19      	ldr	r3, [pc, #100]	; (8000630 <MX_TIM2_Init+0xf0>)
 80005ca:	0018      	movs	r0, r3
 80005cc:	f001 fcee 	bl	8001fac <HAL_TIM_OC_Init>
 80005d0:	1e03      	subs	r3, r0, #0
 80005d2:	d001      	beq.n	80005d8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80005d4:	f000 f9ea 	bl	80009ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005d8:	2120      	movs	r1, #32
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	2200      	movs	r2, #0
 80005e4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005e6:	187a      	adds	r2, r7, r1
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_TIM2_Init+0xf0>)
 80005ea:	0011      	movs	r1, r2
 80005ec:	0018      	movs	r0, r3
 80005ee:	f002 fc29 	bl	8002e44 <HAL_TIMEx_MasterConfigSynchronization>
 80005f2:	1e03      	subs	r3, r0, #0
 80005f4:	d001      	beq.n	80005fa <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80005f6:	f000 f9d9 	bl	80009ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2200      	movs	r2, #0
 8000604:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000612:	1d39      	adds	r1, r7, #4
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_TIM2_Init+0xf0>)
 8000616:	2200      	movs	r2, #0
 8000618:	0018      	movs	r0, r3
 800061a:	f001 fee7 	bl	80023ec <HAL_TIM_OC_ConfigChannel>
 800061e:	1e03      	subs	r3, r0, #0
 8000620:	d001      	beq.n	8000626 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000622:	f000 f9c3 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	b00e      	add	sp, #56	; 0x38
 800062c:	bd80      	pop	{r7, pc}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	2000068c 	.word	0x2000068c

08000634 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08e      	sub	sp, #56	; 0x38
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800063a:	2328      	movs	r3, #40	; 0x28
 800063c:	18fb      	adds	r3, r7, r3
 800063e:	0018      	movs	r0, r3
 8000640:	2310      	movs	r3, #16
 8000642:	001a      	movs	r2, r3
 8000644:	2100      	movs	r1, #0
 8000646:	f003 f883 	bl	8003750 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800064a:	2320      	movs	r3, #32
 800064c:	18fb      	adds	r3, r7, r3
 800064e:	0018      	movs	r0, r3
 8000650:	2308      	movs	r3, #8
 8000652:	001a      	movs	r2, r3
 8000654:	2100      	movs	r1, #0
 8000656:	f003 f87b 	bl	8003750 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	0018      	movs	r0, r3
 800065e:	231c      	movs	r3, #28
 8000660:	001a      	movs	r2, r3
 8000662:	2100      	movs	r1, #0
 8000664:	f003 f874 	bl	8003750 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000668:	4b2f      	ldr	r3, [pc, #188]	; (8000728 <MX_TIM3_Init+0xf4>)
 800066a:	4a30      	ldr	r2, [pc, #192]	; (800072c <MX_TIM3_Init+0xf8>)
 800066c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800066e:	4b2e      	ldr	r3, [pc, #184]	; (8000728 <MX_TIM3_Init+0xf4>)
 8000670:	2200      	movs	r2, #0
 8000672:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000674:	4b2c      	ldr	r3, [pc, #176]	; (8000728 <MX_TIM3_Init+0xf4>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1023;
 800067a:	4b2b      	ldr	r3, [pc, #172]	; (8000728 <MX_TIM3_Init+0xf4>)
 800067c:	4a2c      	ldr	r2, [pc, #176]	; (8000730 <MX_TIM3_Init+0xfc>)
 800067e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000680:	4b29      	ldr	r3, [pc, #164]	; (8000728 <MX_TIM3_Init+0xf4>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000686:	4b28      	ldr	r3, [pc, #160]	; (8000728 <MX_TIM3_Init+0xf4>)
 8000688:	2280      	movs	r2, #128	; 0x80
 800068a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800068c:	4b26      	ldr	r3, [pc, #152]	; (8000728 <MX_TIM3_Init+0xf4>)
 800068e:	0018      	movs	r0, r3
 8000690:	f001 fc3c 	bl	8001f0c <HAL_TIM_Base_Init>
 8000694:	1e03      	subs	r3, r0, #0
 8000696:	d001      	beq.n	800069c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000698:	f000 f988 	bl	80009ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800069c:	2128      	movs	r1, #40	; 0x28
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2280      	movs	r2, #128	; 0x80
 80006a2:	0152      	lsls	r2, r2, #5
 80006a4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006a6:	187a      	adds	r2, r7, r1
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <MX_TIM3_Init+0xf4>)
 80006aa:	0011      	movs	r1, r2
 80006ac:	0018      	movs	r0, r3
 80006ae:	f001 ffbb 	bl	8002628 <HAL_TIM_ConfigClockSource>
 80006b2:	1e03      	subs	r3, r0, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80006b6:	f000 f979 	bl	80009ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006ba:	4b1b      	ldr	r3, [pc, #108]	; (8000728 <MX_TIM3_Init+0xf4>)
 80006bc:	0018      	movs	r0, r3
 80006be:	f001 fd85 	bl	80021cc <HAL_TIM_PWM_Init>
 80006c2:	1e03      	subs	r3, r0, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80006c6:	f000 f971 	bl	80009ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ca:	2120      	movs	r1, #32
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2200      	movs	r2, #0
 80006d6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006d8:	187a      	adds	r2, r7, r1
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <MX_TIM3_Init+0xf4>)
 80006dc:	0011      	movs	r1, r2
 80006de:	0018      	movs	r0, r3
 80006e0:	f002 fbb0 	bl	8002e44 <HAL_TIMEx_MasterConfigSynchronization>
 80006e4:	1e03      	subs	r3, r0, #0
 80006e6:	d001      	beq.n	80006ec <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80006e8:	f000 f960 	bl	80009ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2260      	movs	r2, #96	; 0x60
 80006f0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2200      	movs	r2, #0
 80006f6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000704:	1d39      	adds	r1, r7, #4
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_TIM3_Init+0xf4>)
 8000708:	2200      	movs	r2, #0
 800070a:	0018      	movs	r0, r3
 800070c:	f001 fec6 	bl	800249c <HAL_TIM_PWM_ConfigChannel>
 8000710:	1e03      	subs	r3, r0, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000714:	f000 f94a 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <MX_TIM3_Init+0xf4>)
 800071a:	0018      	movs	r0, r3
 800071c:	f000 f9cc 	bl	8000ab8 <HAL_TIM_MspPostInit>

}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	b00e      	add	sp, #56	; 0x38
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200006d4 	.word	0x200006d4
 800072c:	40000400 	.word	0x40000400
 8000730:	000003ff 	.word	0x000003ff

08000734 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
//
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_USART2_UART_Init+0x58>)
 800073a:	4a15      	ldr	r2, [pc, #84]	; (8000790 <MX_USART2_UART_Init+0x5c>)
 800073c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000740:	2296      	movs	r2, #150	; 0x96
 8000742:	0192      	lsls	r2, r2, #6
 8000744:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_USART2_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_USART2_UART_Init+0x58>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_USART2_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000778:	0018      	movs	r0, r3
 800077a:	f002 fbc1 	bl	8002f00 <HAL_UART_Init>
 800077e:	1e03      	subs	r3, r0, #0
 8000780:	d001      	beq.n	8000786 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000782:	f000 f913 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
//
  /* USER CODE END USART2_Init 2 */

}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000760 	.word	0x20000760
 8000790:	40004400 	.word	0x40004400

08000794 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_DMA_Init+0x38>)
 800079c:	695a      	ldr	r2, [r3, #20]
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_DMA_Init+0x38>)
 80007a0:	2101      	movs	r1, #1
 80007a2:	430a      	orrs	r2, r1
 80007a4:	615a      	str	r2, [r3, #20]
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_DMA_Init+0x38>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	2201      	movs	r2, #1
 80007ac:	4013      	ands	r3, r2
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2100      	movs	r1, #0
 80007b6:	200b      	movs	r0, #11
 80007b8:	f000 fba2 	bl	8000f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80007bc:	200b      	movs	r0, #11
 80007be:	f000 fbb4 	bl	8000f2a <HAL_NVIC_EnableIRQ>

}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	b002      	add	sp, #8
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	40021000 	.word	0x40021000

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b089      	sub	sp, #36	; 0x24
 80007d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	240c      	movs	r4, #12
 80007d8:	193b      	adds	r3, r7, r4
 80007da:	0018      	movs	r0, r3
 80007dc:	2314      	movs	r3, #20
 80007de:	001a      	movs	r2, r3
 80007e0:	2100      	movs	r1, #0
 80007e2:	f002 ffb5 	bl	8003750 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007e6:	4b31      	ldr	r3, [pc, #196]	; (80008ac <MX_GPIO_Init+0xdc>)
 80007e8:	695a      	ldr	r2, [r3, #20]
 80007ea:	4b30      	ldr	r3, [pc, #192]	; (80008ac <MX_GPIO_Init+0xdc>)
 80007ec:	2180      	movs	r1, #128	; 0x80
 80007ee:	03c9      	lsls	r1, r1, #15
 80007f0:	430a      	orrs	r2, r1
 80007f2:	615a      	str	r2, [r3, #20]
 80007f4:	4b2d      	ldr	r3, [pc, #180]	; (80008ac <MX_GPIO_Init+0xdc>)
 80007f6:	695a      	ldr	r2, [r3, #20]
 80007f8:	2380      	movs	r3, #128	; 0x80
 80007fa:	03db      	lsls	r3, r3, #15
 80007fc:	4013      	ands	r3, r2
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	4b2a      	ldr	r3, [pc, #168]	; (80008ac <MX_GPIO_Init+0xdc>)
 8000804:	695a      	ldr	r2, [r3, #20]
 8000806:	4b29      	ldr	r3, [pc, #164]	; (80008ac <MX_GPIO_Init+0xdc>)
 8000808:	2180      	movs	r1, #128	; 0x80
 800080a:	0289      	lsls	r1, r1, #10
 800080c:	430a      	orrs	r2, r1
 800080e:	615a      	str	r2, [r3, #20]
 8000810:	4b26      	ldr	r3, [pc, #152]	; (80008ac <MX_GPIO_Init+0xdc>)
 8000812:	695a      	ldr	r2, [r3, #20]
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	029b      	lsls	r3, r3, #10
 8000818:	4013      	ands	r3, r2
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	4b23      	ldr	r3, [pc, #140]	; (80008ac <MX_GPIO_Init+0xdc>)
 8000820:	695a      	ldr	r2, [r3, #20]
 8000822:	4b22      	ldr	r3, [pc, #136]	; (80008ac <MX_GPIO_Init+0xdc>)
 8000824:	2180      	movs	r1, #128	; 0x80
 8000826:	0309      	lsls	r1, r1, #12
 8000828:	430a      	orrs	r2, r1
 800082a:	615a      	str	r2, [r3, #20]
 800082c:	4b1f      	ldr	r3, [pc, #124]	; (80008ac <MX_GPIO_Init+0xdc>)
 800082e:	695a      	ldr	r2, [r3, #20]
 8000830:	2380      	movs	r3, #128	; 0x80
 8000832:	031b      	lsls	r3, r3, #12
 8000834:	4013      	ands	r3, r2
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 800083a:	23c0      	movs	r3, #192	; 0xc0
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	481c      	ldr	r0, [pc, #112]	; (80008b0 <MX_GPIO_Init+0xe0>)
 8000840:	2200      	movs	r2, #0
 8000842:	0019      	movs	r1, r3
 8000844:	f000 feb3 	bl	80015ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000848:	193b      	adds	r3, r7, r4
 800084a:	2201      	movs	r2, #1
 800084c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800084e:	193b      	adds	r3, r7, r4
 8000850:	2288      	movs	r2, #136	; 0x88
 8000852:	0352      	lsls	r2, r2, #13
 8000854:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	193b      	adds	r3, r7, r4
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	193a      	adds	r2, r7, r4
 800085e:	2390      	movs	r3, #144	; 0x90
 8000860:	05db      	lsls	r3, r3, #23
 8000862:	0011      	movs	r1, r2
 8000864:	0018      	movs	r0, r3
 8000866:	f000 fd15 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 800086a:	0021      	movs	r1, r4
 800086c:	187b      	adds	r3, r7, r1
 800086e:	22c0      	movs	r2, #192	; 0xc0
 8000870:	0092      	lsls	r2, r2, #2
 8000872:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2201      	movs	r2, #1
 8000878:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	187b      	adds	r3, r7, r1
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000886:	187b      	adds	r3, r7, r1
 8000888:	4a09      	ldr	r2, [pc, #36]	; (80008b0 <MX_GPIO_Init+0xe0>)
 800088a:	0019      	movs	r1, r3
 800088c:	0010      	movs	r0, r2
 800088e:	f000 fd01 	bl	8001294 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	2005      	movs	r0, #5
 8000898:	f000 fb32 	bl	8000f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800089c:	2005      	movs	r0, #5
 800089e:	f000 fb44 	bl	8000f2a <HAL_NVIC_EnableIRQ>

}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	b009      	add	sp, #36	; 0x24
 80008a8:	bd90      	pop	{r4, r7, pc}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	40021000 	.word	0x40021000
 80008b0:	48000800 	.word	0x48000800

080008b4 <EXTI0_1_IRQHandler>:

/* USER CODE BEGIN 4 */
void EXTI0_1_IRQHandler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
	//TO DO:
	//TASK 5
	//Disable DMA transfer, start DMA in IT mode with new source and re enable transfer
	//Remember to debounce using HAL_GetTick()
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0); // Clear interrupt flags
 80008ba:	2001      	movs	r0, #1
 80008bc:	f000 fe94 	bl	80015e8 <HAL_GPIO_EXTI_IRQHandler>
	Start = HAL_GetTick();
 80008c0:	f000 fa68 	bl	8000d94 <HAL_GetTick>
 80008c4:	0003      	movs	r3, r0
 80008c6:	001a      	movs	r2, r3
 80008c8:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <EXTI0_1_IRQHandler+0xc4>)
 80008ca:	601a      	str	r2, [r3, #0]

	if (GPIO_PIN_0== GPIO_PIN_SET && (Start - End)>200) // Debouncing delay
 80008cc:	4b2a      	ldr	r3, [pc, #168]	; (8000978 <EXTI0_1_IRQHandler+0xc4>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	4b2a      	ldr	r3, [pc, #168]	; (800097c <EXTI0_1_IRQHandler+0xc8>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	2bc8      	cmp	r3, #200	; 0xc8
 80008d8:	dd49      	ble.n	800096e <EXTI0_1_IRQHandler+0xba>
	{
		__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 80008da:	4b29      	ldr	r3, [pc, #164]	; (8000980 <EXTI0_1_IRQHandler+0xcc>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	68da      	ldr	r2, [r3, #12]
 80008e0:	4b27      	ldr	r3, [pc, #156]	; (8000980 <EXTI0_1_IRQHandler+0xcc>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4927      	ldr	r1, [pc, #156]	; (8000984 <EXTI0_1_IRQHandler+0xd0>)
 80008e6:	400a      	ands	r2, r1
 80008e8:	60da      	str	r2, [r3, #12]
		uint32_t DestAddress = (uint32_t) &(TIM3->CCR1);
 80008ea:	4b27      	ldr	r3, [pc, #156]	; (8000988 <EXTI0_1_IRQHandler+0xd4>)
 80008ec:	607b      	str	r3, [r7, #4]
		uint32_t src = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	603b      	str	r3, [r7, #0]
		mode = (mode+1)%3;
 80008f2:	4b26      	ldr	r3, [pc, #152]	; (800098c <EXTI0_1_IRQHandler+0xd8>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	3301      	adds	r3, #1
 80008f8:	2103      	movs	r1, #3
 80008fa:	0018      	movs	r0, r3
 80008fc:	f7ff fd7e 	bl	80003fc <__aeabi_idivmod>
 8000900:	000b      	movs	r3, r1
 8000902:	001a      	movs	r2, r3
 8000904:	4b21      	ldr	r3, [pc, #132]	; (800098c <EXTI0_1_IRQHandler+0xd8>)
 8000906:	601a      	str	r2, [r3, #0]
		switch(mode){
 8000908:	4b20      	ldr	r3, [pc, #128]	; (800098c <EXTI0_1_IRQHandler+0xd8>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b02      	cmp	r3, #2
 800090e:	d009      	beq.n	8000924 <EXTI0_1_IRQHandler+0x70>
 8000910:	dc0a      	bgt.n	8000928 <EXTI0_1_IRQHandler+0x74>
 8000912:	2b00      	cmp	r3, #0
 8000914:	d002      	beq.n	800091c <EXTI0_1_IRQHandler+0x68>
 8000916:	2b01      	cmp	r3, #1
 8000918:	d002      	beq.n	8000920 <EXTI0_1_IRQHandler+0x6c>
 800091a:	e005      	b.n	8000928 <EXTI0_1_IRQHandler+0x74>
			case 0:
				src = sin_LUT;
 800091c:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <EXTI0_1_IRQHandler+0xdc>)
 800091e:	603b      	str	r3, [r7, #0]
			case 1:
				src = saw_LUT;
 8000920:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <EXTI0_1_IRQHandler+0xe0>)
 8000922:	603b      	str	r3, [r7, #0]
			case 2:
				src = triangle_LUT;
 8000924:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <EXTI0_1_IRQHandler+0xe4>)
 8000926:	603b      	str	r3, [r7, #0]
			default:
				src = sin_LUT;
 8000928:	4b19      	ldr	r3, [pc, #100]	; (8000990 <EXTI0_1_IRQHandler+0xdc>)
 800092a:	603b      	str	r3, [r7, #0]
		}
		// Display the mode
		sprintf(buffer, "Mode: %d\r\n", mode);
 800092c:	4b17      	ldr	r3, [pc, #92]	; (800098c <EXTI0_1_IRQHandler+0xd8>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	491a      	ldr	r1, [pc, #104]	; (800099c <EXTI0_1_IRQHandler+0xe8>)
 8000932:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <EXTI0_1_IRQHandler+0xec>)
 8000934:	0018      	movs	r0, r3
 8000936:	f002 ff13 	bl	8003760 <siprintf>
		// Transmit data via UART
		HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 800093a:	23fa      	movs	r3, #250	; 0xfa
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	4918      	ldr	r1, [pc, #96]	; (80009a0 <EXTI0_1_IRQHandler+0xec>)
 8000940:	4818      	ldr	r0, [pc, #96]	; (80009a4 <EXTI0_1_IRQHandler+0xf0>)
 8000942:	220e      	movs	r2, #14
 8000944:	f002 fb30 	bl	8002fa8 <HAL_UART_Transmit>
		HAL_DMA_Start_IT(&hdma_tim2_ch1, src, DestAddress, 4);
 8000948:	687a      	ldr	r2, [r7, #4]
 800094a:	6839      	ldr	r1, [r7, #0]
 800094c:	4816      	ldr	r0, [pc, #88]	; (80009a8 <EXTI0_1_IRQHandler+0xf4>)
 800094e:	2304      	movs	r3, #4
 8000950:	f000 fb50 	bl	8000ff4 <HAL_DMA_Start_IT>
		__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <EXTI0_1_IRQHandler+0xcc>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	68da      	ldr	r2, [r3, #12]
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <EXTI0_1_IRQHandler+0xcc>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2180      	movs	r1, #128	; 0x80
 8000960:	0089      	lsls	r1, r1, #2
 8000962:	430a      	orrs	r2, r1
 8000964:	60da      	str	r2, [r3, #12]
		End = Start;
 8000966:	4b04      	ldr	r3, [pc, #16]	; (8000978 <EXTI0_1_IRQHandler+0xc4>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	4b04      	ldr	r3, [pc, #16]	; (800097c <EXTI0_1_IRQHandler+0xc8>)
 800096c:	601a      	str	r2, [r3, #0]
	}

}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b002      	add	sp, #8
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	200007e4 	.word	0x200007e4
 800097c:	200007e8 	.word	0x200007e8
 8000980:	2000068c 	.word	0x2000068c
 8000984:	fffffdff 	.word	0xfffffdff
 8000988:	40000434 	.word	0x40000434
 800098c:	200007ec 	.word	0x200007ec
 8000990:	20000000 	.word	0x20000000
 8000994:	20000200 	.word	0x20000200
 8000998:	20000400 	.word	0x20000400
 800099c:	08004054 	.word	0x08004054
 80009a0:	200007f0 	.word	0x200007f0
 80009a4:	20000760 	.word	0x20000760
 80009a8:	2000071c 	.word	0x2000071c

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <Error_Handler+0x8>
	...

080009b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <HAL_MspInit+0x44>)
 80009c0:	699a      	ldr	r2, [r3, #24]
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <HAL_MspInit+0x44>)
 80009c4:	2101      	movs	r1, #1
 80009c6:	430a      	orrs	r2, r1
 80009c8:	619a      	str	r2, [r3, #24]
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <HAL_MspInit+0x44>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	2201      	movs	r2, #1
 80009d0:	4013      	ands	r3, r2
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <HAL_MspInit+0x44>)
 80009d8:	69da      	ldr	r2, [r3, #28]
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <HAL_MspInit+0x44>)
 80009dc:	2180      	movs	r1, #128	; 0x80
 80009de:	0549      	lsls	r1, r1, #21
 80009e0:	430a      	orrs	r2, r1
 80009e2:	61da      	str	r2, [r3, #28]
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <HAL_MspInit+0x44>)
 80009e6:	69da      	ldr	r2, [r3, #28]
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	055b      	lsls	r3, r3, #21
 80009ec:	4013      	ands	r3, r2
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b002      	add	sp, #8
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	40021000 	.word	0x40021000

08000a00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	2380      	movs	r3, #128	; 0x80
 8000a0e:	05db      	lsls	r3, r3, #23
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d134      	bne.n	8000a7e <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a14:	4b24      	ldr	r3, [pc, #144]	; (8000aa8 <HAL_TIM_Base_MspInit+0xa8>)
 8000a16:	69da      	ldr	r2, [r3, #28]
 8000a18:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <HAL_TIM_Base_MspInit+0xa8>)
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	61da      	str	r2, [r3, #28]
 8000a20:	4b21      	ldr	r3, [pc, #132]	; (8000aa8 <HAL_TIM_Base_MspInit+0xa8>)
 8000a22:	69db      	ldr	r3, [r3, #28]
 8000a24:	2201      	movs	r2, #1
 8000a26:	4013      	ands	r3, r2
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000a2c:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <HAL_TIM_Base_MspInit+0xac>)
 8000a2e:	4a20      	ldr	r2, [pc, #128]	; (8000ab0 <HAL_TIM_Base_MspInit+0xb0>)
 8000a30:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a32:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <HAL_TIM_Base_MspInit+0xac>)
 8000a34:	2210      	movs	r2, #16
 8000a36:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a38:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <HAL_TIM_Base_MspInit+0xac>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <HAL_TIM_Base_MspInit+0xac>)
 8000a40:	2280      	movs	r2, #128	; 0x80
 8000a42:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a44:	4b19      	ldr	r3, [pc, #100]	; (8000aac <HAL_TIM_Base_MspInit+0xac>)
 8000a46:	2280      	movs	r2, #128	; 0x80
 8000a48:	0092      	lsls	r2, r2, #2
 8000a4a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <HAL_TIM_Base_MspInit+0xac>)
 8000a4e:	2280      	movs	r2, #128	; 0x80
 8000a50:	0112      	lsls	r2, r2, #4
 8000a52:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000a54:	4b15      	ldr	r3, [pc, #84]	; (8000aac <HAL_TIM_Base_MspInit+0xac>)
 8000a56:	2220      	movs	r2, #32
 8000a58:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <HAL_TIM_Base_MspInit+0xac>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_TIM_Base_MspInit+0xac>)
 8000a62:	0018      	movs	r0, r3
 8000a64:	f000 fa7e 	bl	8000f64 <HAL_DMA_Init>
 8000a68:	1e03      	subs	r3, r0, #0
 8000a6a:	d001      	beq.n	8000a70 <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 8000a6c:	f7ff ff9e 	bl	80009ac <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a0e      	ldr	r2, [pc, #56]	; (8000aac <HAL_TIM_Base_MspInit+0xac>)
 8000a74:	625a      	str	r2, [r3, #36]	; 0x24
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <HAL_TIM_Base_MspInit+0xac>)
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a7c:	e010      	b.n	8000aa0 <HAL_TIM_Base_MspInit+0xa0>
  else if(htim_base->Instance==TIM3)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a0c      	ldr	r2, [pc, #48]	; (8000ab4 <HAL_TIM_Base_MspInit+0xb4>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d10b      	bne.n	8000aa0 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a88:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <HAL_TIM_Base_MspInit+0xa8>)
 8000a8a:	69da      	ldr	r2, [r3, #28]
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_TIM_Base_MspInit+0xa8>)
 8000a8e:	2102      	movs	r1, #2
 8000a90:	430a      	orrs	r2, r1
 8000a92:	61da      	str	r2, [r3, #28]
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <HAL_TIM_Base_MspInit+0xa8>)
 8000a96:	69db      	ldr	r3, [r3, #28]
 8000a98:	2202      	movs	r2, #2
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
}
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b004      	add	sp, #16
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	2000071c 	.word	0x2000071c
 8000ab0:	40020058 	.word	0x40020058
 8000ab4:	40000400 	.word	0x40000400

08000ab8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b089      	sub	sp, #36	; 0x24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	240c      	movs	r4, #12
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	2314      	movs	r3, #20
 8000ac8:	001a      	movs	r2, r3
 8000aca:	2100      	movs	r1, #0
 8000acc:	f002 fe40 	bl	8003750 <memset>
  if(htim->Instance==TIM3)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a15      	ldr	r2, [pc, #84]	; (8000b2c <HAL_TIM_MspPostInit+0x74>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d124      	bne.n	8000b24 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <HAL_TIM_MspPostInit+0x78>)
 8000adc:	695a      	ldr	r2, [r3, #20]
 8000ade:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <HAL_TIM_MspPostInit+0x78>)
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	0289      	lsls	r1, r1, #10
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	615a      	str	r2, [r3, #20]
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <HAL_TIM_MspPostInit+0x78>)
 8000aea:	695a      	ldr	r2, [r3, #20]
 8000aec:	2380      	movs	r3, #128	; 0x80
 8000aee:	029b      	lsls	r3, r3, #10
 8000af0:	4013      	ands	r3, r2
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000af6:	0021      	movs	r1, r4
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	2240      	movs	r2, #64	; 0x40
 8000afc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	2202      	movs	r2, #2
 8000b02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000b10:	187b      	adds	r3, r7, r1
 8000b12:	2201      	movs	r2, #1
 8000b14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	187a      	adds	r2, r7, r1
 8000b18:	2390      	movs	r3, #144	; 0x90
 8000b1a:	05db      	lsls	r3, r3, #23
 8000b1c:	0011      	movs	r1, r2
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f000 fbb8 	bl	8001294 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b009      	add	sp, #36	; 0x24
 8000b2a:	bd90      	pop	{r4, r7, pc}
 8000b2c:	40000400 	.word	0x40000400
 8000b30:	40021000 	.word	0x40021000

08000b34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b08b      	sub	sp, #44	; 0x2c
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	2414      	movs	r4, #20
 8000b3e:	193b      	adds	r3, r7, r4
 8000b40:	0018      	movs	r0, r3
 8000b42:	2314      	movs	r3, #20
 8000b44:	001a      	movs	r2, r3
 8000b46:	2100      	movs	r1, #0
 8000b48:	f002 fe02 	bl	8003750 <memset>
  if(huart->Instance==USART2)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a1c      	ldr	r2, [pc, #112]	; (8000bc4 <HAL_UART_MspInit+0x90>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d132      	bne.n	8000bbc <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b56:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <HAL_UART_MspInit+0x94>)
 8000b58:	69da      	ldr	r2, [r3, #28]
 8000b5a:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <HAL_UART_MspInit+0x94>)
 8000b5c:	2180      	movs	r1, #128	; 0x80
 8000b5e:	0289      	lsls	r1, r1, #10
 8000b60:	430a      	orrs	r2, r1
 8000b62:	61da      	str	r2, [r3, #28]
 8000b64:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <HAL_UART_MspInit+0x94>)
 8000b66:	69da      	ldr	r2, [r3, #28]
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	029b      	lsls	r3, r3, #10
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_UART_MspInit+0x94>)
 8000b74:	695a      	ldr	r2, [r3, #20]
 8000b76:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <HAL_UART_MspInit+0x94>)
 8000b78:	2180      	movs	r1, #128	; 0x80
 8000b7a:	0289      	lsls	r1, r1, #10
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	615a      	str	r2, [r3, #20]
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <HAL_UART_MspInit+0x94>)
 8000b82:	695a      	ldr	r2, [r3, #20]
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	029b      	lsls	r3, r3, #10
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b8e:	0021      	movs	r1, r4
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	220c      	movs	r2, #12
 8000b94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	2202      	movs	r2, #2
 8000b9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	2203      	movs	r2, #3
 8000ba6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	2201      	movs	r2, #1
 8000bac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	187a      	adds	r2, r7, r1
 8000bb0:	2390      	movs	r3, #144	; 0x90
 8000bb2:	05db      	lsls	r3, r3, #23
 8000bb4:	0011      	movs	r1, r2
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f000 fb6c 	bl	8001294 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bbc:	46c0      	nop			; (mov r8, r8)
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b00b      	add	sp, #44	; 0x2c
 8000bc2:	bd90      	pop	{r4, r7, pc}
 8000bc4:	40004400 	.word	0x40004400
 8000bc8:	40021000 	.word	0x40021000

08000bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <NMI_Handler+0x4>

08000bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <HardFault_Handler+0x4>

08000bd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf0:	f000 f8be 	bl	8000d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <DMA1_Channel4_5_IRQHandler+0x14>)
 8000c02:	0018      	movs	r0, r3
 8000c04:	f000 fa5c 	bl	80010c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000c08:	46c0      	nop			; (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	2000071c 	.word	0x2000071c

08000c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c1c:	4a14      	ldr	r2, [pc, #80]	; (8000c70 <_sbrk+0x5c>)
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <_sbrk+0x60>)
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c28:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d102      	bne.n	8000c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <_sbrk+0x64>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <_sbrk+0x68>)
 8000c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	18d3      	adds	r3, r2, r3
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d207      	bcs.n	8000c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c44:	f002 fd5a 	bl	80036fc <__errno>
 8000c48:	0003      	movs	r3, r0
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	425b      	negs	r3, r3
 8000c52:	e009      	b.n	8000c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5a:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	18d2      	adds	r2, r2, r3
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <_sbrk+0x64>)
 8000c64:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c66:	68fb      	ldr	r3, [r7, #12]
}
 8000c68:	0018      	movs	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	b006      	add	sp, #24
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20002000 	.word	0x20002000
 8000c74:	00000400 	.word	0x00000400
 8000c78:	20000800 	.word	0x20000800
 8000c7c:	20000818 	.word	0x20000818

08000c80 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c84:	46c0      	nop			; (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c8c:	480d      	ldr	r0, [pc, #52]	; (8000cc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c8e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c90:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c92:	490e      	ldr	r1, [pc, #56]	; (8000ccc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c94:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <LoopForever+0xe>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c98:	e002      	b.n	8000ca0 <LoopCopyDataInit>

08000c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9e:	3304      	adds	r3, #4

08000ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca4:	d3f9      	bcc.n	8000c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca6:	4a0b      	ldr	r2, [pc, #44]	; (8000cd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ca8:	4c0b      	ldr	r4, [pc, #44]	; (8000cd8 <LoopForever+0x16>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cac:	e001      	b.n	8000cb2 <LoopFillZerobss>

08000cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb0:	3204      	adds	r2, #4

08000cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb4:	d3fb      	bcc.n	8000cae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cb6:	f7ff ffe3 	bl	8000c80 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000cba:	f002 fd25 	bl	8003708 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cbe:	f7ff fba3 	bl	8000408 <main>

08000cc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000cc2:	e7fe      	b.n	8000cc2 <LoopForever>
  ldr   r0, =_estack
 8000cc4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ccc:	20000670 	.word	0x20000670
  ldr r2, =_sidata
 8000cd0:	080040d4 	.word	0x080040d4
  ldr r2, =_sbss
 8000cd4:	20000670 	.word	0x20000670
  ldr r4, =_ebss
 8000cd8:	20000818 	.word	0x20000818

08000cdc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cdc:	e7fe      	b.n	8000cdc <ADC1_COMP_IRQHandler>
	...

08000ce0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <HAL_Init+0x24>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_Init+0x24>)
 8000cea:	2110      	movs	r1, #16
 8000cec:	430a      	orrs	r2, r1
 8000cee:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f000 f809 	bl	8000d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf6:	f7ff fe5f 	bl	80009b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cfa:	2300      	movs	r3, #0
}
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	40022000 	.word	0x40022000

08000d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d10:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <HAL_InitTick+0x5c>)
 8000d12:	681c      	ldr	r4, [r3, #0]
 8000d14:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <HAL_InitTick+0x60>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	0019      	movs	r1, r3
 8000d1a:	23fa      	movs	r3, #250	; 0xfa
 8000d1c:	0098      	lsls	r0, r3, #2
 8000d1e:	f7ff f9fd 	bl	800011c <__udivsi3>
 8000d22:	0003      	movs	r3, r0
 8000d24:	0019      	movs	r1, r3
 8000d26:	0020      	movs	r0, r4
 8000d28:	f7ff f9f8 	bl	800011c <__udivsi3>
 8000d2c:	0003      	movs	r3, r0
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f000 f90b 	bl	8000f4a <HAL_SYSTICK_Config>
 8000d34:	1e03      	subs	r3, r0, #0
 8000d36:	d001      	beq.n	8000d3c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e00f      	b.n	8000d5c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b03      	cmp	r3, #3
 8000d40:	d80b      	bhi.n	8000d5a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	2301      	movs	r3, #1
 8000d46:	425b      	negs	r3, r3
 8000d48:	2200      	movs	r2, #0
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f000 f8d8 	bl	8000f00 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_InitTick+0x64>)
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000d56:	2300      	movs	r3, #0
 8000d58:	e000      	b.n	8000d5c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
}
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b003      	add	sp, #12
 8000d62:	bd90      	pop	{r4, r7, pc}
 8000d64:	20000600 	.word	0x20000600
 8000d68:	20000608 	.word	0x20000608
 8000d6c:	20000604 	.word	0x20000604

08000d70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <HAL_IncTick+0x1c>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	001a      	movs	r2, r3
 8000d7a:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <HAL_IncTick+0x20>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	18d2      	adds	r2, r2, r3
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <HAL_IncTick+0x20>)
 8000d82:	601a      	str	r2, [r3, #0]
}
 8000d84:	46c0      	nop			; (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	20000608 	.word	0x20000608
 8000d90:	20000804 	.word	0x20000804

08000d94 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  return uwTick;
 8000d98:	4b02      	ldr	r3, [pc, #8]	; (8000da4 <HAL_GetTick+0x10>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	20000804 	.word	0x20000804

08000da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	0002      	movs	r2, r0
 8000db0:	1dfb      	adds	r3, r7, #7
 8000db2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	1dfb      	adds	r3, r7, #7
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b7f      	cmp	r3, #127	; 0x7f
 8000dba:	d809      	bhi.n	8000dd0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dbc:	1dfb      	adds	r3, r7, #7
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	001a      	movs	r2, r3
 8000dc2:	231f      	movs	r3, #31
 8000dc4:	401a      	ands	r2, r3
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <__NVIC_EnableIRQ+0x30>)
 8000dc8:	2101      	movs	r1, #1
 8000dca:	4091      	lsls	r1, r2
 8000dcc:	000a      	movs	r2, r1
 8000dce:	601a      	str	r2, [r3, #0]
  }
}
 8000dd0:	46c0      	nop			; (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b002      	add	sp, #8
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	e000e100 	.word	0xe000e100

08000ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	0002      	movs	r2, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	1dfb      	adds	r3, r7, #7
 8000de8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b7f      	cmp	r3, #127	; 0x7f
 8000df0:	d828      	bhi.n	8000e44 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df2:	4a2f      	ldr	r2, [pc, #188]	; (8000eb0 <__NVIC_SetPriority+0xd4>)
 8000df4:	1dfb      	adds	r3, r7, #7
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	b25b      	sxtb	r3, r3
 8000dfa:	089b      	lsrs	r3, r3, #2
 8000dfc:	33c0      	adds	r3, #192	; 0xc0
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	589b      	ldr	r3, [r3, r2]
 8000e02:	1dfa      	adds	r2, r7, #7
 8000e04:	7812      	ldrb	r2, [r2, #0]
 8000e06:	0011      	movs	r1, r2
 8000e08:	2203      	movs	r2, #3
 8000e0a:	400a      	ands	r2, r1
 8000e0c:	00d2      	lsls	r2, r2, #3
 8000e0e:	21ff      	movs	r1, #255	; 0xff
 8000e10:	4091      	lsls	r1, r2
 8000e12:	000a      	movs	r2, r1
 8000e14:	43d2      	mvns	r2, r2
 8000e16:	401a      	ands	r2, r3
 8000e18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	019b      	lsls	r3, r3, #6
 8000e1e:	22ff      	movs	r2, #255	; 0xff
 8000e20:	401a      	ands	r2, r3
 8000e22:	1dfb      	adds	r3, r7, #7
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	0018      	movs	r0, r3
 8000e28:	2303      	movs	r3, #3
 8000e2a:	4003      	ands	r3, r0
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e30:	481f      	ldr	r0, [pc, #124]	; (8000eb0 <__NVIC_SetPriority+0xd4>)
 8000e32:	1dfb      	adds	r3, r7, #7
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	b25b      	sxtb	r3, r3
 8000e38:	089b      	lsrs	r3, r3, #2
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	33c0      	adds	r3, #192	; 0xc0
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e42:	e031      	b.n	8000ea8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e44:	4a1b      	ldr	r2, [pc, #108]	; (8000eb4 <__NVIC_SetPriority+0xd8>)
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	0019      	movs	r1, r3
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	400b      	ands	r3, r1
 8000e50:	3b08      	subs	r3, #8
 8000e52:	089b      	lsrs	r3, r3, #2
 8000e54:	3306      	adds	r3, #6
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	18d3      	adds	r3, r2, r3
 8000e5a:	3304      	adds	r3, #4
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	1dfa      	adds	r2, r7, #7
 8000e60:	7812      	ldrb	r2, [r2, #0]
 8000e62:	0011      	movs	r1, r2
 8000e64:	2203      	movs	r2, #3
 8000e66:	400a      	ands	r2, r1
 8000e68:	00d2      	lsls	r2, r2, #3
 8000e6a:	21ff      	movs	r1, #255	; 0xff
 8000e6c:	4091      	lsls	r1, r2
 8000e6e:	000a      	movs	r2, r1
 8000e70:	43d2      	mvns	r2, r2
 8000e72:	401a      	ands	r2, r3
 8000e74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	019b      	lsls	r3, r3, #6
 8000e7a:	22ff      	movs	r2, #255	; 0xff
 8000e7c:	401a      	ands	r2, r3
 8000e7e:	1dfb      	adds	r3, r7, #7
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	0018      	movs	r0, r3
 8000e84:	2303      	movs	r3, #3
 8000e86:	4003      	ands	r3, r0
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e8c:	4809      	ldr	r0, [pc, #36]	; (8000eb4 <__NVIC_SetPriority+0xd8>)
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	001c      	movs	r4, r3
 8000e94:	230f      	movs	r3, #15
 8000e96:	4023      	ands	r3, r4
 8000e98:	3b08      	subs	r3, #8
 8000e9a:	089b      	lsrs	r3, r3, #2
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	3306      	adds	r3, #6
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	18c3      	adds	r3, r0, r3
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	601a      	str	r2, [r3, #0]
}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b003      	add	sp, #12
 8000eae:	bd90      	pop	{r4, r7, pc}
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	1e5a      	subs	r2, r3, #1
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	045b      	lsls	r3, r3, #17
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d301      	bcc.n	8000ed0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e010      	b.n	8000ef2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <SysTick_Config+0x44>)
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	3a01      	subs	r2, #1
 8000ed6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed8:	2301      	movs	r3, #1
 8000eda:	425b      	negs	r3, r3
 8000edc:	2103      	movs	r1, #3
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f7ff ff7c 	bl	8000ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <SysTick_Config+0x44>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eea:	4b04      	ldr	r3, [pc, #16]	; (8000efc <SysTick_Config+0x44>)
 8000eec:	2207      	movs	r2, #7
 8000eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b002      	add	sp, #8
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	e000e010 	.word	0xe000e010

08000f00 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	210f      	movs	r1, #15
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	1c02      	adds	r2, r0, #0
 8000f10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	b25b      	sxtb	r3, r3
 8000f1a:	0011      	movs	r1, r2
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f7ff ff5d 	bl	8000ddc <__NVIC_SetPriority>
}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b004      	add	sp, #16
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	0002      	movs	r2, r0
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	b25b      	sxtb	r3, r3
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f7ff ff33 	bl	8000da8 <__NVIC_EnableIRQ>
}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b002      	add	sp, #8
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	0018      	movs	r0, r3
 8000f56:	f7ff ffaf 	bl	8000eb8 <SysTick_Config>
 8000f5a:	0003      	movs	r3, r0
}
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b002      	add	sp, #8
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d101      	bne.n	8000f7a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e036      	b.n	8000fe8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2221      	movs	r2, #33	; 0x21
 8000f7e:	2102      	movs	r1, #2
 8000f80:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	4a18      	ldr	r2, [pc, #96]	; (8000ff0 <HAL_DMA_Init+0x8c>)
 8000f8e:	4013      	ands	r3, r2
 8000f90:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000f9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f000 f946 	bl	800125c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2221      	movs	r2, #33	; 0x21
 8000fda:	2101      	movs	r1, #1
 8000fdc:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2220      	movs	r2, #32
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
}  
 8000fe8:	0018      	movs	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b004      	add	sp, #16
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	ffffc00f 	.word	0xffffc00f

08000ff4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
 8001000:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001002:	2317      	movs	r3, #23
 8001004:	18fb      	adds	r3, r7, r3
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2220      	movs	r2, #32
 800100e:	5c9b      	ldrb	r3, [r3, r2]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d101      	bne.n	8001018 <HAL_DMA_Start_IT+0x24>
 8001014:	2302      	movs	r3, #2
 8001016:	e04f      	b.n	80010b8 <HAL_DMA_Start_IT+0xc4>
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2220      	movs	r2, #32
 800101c:	2101      	movs	r1, #1
 800101e:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2221      	movs	r2, #33	; 0x21
 8001024:	5c9b      	ldrb	r3, [r3, r2]
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b01      	cmp	r3, #1
 800102a:	d13a      	bne.n	80010a2 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2221      	movs	r2, #33	; 0x21
 8001030:	2102      	movs	r1, #2
 8001032:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2200      	movs	r2, #0
 8001038:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2101      	movs	r1, #1
 8001046:	438a      	bics	r2, r1
 8001048:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	68b9      	ldr	r1, [r7, #8]
 8001050:	68f8      	ldr	r0, [r7, #12]
 8001052:	f000 f8d7 	bl	8001204 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105a:	2b00      	cmp	r3, #0
 800105c:	d008      	beq.n	8001070 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	210e      	movs	r1, #14
 800106a:	430a      	orrs	r2, r1
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	e00f      	b.n	8001090 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	210a      	movs	r1, #10
 800107c:	430a      	orrs	r2, r1
 800107e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2104      	movs	r1, #4
 800108c:	438a      	bics	r2, r1
 800108e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2101      	movs	r1, #1
 800109c:	430a      	orrs	r2, r1
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	e007      	b.n	80010b2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2220      	movs	r2, #32
 80010a6:	2100      	movs	r1, #0
 80010a8:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80010aa:	2317      	movs	r3, #23
 80010ac:	18fb      	adds	r3, r7, r3
 80010ae:	2202      	movs	r2, #2
 80010b0:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80010b2:	2317      	movs	r3, #23
 80010b4:	18fb      	adds	r3, r7, r3
 80010b6:	781b      	ldrb	r3, [r3, #0]
} 
 80010b8:	0018      	movs	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b006      	add	sp, #24
 80010be:	bd80      	pop	{r7, pc}

080010c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	2204      	movs	r2, #4
 80010de:	409a      	lsls	r2, r3
 80010e0:	0013      	movs	r3, r2
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	4013      	ands	r3, r2
 80010e6:	d024      	beq.n	8001132 <HAL_DMA_IRQHandler+0x72>
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	2204      	movs	r2, #4
 80010ec:	4013      	ands	r3, r2
 80010ee:	d020      	beq.n	8001132 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2220      	movs	r2, #32
 80010f8:	4013      	ands	r3, r2
 80010fa:	d107      	bne.n	800110c <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2104      	movs	r1, #4
 8001108:	438a      	bics	r2, r1
 800110a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001114:	2104      	movs	r1, #4
 8001116:	4091      	lsls	r1, r2
 8001118:	000a      	movs	r2, r1
 800111a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001120:	2b00      	cmp	r3, #0
 8001122:	d100      	bne.n	8001126 <HAL_DMA_IRQHandler+0x66>
 8001124:	e06a      	b.n	80011fc <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	0010      	movs	r0, r2
 800112e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001130:	e064      	b.n	80011fc <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	2202      	movs	r2, #2
 8001138:	409a      	lsls	r2, r3
 800113a:	0013      	movs	r3, r2
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	4013      	ands	r3, r2
 8001140:	d02b      	beq.n	800119a <HAL_DMA_IRQHandler+0xda>
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	2202      	movs	r2, #2
 8001146:	4013      	ands	r3, r2
 8001148:	d027      	beq.n	800119a <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2220      	movs	r2, #32
 8001152:	4013      	ands	r3, r2
 8001154:	d10b      	bne.n	800116e <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	210a      	movs	r1, #10
 8001162:	438a      	bics	r2, r1
 8001164:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2221      	movs	r2, #33	; 0x21
 800116a:	2101      	movs	r1, #1
 800116c:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001176:	2102      	movs	r1, #2
 8001178:	4091      	lsls	r1, r2
 800117a:	000a      	movs	r2, r1
 800117c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2220      	movs	r2, #32
 8001182:	2100      	movs	r1, #0
 8001184:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800118a:	2b00      	cmp	r3, #0
 800118c:	d036      	beq.n	80011fc <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	0010      	movs	r0, r2
 8001196:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001198:	e030      	b.n	80011fc <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	2208      	movs	r2, #8
 80011a0:	409a      	lsls	r2, r3
 80011a2:	0013      	movs	r3, r2
 80011a4:	68fa      	ldr	r2, [r7, #12]
 80011a6:	4013      	ands	r3, r2
 80011a8:	d028      	beq.n	80011fc <HAL_DMA_IRQHandler+0x13c>
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	2208      	movs	r2, #8
 80011ae:	4013      	ands	r3, r2
 80011b0:	d024      	beq.n	80011fc <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	210e      	movs	r1, #14
 80011be:	438a      	bics	r2, r1
 80011c0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ca:	2101      	movs	r1, #1
 80011cc:	4091      	lsls	r1, r2
 80011ce:	000a      	movs	r2, r1
 80011d0:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2201      	movs	r2, #1
 80011d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2221      	movs	r2, #33	; 0x21
 80011dc:	2101      	movs	r1, #1
 80011de:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2220      	movs	r2, #32
 80011e4:	2100      	movs	r1, #0
 80011e6:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d005      	beq.n	80011fc <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	0010      	movs	r0, r2
 80011f8:	4798      	blx	r3
    }
   }
}  
 80011fa:	e7ff      	b.n	80011fc <HAL_DMA_IRQHandler+0x13c>
 80011fc:	46c0      	nop			; (mov r8, r8)
 80011fe:	46bd      	mov	sp, r7
 8001200:	b004      	add	sp, #16
 8001202:	bd80      	pop	{r7, pc}

08001204 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
 8001210:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800121a:	2101      	movs	r1, #1
 800121c:	4091      	lsls	r1, r2
 800121e:	000a      	movs	r2, r1
 8001220:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b10      	cmp	r3, #16
 8001230:	d108      	bne.n	8001244 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001242:	e007      	b.n	8001254 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	68ba      	ldr	r2, [r7, #8]
 800124a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	60da      	str	r2, [r3, #12]
}
 8001254:	46c0      	nop			; (mov r8, r8)
 8001256:	46bd      	mov	sp, r7
 8001258:	b004      	add	sp, #16
 800125a:	bd80      	pop	{r7, pc}

0800125c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a08      	ldr	r2, [pc, #32]	; (800128c <DMA_CalcBaseAndBitshift+0x30>)
 800126a:	4694      	mov	ip, r2
 800126c:	4463      	add	r3, ip
 800126e:	2114      	movs	r1, #20
 8001270:	0018      	movs	r0, r3
 8001272:	f7fe ff53 	bl	800011c <__udivsi3>
 8001276:	0003      	movs	r3, r0
 8001278:	009a      	lsls	r2, r3, #2
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a03      	ldr	r2, [pc, #12]	; (8001290 <DMA_CalcBaseAndBitshift+0x34>)
 8001282:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001284:	46c0      	nop			; (mov r8, r8)
 8001286:	46bd      	mov	sp, r7
 8001288:	b002      	add	sp, #8
 800128a:	bd80      	pop	{r7, pc}
 800128c:	bffdfff8 	.word	0xbffdfff8
 8001290:	40020000 	.word	0x40020000

08001294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a2:	e14f      	b.n	8001544 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2101      	movs	r1, #1
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	4091      	lsls	r1, r2
 80012ae:	000a      	movs	r2, r1
 80012b0:	4013      	ands	r3, r2
 80012b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d100      	bne.n	80012bc <HAL_GPIO_Init+0x28>
 80012ba:	e140      	b.n	800153e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2203      	movs	r2, #3
 80012c2:	4013      	ands	r3, r2
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d005      	beq.n	80012d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2203      	movs	r2, #3
 80012ce:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d130      	bne.n	8001336 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	2203      	movs	r2, #3
 80012e0:	409a      	lsls	r2, r3
 80012e2:	0013      	movs	r3, r2
 80012e4:	43da      	mvns	r2, r3
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	68da      	ldr	r2, [r3, #12]
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	409a      	lsls	r2, r3
 80012f6:	0013      	movs	r3, r2
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800130a:	2201      	movs	r2, #1
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	409a      	lsls	r2, r3
 8001310:	0013      	movs	r3, r2
 8001312:	43da      	mvns	r2, r3
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	091b      	lsrs	r3, r3, #4
 8001320:	2201      	movs	r2, #1
 8001322:	401a      	ands	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	409a      	lsls	r2, r3
 8001328:	0013      	movs	r3, r2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2203      	movs	r2, #3
 800133c:	4013      	ands	r3, r2
 800133e:	2b03      	cmp	r3, #3
 8001340:	d017      	beq.n	8001372 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	2203      	movs	r2, #3
 800134e:	409a      	lsls	r2, r3
 8001350:	0013      	movs	r3, r2
 8001352:	43da      	mvns	r2, r3
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	689a      	ldr	r2, [r3, #8]
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	409a      	lsls	r2, r3
 8001364:	0013      	movs	r3, r2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2203      	movs	r2, #3
 8001378:	4013      	ands	r3, r2
 800137a:	2b02      	cmp	r3, #2
 800137c:	d123      	bne.n	80013c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	08da      	lsrs	r2, r3, #3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3208      	adds	r2, #8
 8001386:	0092      	lsls	r2, r2, #2
 8001388:	58d3      	ldr	r3, [r2, r3]
 800138a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	2207      	movs	r2, #7
 8001390:	4013      	ands	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	220f      	movs	r2, #15
 8001396:	409a      	lsls	r2, r3
 8001398:	0013      	movs	r3, r2
 800139a:	43da      	mvns	r2, r3
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	691a      	ldr	r2, [r3, #16]
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	2107      	movs	r1, #7
 80013aa:	400b      	ands	r3, r1
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	409a      	lsls	r2, r3
 80013b0:	0013      	movs	r3, r2
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	08da      	lsrs	r2, r3, #3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3208      	adds	r2, #8
 80013c0:	0092      	lsls	r2, r2, #2
 80013c2:	6939      	ldr	r1, [r7, #16]
 80013c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	2203      	movs	r2, #3
 80013d2:	409a      	lsls	r2, r3
 80013d4:	0013      	movs	r3, r2
 80013d6:	43da      	mvns	r2, r3
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2203      	movs	r2, #3
 80013e4:	401a      	ands	r2, r3
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	409a      	lsls	r2, r3
 80013ec:	0013      	movs	r3, r2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	23c0      	movs	r3, #192	; 0xc0
 8001400:	029b      	lsls	r3, r3, #10
 8001402:	4013      	ands	r3, r2
 8001404:	d100      	bne.n	8001408 <HAL_GPIO_Init+0x174>
 8001406:	e09a      	b.n	800153e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001408:	4b54      	ldr	r3, [pc, #336]	; (800155c <HAL_GPIO_Init+0x2c8>)
 800140a:	699a      	ldr	r2, [r3, #24]
 800140c:	4b53      	ldr	r3, [pc, #332]	; (800155c <HAL_GPIO_Init+0x2c8>)
 800140e:	2101      	movs	r1, #1
 8001410:	430a      	orrs	r2, r1
 8001412:	619a      	str	r2, [r3, #24]
 8001414:	4b51      	ldr	r3, [pc, #324]	; (800155c <HAL_GPIO_Init+0x2c8>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	2201      	movs	r2, #1
 800141a:	4013      	ands	r3, r2
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001420:	4a4f      	ldr	r2, [pc, #316]	; (8001560 <HAL_GPIO_Init+0x2cc>)
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	089b      	lsrs	r3, r3, #2
 8001426:	3302      	adds	r3, #2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	589b      	ldr	r3, [r3, r2]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	2203      	movs	r2, #3
 8001432:	4013      	ands	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	220f      	movs	r2, #15
 8001438:	409a      	lsls	r2, r3
 800143a:	0013      	movs	r3, r2
 800143c:	43da      	mvns	r2, r3
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4013      	ands	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	2390      	movs	r3, #144	; 0x90
 8001448:	05db      	lsls	r3, r3, #23
 800144a:	429a      	cmp	r2, r3
 800144c:	d013      	beq.n	8001476 <HAL_GPIO_Init+0x1e2>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a44      	ldr	r2, [pc, #272]	; (8001564 <HAL_GPIO_Init+0x2d0>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d00d      	beq.n	8001472 <HAL_GPIO_Init+0x1de>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a43      	ldr	r2, [pc, #268]	; (8001568 <HAL_GPIO_Init+0x2d4>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d007      	beq.n	800146e <HAL_GPIO_Init+0x1da>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a42      	ldr	r2, [pc, #264]	; (800156c <HAL_GPIO_Init+0x2d8>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d101      	bne.n	800146a <HAL_GPIO_Init+0x1d6>
 8001466:	2303      	movs	r3, #3
 8001468:	e006      	b.n	8001478 <HAL_GPIO_Init+0x1e4>
 800146a:	2305      	movs	r3, #5
 800146c:	e004      	b.n	8001478 <HAL_GPIO_Init+0x1e4>
 800146e:	2302      	movs	r3, #2
 8001470:	e002      	b.n	8001478 <HAL_GPIO_Init+0x1e4>
 8001472:	2301      	movs	r3, #1
 8001474:	e000      	b.n	8001478 <HAL_GPIO_Init+0x1e4>
 8001476:	2300      	movs	r3, #0
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	2103      	movs	r1, #3
 800147c:	400a      	ands	r2, r1
 800147e:	0092      	lsls	r2, r2, #2
 8001480:	4093      	lsls	r3, r2
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001488:	4935      	ldr	r1, [pc, #212]	; (8001560 <HAL_GPIO_Init+0x2cc>)
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	089b      	lsrs	r3, r3, #2
 800148e:	3302      	adds	r3, #2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001496:	4b36      	ldr	r3, [pc, #216]	; (8001570 <HAL_GPIO_Init+0x2dc>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	43da      	mvns	r2, r3
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	2380      	movs	r3, #128	; 0x80
 80014ac:	025b      	lsls	r3, r3, #9
 80014ae:	4013      	ands	r3, r2
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014ba:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <HAL_GPIO_Init+0x2dc>)
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80014c0:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <HAL_GPIO_Init+0x2dc>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	43da      	mvns	r2, r3
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	2380      	movs	r3, #128	; 0x80
 80014d6:	029b      	lsls	r3, r3, #10
 80014d8:	4013      	ands	r3, r2
 80014da:	d003      	beq.n	80014e4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014e4:	4b22      	ldr	r3, [pc, #136]	; (8001570 <HAL_GPIO_Init+0x2dc>)
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ea:	4b21      	ldr	r3, [pc, #132]	; (8001570 <HAL_GPIO_Init+0x2dc>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	43da      	mvns	r2, r3
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	4013      	ands	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	2380      	movs	r3, #128	; 0x80
 8001500:	035b      	lsls	r3, r3, #13
 8001502:	4013      	ands	r3, r2
 8001504:	d003      	beq.n	800150e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4313      	orrs	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800150e:	4b18      	ldr	r3, [pc, #96]	; (8001570 <HAL_GPIO_Init+0x2dc>)
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001514:	4b16      	ldr	r3, [pc, #88]	; (8001570 <HAL_GPIO_Init+0x2dc>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	43da      	mvns	r2, r3
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	4013      	ands	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	2380      	movs	r3, #128	; 0x80
 800152a:	039b      	lsls	r3, r3, #14
 800152c:	4013      	ands	r3, r2
 800152e:	d003      	beq.n	8001538 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	4313      	orrs	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001538:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <HAL_GPIO_Init+0x2dc>)
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	3301      	adds	r3, #1
 8001542:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	40da      	lsrs	r2, r3
 800154c:	1e13      	subs	r3, r2, #0
 800154e:	d000      	beq.n	8001552 <HAL_GPIO_Init+0x2be>
 8001550:	e6a8      	b.n	80012a4 <HAL_GPIO_Init+0x10>
  } 
}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	46c0      	nop			; (mov r8, r8)
 8001556:	46bd      	mov	sp, r7
 8001558:	b006      	add	sp, #24
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40021000 	.word	0x40021000
 8001560:	40010000 	.word	0x40010000
 8001564:	48000400 	.word	0x48000400
 8001568:	48000800 	.word	0x48000800
 800156c:	48000c00 	.word	0x48000c00
 8001570:	40010400 	.word	0x40010400

08001574 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	000a      	movs	r2, r1
 800157e:	1cbb      	adds	r3, r7, #2
 8001580:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	1cba      	adds	r2, r7, #2
 8001588:	8812      	ldrh	r2, [r2, #0]
 800158a:	4013      	ands	r3, r2
 800158c:	d004      	beq.n	8001598 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800158e:	230f      	movs	r3, #15
 8001590:	18fb      	adds	r3, r7, r3
 8001592:	2201      	movs	r2, #1
 8001594:	701a      	strb	r2, [r3, #0]
 8001596:	e003      	b.n	80015a0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001598:	230f      	movs	r3, #15
 800159a:	18fb      	adds	r3, r7, r3
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80015a0:	230f      	movs	r3, #15
 80015a2:	18fb      	adds	r3, r7, r3
 80015a4:	781b      	ldrb	r3, [r3, #0]
  }
 80015a6:	0018      	movs	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b004      	add	sp, #16
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
 80015b6:	0008      	movs	r0, r1
 80015b8:	0011      	movs	r1, r2
 80015ba:	1cbb      	adds	r3, r7, #2
 80015bc:	1c02      	adds	r2, r0, #0
 80015be:	801a      	strh	r2, [r3, #0]
 80015c0:	1c7b      	adds	r3, r7, #1
 80015c2:	1c0a      	adds	r2, r1, #0
 80015c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015c6:	1c7b      	adds	r3, r7, #1
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d004      	beq.n	80015d8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015ce:	1cbb      	adds	r3, r7, #2
 80015d0:	881a      	ldrh	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015d6:	e003      	b.n	80015e0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015d8:	1cbb      	adds	r3, r7, #2
 80015da:	881a      	ldrh	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015e0:	46c0      	nop			; (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b002      	add	sp, #8
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	0002      	movs	r2, r0
 80015f0:	1dbb      	adds	r3, r7, #6
 80015f2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	1dba      	adds	r2, r7, #6
 80015fa:	8812      	ldrh	r2, [r2, #0]
 80015fc:	4013      	ands	r3, r2
 80015fe:	d008      	beq.n	8001612 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001602:	1dba      	adds	r2, r7, #6
 8001604:	8812      	ldrh	r2, [r2, #0]
 8001606:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001608:	1dbb      	adds	r3, r7, #6
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	0018      	movs	r0, r3
 800160e:	f000 f807 	bl	8001620 <HAL_GPIO_EXTI_Callback>
  }
}
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	46bd      	mov	sp, r7
 8001616:	b002      	add	sp, #8
 8001618:	bd80      	pop	{r7, pc}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	40010400 	.word	0x40010400

08001620 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	0002      	movs	r2, r0
 8001628:	1dbb      	adds	r3, r7, #6
 800162a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 800162c:	46c0      	nop			; (mov r8, r8)
 800162e:	46bd      	mov	sp, r7
 8001630:	b002      	add	sp, #8
 8001632:	bd80      	pop	{r7, pc}

08001634 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e301      	b.n	8001c4a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2201      	movs	r2, #1
 800164c:	4013      	ands	r3, r2
 800164e:	d100      	bne.n	8001652 <HAL_RCC_OscConfig+0x1e>
 8001650:	e08d      	b.n	800176e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001652:	4bc3      	ldr	r3, [pc, #780]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	220c      	movs	r2, #12
 8001658:	4013      	ands	r3, r2
 800165a:	2b04      	cmp	r3, #4
 800165c:	d00e      	beq.n	800167c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800165e:	4bc0      	ldr	r3, [pc, #768]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	220c      	movs	r2, #12
 8001664:	4013      	ands	r3, r2
 8001666:	2b08      	cmp	r3, #8
 8001668:	d116      	bne.n	8001698 <HAL_RCC_OscConfig+0x64>
 800166a:	4bbd      	ldr	r3, [pc, #756]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	025b      	lsls	r3, r3, #9
 8001672:	401a      	ands	r2, r3
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	025b      	lsls	r3, r3, #9
 8001678:	429a      	cmp	r2, r3
 800167a:	d10d      	bne.n	8001698 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800167c:	4bb8      	ldr	r3, [pc, #736]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	029b      	lsls	r3, r3, #10
 8001684:	4013      	ands	r3, r2
 8001686:	d100      	bne.n	800168a <HAL_RCC_OscConfig+0x56>
 8001688:	e070      	b.n	800176c <HAL_RCC_OscConfig+0x138>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d000      	beq.n	8001694 <HAL_RCC_OscConfig+0x60>
 8001692:	e06b      	b.n	800176c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e2d8      	b.n	8001c4a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d107      	bne.n	80016b0 <HAL_RCC_OscConfig+0x7c>
 80016a0:	4baf      	ldr	r3, [pc, #700]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4bae      	ldr	r3, [pc, #696]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 80016a6:	2180      	movs	r1, #128	; 0x80
 80016a8:	0249      	lsls	r1, r1, #9
 80016aa:	430a      	orrs	r2, r1
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	e02f      	b.n	8001710 <HAL_RCC_OscConfig+0xdc>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d10c      	bne.n	80016d2 <HAL_RCC_OscConfig+0x9e>
 80016b8:	4ba9      	ldr	r3, [pc, #676]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4ba8      	ldr	r3, [pc, #672]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 80016be:	49a9      	ldr	r1, [pc, #676]	; (8001964 <HAL_RCC_OscConfig+0x330>)
 80016c0:	400a      	ands	r2, r1
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	4ba6      	ldr	r3, [pc, #664]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4ba5      	ldr	r3, [pc, #660]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 80016ca:	49a7      	ldr	r1, [pc, #668]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80016cc:	400a      	ands	r2, r1
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	e01e      	b.n	8001710 <HAL_RCC_OscConfig+0xdc>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b05      	cmp	r3, #5
 80016d8:	d10e      	bne.n	80016f8 <HAL_RCC_OscConfig+0xc4>
 80016da:	4ba1      	ldr	r3, [pc, #644]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	4ba0      	ldr	r3, [pc, #640]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 80016e0:	2180      	movs	r1, #128	; 0x80
 80016e2:	02c9      	lsls	r1, r1, #11
 80016e4:	430a      	orrs	r2, r1
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	4b9d      	ldr	r3, [pc, #628]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b9c      	ldr	r3, [pc, #624]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 80016ee:	2180      	movs	r1, #128	; 0x80
 80016f0:	0249      	lsls	r1, r1, #9
 80016f2:	430a      	orrs	r2, r1
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	e00b      	b.n	8001710 <HAL_RCC_OscConfig+0xdc>
 80016f8:	4b99      	ldr	r3, [pc, #612]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b98      	ldr	r3, [pc, #608]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 80016fe:	4999      	ldr	r1, [pc, #612]	; (8001964 <HAL_RCC_OscConfig+0x330>)
 8001700:	400a      	ands	r2, r1
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	4b96      	ldr	r3, [pc, #600]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b95      	ldr	r3, [pc, #596]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 800170a:	4997      	ldr	r1, [pc, #604]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 800170c:	400a      	ands	r2, r1
 800170e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d014      	beq.n	8001742 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001718:	f7ff fb3c 	bl	8000d94 <HAL_GetTick>
 800171c:	0003      	movs	r3, r0
 800171e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001722:	f7ff fb37 	bl	8000d94 <HAL_GetTick>
 8001726:	0002      	movs	r2, r0
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b64      	cmp	r3, #100	; 0x64
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e28a      	b.n	8001c4a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001734:	4b8a      	ldr	r3, [pc, #552]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	029b      	lsls	r3, r3, #10
 800173c:	4013      	ands	r3, r2
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0xee>
 8001740:	e015      	b.n	800176e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001742:	f7ff fb27 	bl	8000d94 <HAL_GetTick>
 8001746:	0003      	movs	r3, r0
 8001748:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800174c:	f7ff fb22 	bl	8000d94 <HAL_GetTick>
 8001750:	0002      	movs	r2, r0
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b64      	cmp	r3, #100	; 0x64
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e275      	b.n	8001c4a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800175e:	4b80      	ldr	r3, [pc, #512]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	029b      	lsls	r3, r3, #10
 8001766:	4013      	ands	r3, r2
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0x118>
 800176a:	e000      	b.n	800176e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2202      	movs	r2, #2
 8001774:	4013      	ands	r3, r2
 8001776:	d100      	bne.n	800177a <HAL_RCC_OscConfig+0x146>
 8001778:	e069      	b.n	800184e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800177a:	4b79      	ldr	r3, [pc, #484]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	220c      	movs	r2, #12
 8001780:	4013      	ands	r3, r2
 8001782:	d00b      	beq.n	800179c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001784:	4b76      	ldr	r3, [pc, #472]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	220c      	movs	r2, #12
 800178a:	4013      	ands	r3, r2
 800178c:	2b08      	cmp	r3, #8
 800178e:	d11c      	bne.n	80017ca <HAL_RCC_OscConfig+0x196>
 8001790:	4b73      	ldr	r3, [pc, #460]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	025b      	lsls	r3, r3, #9
 8001798:	4013      	ands	r3, r2
 800179a:	d116      	bne.n	80017ca <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800179c:	4b70      	ldr	r3, [pc, #448]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2202      	movs	r2, #2
 80017a2:	4013      	ands	r3, r2
 80017a4:	d005      	beq.n	80017b2 <HAL_RCC_OscConfig+0x17e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d001      	beq.n	80017b2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e24b      	b.n	8001c4a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b2:	4b6b      	ldr	r3, [pc, #428]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	22f8      	movs	r2, #248	; 0xf8
 80017b8:	4393      	bics	r3, r2
 80017ba:	0019      	movs	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	00da      	lsls	r2, r3, #3
 80017c2:	4b67      	ldr	r3, [pc, #412]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 80017c4:	430a      	orrs	r2, r1
 80017c6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017c8:	e041      	b.n	800184e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d024      	beq.n	800181c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017d2:	4b63      	ldr	r3, [pc, #396]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	4b62      	ldr	r3, [pc, #392]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 80017d8:	2101      	movs	r1, #1
 80017da:	430a      	orrs	r2, r1
 80017dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017de:	f7ff fad9 	bl	8000d94 <HAL_GetTick>
 80017e2:	0003      	movs	r3, r0
 80017e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017e8:	f7ff fad4 	bl	8000d94 <HAL_GetTick>
 80017ec:	0002      	movs	r2, r0
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e227      	b.n	8001c4a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fa:	4b59      	ldr	r3, [pc, #356]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2202      	movs	r2, #2
 8001800:	4013      	ands	r3, r2
 8001802:	d0f1      	beq.n	80017e8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001804:	4b56      	ldr	r3, [pc, #344]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	22f8      	movs	r2, #248	; 0xf8
 800180a:	4393      	bics	r3, r2
 800180c:	0019      	movs	r1, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	00da      	lsls	r2, r3, #3
 8001814:	4b52      	ldr	r3, [pc, #328]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 8001816:	430a      	orrs	r2, r1
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	e018      	b.n	800184e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800181c:	4b50      	ldr	r3, [pc, #320]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b4f      	ldr	r3, [pc, #316]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 8001822:	2101      	movs	r1, #1
 8001824:	438a      	bics	r2, r1
 8001826:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff fab4 	bl	8000d94 <HAL_GetTick>
 800182c:	0003      	movs	r3, r0
 800182e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001832:	f7ff faaf 	bl	8000d94 <HAL_GetTick>
 8001836:	0002      	movs	r2, r0
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e202      	b.n	8001c4a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001844:	4b46      	ldr	r3, [pc, #280]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2202      	movs	r2, #2
 800184a:	4013      	ands	r3, r2
 800184c:	d1f1      	bne.n	8001832 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2208      	movs	r2, #8
 8001854:	4013      	ands	r3, r2
 8001856:	d036      	beq.n	80018c6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d019      	beq.n	8001894 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001860:	4b3f      	ldr	r3, [pc, #252]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 8001862:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001864:	4b3e      	ldr	r3, [pc, #248]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 8001866:	2101      	movs	r1, #1
 8001868:	430a      	orrs	r2, r1
 800186a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800186c:	f7ff fa92 	bl	8000d94 <HAL_GetTick>
 8001870:	0003      	movs	r3, r0
 8001872:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001876:	f7ff fa8d 	bl	8000d94 <HAL_GetTick>
 800187a:	0002      	movs	r2, r0
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e1e0      	b.n	8001c4a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001888:	4b35      	ldr	r3, [pc, #212]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	2202      	movs	r2, #2
 800188e:	4013      	ands	r3, r2
 8001890:	d0f1      	beq.n	8001876 <HAL_RCC_OscConfig+0x242>
 8001892:	e018      	b.n	80018c6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001894:	4b32      	ldr	r3, [pc, #200]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 8001896:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001898:	4b31      	ldr	r3, [pc, #196]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 800189a:	2101      	movs	r1, #1
 800189c:	438a      	bics	r2, r1
 800189e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a0:	f7ff fa78 	bl	8000d94 <HAL_GetTick>
 80018a4:	0003      	movs	r3, r0
 80018a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018aa:	f7ff fa73 	bl	8000d94 <HAL_GetTick>
 80018ae:	0002      	movs	r2, r0
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e1c6      	b.n	8001c4a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018bc:	4b28      	ldr	r3, [pc, #160]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	2202      	movs	r2, #2
 80018c2:	4013      	ands	r3, r2
 80018c4:	d1f1      	bne.n	80018aa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2204      	movs	r2, #4
 80018cc:	4013      	ands	r3, r2
 80018ce:	d100      	bne.n	80018d2 <HAL_RCC_OscConfig+0x29e>
 80018d0:	e0b4      	b.n	8001a3c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018d2:	201f      	movs	r0, #31
 80018d4:	183b      	adds	r3, r7, r0
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018da:	4b21      	ldr	r3, [pc, #132]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 80018dc:	69da      	ldr	r2, [r3, #28]
 80018de:	2380      	movs	r3, #128	; 0x80
 80018e0:	055b      	lsls	r3, r3, #21
 80018e2:	4013      	ands	r3, r2
 80018e4:	d110      	bne.n	8001908 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 80018e8:	69da      	ldr	r2, [r3, #28]
 80018ea:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 80018ec:	2180      	movs	r1, #128	; 0x80
 80018ee:	0549      	lsls	r1, r1, #21
 80018f0:	430a      	orrs	r2, r1
 80018f2:	61da      	str	r2, [r3, #28]
 80018f4:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 80018f6:	69da      	ldr	r2, [r3, #28]
 80018f8:	2380      	movs	r3, #128	; 0x80
 80018fa:	055b      	lsls	r3, r3, #21
 80018fc:	4013      	ands	r3, r2
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001902:	183b      	adds	r3, r7, r0
 8001904:	2201      	movs	r2, #1
 8001906:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001908:	4b18      	ldr	r3, [pc, #96]	; (800196c <HAL_RCC_OscConfig+0x338>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4013      	ands	r3, r2
 8001912:	d11a      	bne.n	800194a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001914:	4b15      	ldr	r3, [pc, #84]	; (800196c <HAL_RCC_OscConfig+0x338>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b14      	ldr	r3, [pc, #80]	; (800196c <HAL_RCC_OscConfig+0x338>)
 800191a:	2180      	movs	r1, #128	; 0x80
 800191c:	0049      	lsls	r1, r1, #1
 800191e:	430a      	orrs	r2, r1
 8001920:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001922:	f7ff fa37 	bl	8000d94 <HAL_GetTick>
 8001926:	0003      	movs	r3, r0
 8001928:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800192c:	f7ff fa32 	bl	8000d94 <HAL_GetTick>
 8001930:	0002      	movs	r2, r0
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b64      	cmp	r3, #100	; 0x64
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e185      	b.n	8001c4a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193e:	4b0b      	ldr	r3, [pc, #44]	; (800196c <HAL_RCC_OscConfig+0x338>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	2380      	movs	r3, #128	; 0x80
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4013      	ands	r3, r2
 8001948:	d0f0      	beq.n	800192c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d10e      	bne.n	8001970 <HAL_RCC_OscConfig+0x33c>
 8001952:	4b03      	ldr	r3, [pc, #12]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 8001954:	6a1a      	ldr	r2, [r3, #32]
 8001956:	4b02      	ldr	r3, [pc, #8]	; (8001960 <HAL_RCC_OscConfig+0x32c>)
 8001958:	2101      	movs	r1, #1
 800195a:	430a      	orrs	r2, r1
 800195c:	621a      	str	r2, [r3, #32]
 800195e:	e035      	b.n	80019cc <HAL_RCC_OscConfig+0x398>
 8001960:	40021000 	.word	0x40021000
 8001964:	fffeffff 	.word	0xfffeffff
 8001968:	fffbffff 	.word	0xfffbffff
 800196c:	40007000 	.word	0x40007000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10c      	bne.n	8001992 <HAL_RCC_OscConfig+0x35e>
 8001978:	4bb6      	ldr	r3, [pc, #728]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 800197a:	6a1a      	ldr	r2, [r3, #32]
 800197c:	4bb5      	ldr	r3, [pc, #724]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 800197e:	2101      	movs	r1, #1
 8001980:	438a      	bics	r2, r1
 8001982:	621a      	str	r2, [r3, #32]
 8001984:	4bb3      	ldr	r3, [pc, #716]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001986:	6a1a      	ldr	r2, [r3, #32]
 8001988:	4bb2      	ldr	r3, [pc, #712]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 800198a:	2104      	movs	r1, #4
 800198c:	438a      	bics	r2, r1
 800198e:	621a      	str	r2, [r3, #32]
 8001990:	e01c      	b.n	80019cc <HAL_RCC_OscConfig+0x398>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	2b05      	cmp	r3, #5
 8001998:	d10c      	bne.n	80019b4 <HAL_RCC_OscConfig+0x380>
 800199a:	4bae      	ldr	r3, [pc, #696]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 800199c:	6a1a      	ldr	r2, [r3, #32]
 800199e:	4bad      	ldr	r3, [pc, #692]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 80019a0:	2104      	movs	r1, #4
 80019a2:	430a      	orrs	r2, r1
 80019a4:	621a      	str	r2, [r3, #32]
 80019a6:	4bab      	ldr	r3, [pc, #684]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 80019a8:	6a1a      	ldr	r2, [r3, #32]
 80019aa:	4baa      	ldr	r3, [pc, #680]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 80019ac:	2101      	movs	r1, #1
 80019ae:	430a      	orrs	r2, r1
 80019b0:	621a      	str	r2, [r3, #32]
 80019b2:	e00b      	b.n	80019cc <HAL_RCC_OscConfig+0x398>
 80019b4:	4ba7      	ldr	r3, [pc, #668]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 80019b6:	6a1a      	ldr	r2, [r3, #32]
 80019b8:	4ba6      	ldr	r3, [pc, #664]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 80019ba:	2101      	movs	r1, #1
 80019bc:	438a      	bics	r2, r1
 80019be:	621a      	str	r2, [r3, #32]
 80019c0:	4ba4      	ldr	r3, [pc, #656]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 80019c2:	6a1a      	ldr	r2, [r3, #32]
 80019c4:	4ba3      	ldr	r3, [pc, #652]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 80019c6:	2104      	movs	r1, #4
 80019c8:	438a      	bics	r2, r1
 80019ca:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d014      	beq.n	80019fe <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d4:	f7ff f9de 	bl	8000d94 <HAL_GetTick>
 80019d8:	0003      	movs	r3, r0
 80019da:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019dc:	e009      	b.n	80019f2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019de:	f7ff f9d9 	bl	8000d94 <HAL_GetTick>
 80019e2:	0002      	movs	r2, r0
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	4a9b      	ldr	r2, [pc, #620]	; (8001c58 <HAL_RCC_OscConfig+0x624>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e12b      	b.n	8001c4a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f2:	4b98      	ldr	r3, [pc, #608]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	2202      	movs	r2, #2
 80019f8:	4013      	ands	r3, r2
 80019fa:	d0f0      	beq.n	80019de <HAL_RCC_OscConfig+0x3aa>
 80019fc:	e013      	b.n	8001a26 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fe:	f7ff f9c9 	bl	8000d94 <HAL_GetTick>
 8001a02:	0003      	movs	r3, r0
 8001a04:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a06:	e009      	b.n	8001a1c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a08:	f7ff f9c4 	bl	8000d94 <HAL_GetTick>
 8001a0c:	0002      	movs	r2, r0
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	4a91      	ldr	r2, [pc, #580]	; (8001c58 <HAL_RCC_OscConfig+0x624>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e116      	b.n	8001c4a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a1c:	4b8d      	ldr	r3, [pc, #564]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	2202      	movs	r2, #2
 8001a22:	4013      	ands	r3, r2
 8001a24:	d1f0      	bne.n	8001a08 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a26:	231f      	movs	r3, #31
 8001a28:	18fb      	adds	r3, r7, r3
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d105      	bne.n	8001a3c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a30:	4b88      	ldr	r3, [pc, #544]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001a32:	69da      	ldr	r2, [r3, #28]
 8001a34:	4b87      	ldr	r3, [pc, #540]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001a36:	4989      	ldr	r1, [pc, #548]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001a38:	400a      	ands	r2, r1
 8001a3a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2210      	movs	r2, #16
 8001a42:	4013      	ands	r3, r2
 8001a44:	d063      	beq.n	8001b0e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d12a      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a4e:	4b81      	ldr	r3, [pc, #516]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a52:	4b80      	ldr	r3, [pc, #512]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001a54:	2104      	movs	r1, #4
 8001a56:	430a      	orrs	r2, r1
 8001a58:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001a5a:	4b7e      	ldr	r3, [pc, #504]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001a5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a5e:	4b7d      	ldr	r3, [pc, #500]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001a60:	2101      	movs	r1, #1
 8001a62:	430a      	orrs	r2, r1
 8001a64:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a66:	f7ff f995 	bl	8000d94 <HAL_GetTick>
 8001a6a:	0003      	movs	r3, r0
 8001a6c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a70:	f7ff f990 	bl	8000d94 <HAL_GetTick>
 8001a74:	0002      	movs	r2, r0
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e0e3      	b.n	8001c4a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a82:	4b74      	ldr	r3, [pc, #464]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a86:	2202      	movs	r2, #2
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d0f1      	beq.n	8001a70 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a8c:	4b71      	ldr	r3, [pc, #452]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a90:	22f8      	movs	r2, #248	; 0xf8
 8001a92:	4393      	bics	r3, r2
 8001a94:	0019      	movs	r1, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	00da      	lsls	r2, r3, #3
 8001a9c:	4b6d      	ldr	r3, [pc, #436]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	635a      	str	r2, [r3, #52]	; 0x34
 8001aa2:	e034      	b.n	8001b0e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	3305      	adds	r3, #5
 8001aaa:	d111      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001aac:	4b69      	ldr	r3, [pc, #420]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001aae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ab0:	4b68      	ldr	r3, [pc, #416]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001ab2:	2104      	movs	r1, #4
 8001ab4:	438a      	bics	r2, r1
 8001ab6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ab8:	4b66      	ldr	r3, [pc, #408]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001abc:	22f8      	movs	r2, #248	; 0xf8
 8001abe:	4393      	bics	r3, r2
 8001ac0:	0019      	movs	r1, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	00da      	lsls	r2, r3, #3
 8001ac8:	4b62      	ldr	r3, [pc, #392]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001aca:	430a      	orrs	r2, r1
 8001acc:	635a      	str	r2, [r3, #52]	; 0x34
 8001ace:	e01e      	b.n	8001b0e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ad0:	4b60      	ldr	r3, [pc, #384]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001ad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ad4:	4b5f      	ldr	r3, [pc, #380]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001ad6:	2104      	movs	r1, #4
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001adc:	4b5d      	ldr	r3, [pc, #372]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001ade:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ae0:	4b5c      	ldr	r3, [pc, #368]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	438a      	bics	r2, r1
 8001ae6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae8:	f7ff f954 	bl	8000d94 <HAL_GetTick>
 8001aec:	0003      	movs	r3, r0
 8001aee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001af2:	f7ff f94f 	bl	8000d94 <HAL_GetTick>
 8001af6:	0002      	movs	r2, r0
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e0a2      	b.n	8001c4a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b04:	4b53      	ldr	r3, [pc, #332]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b08:	2202      	movs	r2, #2
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d1f1      	bne.n	8001af2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d100      	bne.n	8001b18 <HAL_RCC_OscConfig+0x4e4>
 8001b16:	e097      	b.n	8001c48 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b18:	4b4e      	ldr	r3, [pc, #312]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	220c      	movs	r2, #12
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d100      	bne.n	8001b26 <HAL_RCC_OscConfig+0x4f2>
 8001b24:	e06b      	b.n	8001bfe <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d14c      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2e:	4b49      	ldr	r3, [pc, #292]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	4b48      	ldr	r3, [pc, #288]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001b34:	494a      	ldr	r1, [pc, #296]	; (8001c60 <HAL_RCC_OscConfig+0x62c>)
 8001b36:	400a      	ands	r2, r1
 8001b38:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3a:	f7ff f92b 	bl	8000d94 <HAL_GetTick>
 8001b3e:	0003      	movs	r3, r0
 8001b40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b44:	f7ff f926 	bl	8000d94 <HAL_GetTick>
 8001b48:	0002      	movs	r2, r0
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e079      	b.n	8001c4a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b56:	4b3f      	ldr	r3, [pc, #252]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	2380      	movs	r3, #128	; 0x80
 8001b5c:	049b      	lsls	r3, r3, #18
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d1f0      	bne.n	8001b44 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b62:	4b3c      	ldr	r3, [pc, #240]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b66:	220f      	movs	r2, #15
 8001b68:	4393      	bics	r3, r2
 8001b6a:	0019      	movs	r1, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b70:	4b38      	ldr	r3, [pc, #224]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001b72:	430a      	orrs	r2, r1
 8001b74:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b76:	4b37      	ldr	r3, [pc, #220]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	4a3a      	ldr	r2, [pc, #232]	; (8001c64 <HAL_RCC_OscConfig+0x630>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	0019      	movs	r1, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	4b32      	ldr	r3, [pc, #200]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b90:	4b30      	ldr	r3, [pc, #192]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4b2f      	ldr	r3, [pc, #188]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001b96:	2180      	movs	r1, #128	; 0x80
 8001b98:	0449      	lsls	r1, r1, #17
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9e:	f7ff f8f9 	bl	8000d94 <HAL_GetTick>
 8001ba2:	0003      	movs	r3, r0
 8001ba4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba8:	f7ff f8f4 	bl	8000d94 <HAL_GetTick>
 8001bac:	0002      	movs	r2, r0
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e047      	b.n	8001c4a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bba:	4b26      	ldr	r3, [pc, #152]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	049b      	lsls	r3, r3, #18
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x574>
 8001bc6:	e03f      	b.n	8001c48 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc8:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001bce:	4924      	ldr	r1, [pc, #144]	; (8001c60 <HAL_RCC_OscConfig+0x62c>)
 8001bd0:	400a      	ands	r2, r1
 8001bd2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd4:	f7ff f8de 	bl	8000d94 <HAL_GetTick>
 8001bd8:	0003      	movs	r3, r0
 8001bda:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bde:	f7ff f8d9 	bl	8000d94 <HAL_GetTick>
 8001be2:	0002      	movs	r2, r0
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e02c      	b.n	8001c4a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf0:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	2380      	movs	r3, #128	; 0x80
 8001bf6:	049b      	lsls	r3, r3, #18
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d1f0      	bne.n	8001bde <HAL_RCC_OscConfig+0x5aa>
 8001bfc:	e024      	b.n	8001c48 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d101      	bne.n	8001c0a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e01f      	b.n	8001c4a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001c10:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <HAL_RCC_OscConfig+0x620>)
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	2380      	movs	r3, #128	; 0x80
 8001c1a:	025b      	lsls	r3, r3, #9
 8001c1c:	401a      	ands	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d10e      	bne.n	8001c44 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	220f      	movs	r2, #15
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d107      	bne.n	8001c44 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	23f0      	movs	r3, #240	; 0xf0
 8001c38:	039b      	lsls	r3, r3, #14
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d001      	beq.n	8001c48 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	b008      	add	sp, #32
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	40021000 	.word	0x40021000
 8001c58:	00001388 	.word	0x00001388
 8001c5c:	efffffff 	.word	0xefffffff
 8001c60:	feffffff 	.word	0xfeffffff
 8001c64:	ffc2ffff 	.word	0xffc2ffff

08001c68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e0b3      	b.n	8001de4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c7c:	4b5b      	ldr	r3, [pc, #364]	; (8001dec <HAL_RCC_ClockConfig+0x184>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2201      	movs	r2, #1
 8001c82:	4013      	ands	r3, r2
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d911      	bls.n	8001cae <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8a:	4b58      	ldr	r3, [pc, #352]	; (8001dec <HAL_RCC_ClockConfig+0x184>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	4393      	bics	r3, r2
 8001c92:	0019      	movs	r1, r3
 8001c94:	4b55      	ldr	r3, [pc, #340]	; (8001dec <HAL_RCC_ClockConfig+0x184>)
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9c:	4b53      	ldr	r3, [pc, #332]	; (8001dec <HAL_RCC_ClockConfig+0x184>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d001      	beq.n	8001cae <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e09a      	b.n	8001de4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	d015      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2204      	movs	r2, #4
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d006      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001cc2:	4b4b      	ldr	r3, [pc, #300]	; (8001df0 <HAL_RCC_ClockConfig+0x188>)
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	4b4a      	ldr	r3, [pc, #296]	; (8001df0 <HAL_RCC_ClockConfig+0x188>)
 8001cc8:	21e0      	movs	r1, #224	; 0xe0
 8001cca:	00c9      	lsls	r1, r1, #3
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd0:	4b47      	ldr	r3, [pc, #284]	; (8001df0 <HAL_RCC_ClockConfig+0x188>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	22f0      	movs	r2, #240	; 0xf0
 8001cd6:	4393      	bics	r3, r2
 8001cd8:	0019      	movs	r1, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	4b44      	ldr	r3, [pc, #272]	; (8001df0 <HAL_RCC_ClockConfig+0x188>)
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	4013      	ands	r3, r2
 8001cec:	d040      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d107      	bne.n	8001d06 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf6:	4b3e      	ldr	r3, [pc, #248]	; (8001df0 <HAL_RCC_ClockConfig+0x188>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	2380      	movs	r3, #128	; 0x80
 8001cfc:	029b      	lsls	r3, r3, #10
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d114      	bne.n	8001d2c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e06e      	b.n	8001de4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d107      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d0e:	4b38      	ldr	r3, [pc, #224]	; (8001df0 <HAL_RCC_ClockConfig+0x188>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	2380      	movs	r3, #128	; 0x80
 8001d14:	049b      	lsls	r3, r3, #18
 8001d16:	4013      	ands	r3, r2
 8001d18:	d108      	bne.n	8001d2c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e062      	b.n	8001de4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1e:	4b34      	ldr	r3, [pc, #208]	; (8001df0 <HAL_RCC_ClockConfig+0x188>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2202      	movs	r2, #2
 8001d24:	4013      	ands	r3, r2
 8001d26:	d101      	bne.n	8001d2c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e05b      	b.n	8001de4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d2c:	4b30      	ldr	r3, [pc, #192]	; (8001df0 <HAL_RCC_ClockConfig+0x188>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2203      	movs	r2, #3
 8001d32:	4393      	bics	r3, r2
 8001d34:	0019      	movs	r1, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	4b2d      	ldr	r3, [pc, #180]	; (8001df0 <HAL_RCC_ClockConfig+0x188>)
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d40:	f7ff f828 	bl	8000d94 <HAL_GetTick>
 8001d44:	0003      	movs	r3, r0
 8001d46:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d48:	e009      	b.n	8001d5e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d4a:	f7ff f823 	bl	8000d94 <HAL_GetTick>
 8001d4e:	0002      	movs	r2, r0
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	4a27      	ldr	r2, [pc, #156]	; (8001df4 <HAL_RCC_ClockConfig+0x18c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e042      	b.n	8001de4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5e:	4b24      	ldr	r3, [pc, #144]	; (8001df0 <HAL_RCC_ClockConfig+0x188>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	220c      	movs	r2, #12
 8001d64:	401a      	ands	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d1ec      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d70:	4b1e      	ldr	r3, [pc, #120]	; (8001dec <HAL_RCC_ClockConfig+0x184>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2201      	movs	r2, #1
 8001d76:	4013      	ands	r3, r2
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d211      	bcs.n	8001da2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7e:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <HAL_RCC_ClockConfig+0x184>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2201      	movs	r2, #1
 8001d84:	4393      	bics	r3, r2
 8001d86:	0019      	movs	r1, r3
 8001d88:	4b18      	ldr	r3, [pc, #96]	; (8001dec <HAL_RCC_ClockConfig+0x184>)
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d90:	4b16      	ldr	r3, [pc, #88]	; (8001dec <HAL_RCC_ClockConfig+0x184>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2201      	movs	r2, #1
 8001d96:	4013      	ands	r3, r2
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d001      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e020      	b.n	8001de4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2204      	movs	r2, #4
 8001da8:	4013      	ands	r3, r2
 8001daa:	d009      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001dac:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <HAL_RCC_ClockConfig+0x188>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	4a11      	ldr	r2, [pc, #68]	; (8001df8 <HAL_RCC_ClockConfig+0x190>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	0019      	movs	r1, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <HAL_RCC_ClockConfig+0x188>)
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001dc0:	f000 f820 	bl	8001e04 <HAL_RCC_GetSysClockFreq>
 8001dc4:	0001      	movs	r1, r0
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <HAL_RCC_ClockConfig+0x188>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	091b      	lsrs	r3, r3, #4
 8001dcc:	220f      	movs	r2, #15
 8001dce:	4013      	ands	r3, r2
 8001dd0:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <HAL_RCC_ClockConfig+0x194>)
 8001dd2:	5cd3      	ldrb	r3, [r2, r3]
 8001dd4:	000a      	movs	r2, r1
 8001dd6:	40da      	lsrs	r2, r3
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <HAL_RCC_ClockConfig+0x198>)
 8001dda:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ddc:	2000      	movs	r0, #0
 8001dde:	f7fe ff93 	bl	8000d08 <HAL_InitTick>
  
  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	0018      	movs	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	b004      	add	sp, #16
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40022000 	.word	0x40022000
 8001df0:	40021000 	.word	0x40021000
 8001df4:	00001388 	.word	0x00001388
 8001df8:	fffff8ff 	.word	0xfffff8ff
 8001dfc:	08004080 	.word	0x08004080
 8001e00:	20000600 	.word	0x20000600

08001e04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e04:	b590      	push	{r4, r7, lr}
 8001e06:	b08f      	sub	sp, #60	; 0x3c
 8001e08:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001e0a:	2314      	movs	r3, #20
 8001e0c:	18fb      	adds	r3, r7, r3
 8001e0e:	4a2b      	ldr	r2, [pc, #172]	; (8001ebc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e10:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001e12:	c313      	stmia	r3!, {r0, r1, r4}
 8001e14:	6812      	ldr	r2, [r2, #0]
 8001e16:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001e18:	1d3b      	adds	r3, r7, #4
 8001e1a:	4a29      	ldr	r2, [pc, #164]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e1c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001e1e:	c313      	stmia	r3!, {r0, r1, r4}
 8001e20:	6812      	ldr	r2, [r2, #0]
 8001e22:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e28:	2300      	movs	r3, #0
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	637b      	str	r3, [r7, #52]	; 0x34
 8001e30:	2300      	movs	r3, #0
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001e38:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e40:	220c      	movs	r2, #12
 8001e42:	4013      	ands	r3, r2
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d002      	beq.n	8001e4e <HAL_RCC_GetSysClockFreq+0x4a>
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d003      	beq.n	8001e54 <HAL_RCC_GetSysClockFreq+0x50>
 8001e4c:	e02d      	b.n	8001eaa <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e4e:	4b1e      	ldr	r3, [pc, #120]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e50:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e52:	e02d      	b.n	8001eb0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e56:	0c9b      	lsrs	r3, r3, #18
 8001e58:	220f      	movs	r2, #15
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2214      	movs	r2, #20
 8001e5e:	18ba      	adds	r2, r7, r2
 8001e60:	5cd3      	ldrb	r3, [r2, r3]
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001e64:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e68:	220f      	movs	r2, #15
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	1d3a      	adds	r2, r7, #4
 8001e6e:	5cd3      	ldrb	r3, [r2, r3]
 8001e70:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001e72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	025b      	lsls	r3, r3, #9
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d009      	beq.n	8001e90 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e7e:	4812      	ldr	r0, [pc, #72]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e80:	f7fe f94c 	bl	800011c <__udivsi3>
 8001e84:	0003      	movs	r3, r0
 8001e86:	001a      	movs	r2, r3
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	4353      	muls	r3, r2
 8001e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e8e:	e009      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001e90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e92:	000a      	movs	r2, r1
 8001e94:	0152      	lsls	r2, r2, #5
 8001e96:	1a52      	subs	r2, r2, r1
 8001e98:	0193      	lsls	r3, r2, #6
 8001e9a:	1a9b      	subs	r3, r3, r2
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	185b      	adds	r3, r3, r1
 8001ea0:	021b      	lsls	r3, r3, #8
 8001ea2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ea8:	e002      	b.n	8001eb0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001eaa:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001eac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001eae:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	b00f      	add	sp, #60	; 0x3c
 8001eb8:	bd90      	pop	{r4, r7, pc}
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	08004060 	.word	0x08004060
 8001ec0:	08004070 	.word	0x08004070
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	007a1200 	.word	0x007a1200

08001ecc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ed0:	4b02      	ldr	r3, [pc, #8]	; (8001edc <HAL_RCC_GetHCLKFreq+0x10>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
}
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	20000600 	.word	0x20000600

08001ee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001ee4:	f7ff fff2 	bl	8001ecc <HAL_RCC_GetHCLKFreq>
 8001ee8:	0001      	movs	r1, r0
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	0a1b      	lsrs	r3, r3, #8
 8001ef0:	2207      	movs	r2, #7
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ef6:	5cd3      	ldrb	r3, [r2, r3]
 8001ef8:	40d9      	lsrs	r1, r3
 8001efa:	000b      	movs	r3, r1
}    
 8001efc:	0018      	movs	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	40021000 	.word	0x40021000
 8001f08:	08004090 	.word	0x08004090

08001f0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e042      	b.n	8001fa4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	223d      	movs	r2, #61	; 0x3d
 8001f22:	5c9b      	ldrb	r3, [r3, r2]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d107      	bne.n	8001f3a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	223c      	movs	r2, #60	; 0x3c
 8001f2e:	2100      	movs	r1, #0
 8001f30:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	0018      	movs	r0, r3
 8001f36:	f7fe fd63 	bl	8000a00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	223d      	movs	r2, #61	; 0x3d
 8001f3e:	2102      	movs	r1, #2
 8001f40:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	3304      	adds	r3, #4
 8001f4a:	0019      	movs	r1, r3
 8001f4c:	0010      	movs	r0, r2
 8001f4e:	f000 fc3f 	bl	80027d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2246      	movs	r2, #70	; 0x46
 8001f56:	2101      	movs	r1, #1
 8001f58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	223e      	movs	r2, #62	; 0x3e
 8001f5e:	2101      	movs	r1, #1
 8001f60:	5499      	strb	r1, [r3, r2]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	223f      	movs	r2, #63	; 0x3f
 8001f66:	2101      	movs	r1, #1
 8001f68:	5499      	strb	r1, [r3, r2]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2240      	movs	r2, #64	; 0x40
 8001f6e:	2101      	movs	r1, #1
 8001f70:	5499      	strb	r1, [r3, r2]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2241      	movs	r2, #65	; 0x41
 8001f76:	2101      	movs	r1, #1
 8001f78:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2242      	movs	r2, #66	; 0x42
 8001f7e:	2101      	movs	r1, #1
 8001f80:	5499      	strb	r1, [r3, r2]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2243      	movs	r2, #67	; 0x43
 8001f86:	2101      	movs	r1, #1
 8001f88:	5499      	strb	r1, [r3, r2]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2244      	movs	r2, #68	; 0x44
 8001f8e:	2101      	movs	r1, #1
 8001f90:	5499      	strb	r1, [r3, r2]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2245      	movs	r2, #69	; 0x45
 8001f96:	2101      	movs	r1, #1
 8001f98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	223d      	movs	r2, #61	; 0x3d
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b002      	add	sp, #8
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e042      	b.n	8002044 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	223d      	movs	r2, #61	; 0x3d
 8001fc2:	5c9b      	ldrb	r3, [r3, r2]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d107      	bne.n	8001fda <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	223c      	movs	r2, #60	; 0x3c
 8001fce:	2100      	movs	r1, #0
 8001fd0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	f000 f839 	bl	800204c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	223d      	movs	r2, #61	; 0x3d
 8001fde:	2102      	movs	r1, #2
 8001fe0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	0019      	movs	r1, r3
 8001fec:	0010      	movs	r0, r2
 8001fee:	f000 fbef 	bl	80027d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2246      	movs	r2, #70	; 0x46
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	223e      	movs	r2, #62	; 0x3e
 8001ffe:	2101      	movs	r1, #1
 8002000:	5499      	strb	r1, [r3, r2]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	223f      	movs	r2, #63	; 0x3f
 8002006:	2101      	movs	r1, #1
 8002008:	5499      	strb	r1, [r3, r2]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2240      	movs	r2, #64	; 0x40
 800200e:	2101      	movs	r1, #1
 8002010:	5499      	strb	r1, [r3, r2]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2241      	movs	r2, #65	; 0x41
 8002016:	2101      	movs	r1, #1
 8002018:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2242      	movs	r2, #66	; 0x42
 800201e:	2101      	movs	r1, #1
 8002020:	5499      	strb	r1, [r3, r2]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2243      	movs	r2, #67	; 0x43
 8002026:	2101      	movs	r1, #1
 8002028:	5499      	strb	r1, [r3, r2]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2244      	movs	r2, #68	; 0x44
 800202e:	2101      	movs	r1, #1
 8002030:	5499      	strb	r1, [r3, r2]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2245      	movs	r2, #69	; 0x45
 8002036:	2101      	movs	r1, #1
 8002038:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	223d      	movs	r2, #61	; 0x3d
 800203e:	2101      	movs	r1, #1
 8002040:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	0018      	movs	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	b002      	add	sp, #8
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002054:	46c0      	nop			; (mov r8, r8)
 8002056:	46bd      	mov	sp, r7
 8002058:	b002      	add	sp, #8
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d108      	bne.n	800207e <HAL_TIM_OC_Start+0x22>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	223e      	movs	r2, #62	; 0x3e
 8002070:	5c9b      	ldrb	r3, [r3, r2]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	3b01      	subs	r3, #1
 8002076:	1e5a      	subs	r2, r3, #1
 8002078:	4193      	sbcs	r3, r2
 800207a:	b2db      	uxtb	r3, r3
 800207c:	e01f      	b.n	80020be <HAL_TIM_OC_Start+0x62>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	2b04      	cmp	r3, #4
 8002082:	d108      	bne.n	8002096 <HAL_TIM_OC_Start+0x3a>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	223f      	movs	r2, #63	; 0x3f
 8002088:	5c9b      	ldrb	r3, [r3, r2]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	3b01      	subs	r3, #1
 800208e:	1e5a      	subs	r2, r3, #1
 8002090:	4193      	sbcs	r3, r2
 8002092:	b2db      	uxtb	r3, r3
 8002094:	e013      	b.n	80020be <HAL_TIM_OC_Start+0x62>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b08      	cmp	r3, #8
 800209a:	d108      	bne.n	80020ae <HAL_TIM_OC_Start+0x52>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2240      	movs	r2, #64	; 0x40
 80020a0:	5c9b      	ldrb	r3, [r3, r2]
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	3b01      	subs	r3, #1
 80020a6:	1e5a      	subs	r2, r3, #1
 80020a8:	4193      	sbcs	r3, r2
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	e007      	b.n	80020be <HAL_TIM_OC_Start+0x62>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2241      	movs	r2, #65	; 0x41
 80020b2:	5c9b      	ldrb	r3, [r3, r2]
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	3b01      	subs	r3, #1
 80020b8:	1e5a      	subs	r2, r3, #1
 80020ba:	4193      	sbcs	r3, r2
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <HAL_TIM_OC_Start+0x6a>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e074      	b.n	80021b0 <HAL_TIM_OC_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d104      	bne.n	80020d6 <HAL_TIM_OC_Start+0x7a>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	223e      	movs	r2, #62	; 0x3e
 80020d0:	2102      	movs	r1, #2
 80020d2:	5499      	strb	r1, [r3, r2]
 80020d4:	e013      	b.n	80020fe <HAL_TIM_OC_Start+0xa2>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	2b04      	cmp	r3, #4
 80020da:	d104      	bne.n	80020e6 <HAL_TIM_OC_Start+0x8a>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	223f      	movs	r2, #63	; 0x3f
 80020e0:	2102      	movs	r1, #2
 80020e2:	5499      	strb	r1, [r3, r2]
 80020e4:	e00b      	b.n	80020fe <HAL_TIM_OC_Start+0xa2>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d104      	bne.n	80020f6 <HAL_TIM_OC_Start+0x9a>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2240      	movs	r2, #64	; 0x40
 80020f0:	2102      	movs	r1, #2
 80020f2:	5499      	strb	r1, [r3, r2]
 80020f4:	e003      	b.n	80020fe <HAL_TIM_OC_Start+0xa2>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2241      	movs	r2, #65	; 0x41
 80020fa:	2102      	movs	r1, #2
 80020fc:	5499      	strb	r1, [r3, r2]

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6839      	ldr	r1, [r7, #0]
 8002104:	2201      	movs	r2, #1
 8002106:	0018      	movs	r0, r3
 8002108:	f000 fe78 	bl	8002dfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a29      	ldr	r2, [pc, #164]	; (80021b8 <HAL_TIM_OC_Start+0x15c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d00e      	beq.n	8002134 <HAL_TIM_OC_Start+0xd8>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a28      	ldr	r2, [pc, #160]	; (80021bc <HAL_TIM_OC_Start+0x160>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d009      	beq.n	8002134 <HAL_TIM_OC_Start+0xd8>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a26      	ldr	r2, [pc, #152]	; (80021c0 <HAL_TIM_OC_Start+0x164>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d004      	beq.n	8002134 <HAL_TIM_OC_Start+0xd8>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a25      	ldr	r2, [pc, #148]	; (80021c4 <HAL_TIM_OC_Start+0x168>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d101      	bne.n	8002138 <HAL_TIM_OC_Start+0xdc>
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <HAL_TIM_OC_Start+0xde>
 8002138:	2300      	movs	r3, #0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d008      	beq.n	8002150 <HAL_TIM_OC_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2180      	movs	r1, #128	; 0x80
 800214a:	0209      	lsls	r1, r1, #8
 800214c:	430a      	orrs	r2, r1
 800214e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a18      	ldr	r2, [pc, #96]	; (80021b8 <HAL_TIM_OC_Start+0x15c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d00f      	beq.n	800217a <HAL_TIM_OC_Start+0x11e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	2380      	movs	r3, #128	; 0x80
 8002160:	05db      	lsls	r3, r3, #23
 8002162:	429a      	cmp	r2, r3
 8002164:	d009      	beq.n	800217a <HAL_TIM_OC_Start+0x11e>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a17      	ldr	r2, [pc, #92]	; (80021c8 <HAL_TIM_OC_Start+0x16c>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d004      	beq.n	800217a <HAL_TIM_OC_Start+0x11e>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a11      	ldr	r2, [pc, #68]	; (80021bc <HAL_TIM_OC_Start+0x160>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d111      	bne.n	800219e <HAL_TIM_OC_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2207      	movs	r2, #7
 8002182:	4013      	ands	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2b06      	cmp	r3, #6
 800218a:	d010      	beq.n	80021ae <HAL_TIM_OC_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2101      	movs	r1, #1
 8002198:	430a      	orrs	r2, r1
 800219a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800219c:	e007      	b.n	80021ae <HAL_TIM_OC_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2101      	movs	r1, #1
 80021aa:	430a      	orrs	r2, r1
 80021ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	0018      	movs	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b004      	add	sp, #16
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40012c00 	.word	0x40012c00
 80021bc:	40014000 	.word	0x40014000
 80021c0:	40014400 	.word	0x40014400
 80021c4:	40014800 	.word	0x40014800
 80021c8:	40000400 	.word	0x40000400

080021cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e042      	b.n	8002264 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	223d      	movs	r2, #61	; 0x3d
 80021e2:	5c9b      	ldrb	r3, [r3, r2]
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d107      	bne.n	80021fa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	223c      	movs	r2, #60	; 0x3c
 80021ee:	2100      	movs	r1, #0
 80021f0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	0018      	movs	r0, r3
 80021f6:	f000 f839 	bl	800226c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	223d      	movs	r2, #61	; 0x3d
 80021fe:	2102      	movs	r1, #2
 8002200:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3304      	adds	r3, #4
 800220a:	0019      	movs	r1, r3
 800220c:	0010      	movs	r0, r2
 800220e:	f000 fadf 	bl	80027d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2246      	movs	r2, #70	; 0x46
 8002216:	2101      	movs	r1, #1
 8002218:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	223e      	movs	r2, #62	; 0x3e
 800221e:	2101      	movs	r1, #1
 8002220:	5499      	strb	r1, [r3, r2]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	223f      	movs	r2, #63	; 0x3f
 8002226:	2101      	movs	r1, #1
 8002228:	5499      	strb	r1, [r3, r2]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2240      	movs	r2, #64	; 0x40
 800222e:	2101      	movs	r1, #1
 8002230:	5499      	strb	r1, [r3, r2]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2241      	movs	r2, #65	; 0x41
 8002236:	2101      	movs	r1, #1
 8002238:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2242      	movs	r2, #66	; 0x42
 800223e:	2101      	movs	r1, #1
 8002240:	5499      	strb	r1, [r3, r2]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2243      	movs	r2, #67	; 0x43
 8002246:	2101      	movs	r1, #1
 8002248:	5499      	strb	r1, [r3, r2]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2244      	movs	r2, #68	; 0x44
 800224e:	2101      	movs	r1, #1
 8002250:	5499      	strb	r1, [r3, r2]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2245      	movs	r2, #69	; 0x45
 8002256:	2101      	movs	r1, #1
 8002258:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	223d      	movs	r2, #61	; 0x3d
 800225e:	2101      	movs	r1, #1
 8002260:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	0018      	movs	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	b002      	add	sp, #8
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002274:	46c0      	nop			; (mov r8, r8)
 8002276:	46bd      	mov	sp, r7
 8002278:	b002      	add	sp, #8
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d108      	bne.n	800229e <HAL_TIM_PWM_Start+0x22>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	223e      	movs	r2, #62	; 0x3e
 8002290:	5c9b      	ldrb	r3, [r3, r2]
 8002292:	b2db      	uxtb	r3, r3
 8002294:	3b01      	subs	r3, #1
 8002296:	1e5a      	subs	r2, r3, #1
 8002298:	4193      	sbcs	r3, r2
 800229a:	b2db      	uxtb	r3, r3
 800229c:	e01f      	b.n	80022de <HAL_TIM_PWM_Start+0x62>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	2b04      	cmp	r3, #4
 80022a2:	d108      	bne.n	80022b6 <HAL_TIM_PWM_Start+0x3a>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	223f      	movs	r2, #63	; 0x3f
 80022a8:	5c9b      	ldrb	r3, [r3, r2]
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	3b01      	subs	r3, #1
 80022ae:	1e5a      	subs	r2, r3, #1
 80022b0:	4193      	sbcs	r3, r2
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	e013      	b.n	80022de <HAL_TIM_PWM_Start+0x62>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d108      	bne.n	80022ce <HAL_TIM_PWM_Start+0x52>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2240      	movs	r2, #64	; 0x40
 80022c0:	5c9b      	ldrb	r3, [r3, r2]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	3b01      	subs	r3, #1
 80022c6:	1e5a      	subs	r2, r3, #1
 80022c8:	4193      	sbcs	r3, r2
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	e007      	b.n	80022de <HAL_TIM_PWM_Start+0x62>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2241      	movs	r2, #65	; 0x41
 80022d2:	5c9b      	ldrb	r3, [r3, r2]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	3b01      	subs	r3, #1
 80022d8:	1e5a      	subs	r2, r3, #1
 80022da:	4193      	sbcs	r3, r2
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e074      	b.n	80023d0 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d104      	bne.n	80022f6 <HAL_TIM_PWM_Start+0x7a>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	223e      	movs	r2, #62	; 0x3e
 80022f0:	2102      	movs	r1, #2
 80022f2:	5499      	strb	r1, [r3, r2]
 80022f4:	e013      	b.n	800231e <HAL_TIM_PWM_Start+0xa2>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d104      	bne.n	8002306 <HAL_TIM_PWM_Start+0x8a>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	223f      	movs	r2, #63	; 0x3f
 8002300:	2102      	movs	r1, #2
 8002302:	5499      	strb	r1, [r3, r2]
 8002304:	e00b      	b.n	800231e <HAL_TIM_PWM_Start+0xa2>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	2b08      	cmp	r3, #8
 800230a:	d104      	bne.n	8002316 <HAL_TIM_PWM_Start+0x9a>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2240      	movs	r2, #64	; 0x40
 8002310:	2102      	movs	r1, #2
 8002312:	5499      	strb	r1, [r3, r2]
 8002314:	e003      	b.n	800231e <HAL_TIM_PWM_Start+0xa2>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2241      	movs	r2, #65	; 0x41
 800231a:	2102      	movs	r1, #2
 800231c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6839      	ldr	r1, [r7, #0]
 8002324:	2201      	movs	r2, #1
 8002326:	0018      	movs	r0, r3
 8002328:	f000 fd68 	bl	8002dfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a29      	ldr	r2, [pc, #164]	; (80023d8 <HAL_TIM_PWM_Start+0x15c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d00e      	beq.n	8002354 <HAL_TIM_PWM_Start+0xd8>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a28      	ldr	r2, [pc, #160]	; (80023dc <HAL_TIM_PWM_Start+0x160>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d009      	beq.n	8002354 <HAL_TIM_PWM_Start+0xd8>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a26      	ldr	r2, [pc, #152]	; (80023e0 <HAL_TIM_PWM_Start+0x164>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d004      	beq.n	8002354 <HAL_TIM_PWM_Start+0xd8>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a25      	ldr	r2, [pc, #148]	; (80023e4 <HAL_TIM_PWM_Start+0x168>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d101      	bne.n	8002358 <HAL_TIM_PWM_Start+0xdc>
 8002354:	2301      	movs	r3, #1
 8002356:	e000      	b.n	800235a <HAL_TIM_PWM_Start+0xde>
 8002358:	2300      	movs	r3, #0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d008      	beq.n	8002370 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2180      	movs	r1, #128	; 0x80
 800236a:	0209      	lsls	r1, r1, #8
 800236c:	430a      	orrs	r2, r1
 800236e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a18      	ldr	r2, [pc, #96]	; (80023d8 <HAL_TIM_PWM_Start+0x15c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d00f      	beq.n	800239a <HAL_TIM_PWM_Start+0x11e>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	2380      	movs	r3, #128	; 0x80
 8002380:	05db      	lsls	r3, r3, #23
 8002382:	429a      	cmp	r2, r3
 8002384:	d009      	beq.n	800239a <HAL_TIM_PWM_Start+0x11e>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a17      	ldr	r2, [pc, #92]	; (80023e8 <HAL_TIM_PWM_Start+0x16c>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d004      	beq.n	800239a <HAL_TIM_PWM_Start+0x11e>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a11      	ldr	r2, [pc, #68]	; (80023dc <HAL_TIM_PWM_Start+0x160>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d111      	bne.n	80023be <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2207      	movs	r2, #7
 80023a2:	4013      	ands	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b06      	cmp	r3, #6
 80023aa:	d010      	beq.n	80023ce <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2101      	movs	r1, #1
 80023b8:	430a      	orrs	r2, r1
 80023ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023bc:	e007      	b.n	80023ce <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2101      	movs	r1, #1
 80023ca:	430a      	orrs	r2, r1
 80023cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	0018      	movs	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	b004      	add	sp, #16
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40012c00 	.word	0x40012c00
 80023dc:	40014000 	.word	0x40014000
 80023e0:	40014400 	.word	0x40014400
 80023e4:	40014800 	.word	0x40014800
 80023e8:	40000400 	.word	0x40000400

080023ec <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023f8:	2317      	movs	r3, #23
 80023fa:	18fb      	adds	r3, r7, r3
 80023fc:	2200      	movs	r2, #0
 80023fe:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	223c      	movs	r2, #60	; 0x3c
 8002404:	5c9b      	ldrb	r3, [r3, r2]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d101      	bne.n	800240e <HAL_TIM_OC_ConfigChannel+0x22>
 800240a:	2302      	movs	r3, #2
 800240c:	e042      	b.n	8002494 <HAL_TIM_OC_ConfigChannel+0xa8>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	223c      	movs	r2, #60	; 0x3c
 8002412:	2101      	movs	r1, #1
 8002414:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b0c      	cmp	r3, #12
 800241a:	d027      	beq.n	800246c <HAL_TIM_OC_ConfigChannel+0x80>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b0c      	cmp	r3, #12
 8002420:	d82c      	bhi.n	800247c <HAL_TIM_OC_ConfigChannel+0x90>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b08      	cmp	r3, #8
 8002426:	d019      	beq.n	800245c <HAL_TIM_OC_ConfigChannel+0x70>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b08      	cmp	r3, #8
 800242c:	d826      	bhi.n	800247c <HAL_TIM_OC_ConfigChannel+0x90>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <HAL_TIM_OC_ConfigChannel+0x50>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b04      	cmp	r3, #4
 8002438:	d008      	beq.n	800244c <HAL_TIM_OC_ConfigChannel+0x60>
 800243a:	e01f      	b.n	800247c <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68ba      	ldr	r2, [r7, #8]
 8002442:	0011      	movs	r1, r2
 8002444:	0018      	movs	r0, r3
 8002446:	f000 fa43 	bl	80028d0 <TIM_OC1_SetConfig>
      break;
 800244a:	e01c      	b.n	8002486 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	0011      	movs	r1, r2
 8002454:	0018      	movs	r0, r3
 8002456:	f000 fac3 	bl	80029e0 <TIM_OC2_SetConfig>
      break;
 800245a:	e014      	b.n	8002486 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	0011      	movs	r1, r2
 8002464:	0018      	movs	r0, r3
 8002466:	f000 fb3f 	bl	8002ae8 <TIM_OC3_SetConfig>
      break;
 800246a:	e00c      	b.n	8002486 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	0011      	movs	r1, r2
 8002474:	0018      	movs	r0, r3
 8002476:	f000 fbbd 	bl	8002bf4 <TIM_OC4_SetConfig>
      break;
 800247a:	e004      	b.n	8002486 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 800247c:	2317      	movs	r3, #23
 800247e:	18fb      	adds	r3, r7, r3
 8002480:	2201      	movs	r2, #1
 8002482:	701a      	strb	r2, [r3, #0]
      break;
 8002484:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	223c      	movs	r2, #60	; 0x3c
 800248a:	2100      	movs	r1, #0
 800248c:	5499      	strb	r1, [r3, r2]

  return status;
 800248e:	2317      	movs	r3, #23
 8002490:	18fb      	adds	r3, r7, r3
 8002492:	781b      	ldrb	r3, [r3, #0]
}
 8002494:	0018      	movs	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	b006      	add	sp, #24
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024a8:	2317      	movs	r3, #23
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	2200      	movs	r2, #0
 80024ae:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	223c      	movs	r2, #60	; 0x3c
 80024b4:	5c9b      	ldrb	r3, [r3, r2]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_TIM_PWM_ConfigChannel+0x22>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e0ad      	b.n	800261a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	223c      	movs	r2, #60	; 0x3c
 80024c2:	2101      	movs	r1, #1
 80024c4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b0c      	cmp	r3, #12
 80024ca:	d100      	bne.n	80024ce <HAL_TIM_PWM_ConfigChannel+0x32>
 80024cc:	e076      	b.n	80025bc <HAL_TIM_PWM_ConfigChannel+0x120>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b0c      	cmp	r3, #12
 80024d2:	d900      	bls.n	80024d6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80024d4:	e095      	b.n	8002602 <HAL_TIM_PWM_ConfigChannel+0x166>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d04e      	beq.n	800257a <HAL_TIM_PWM_ConfigChannel+0xde>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d900      	bls.n	80024e4 <HAL_TIM_PWM_ConfigChannel+0x48>
 80024e2:	e08e      	b.n	8002602 <HAL_TIM_PWM_ConfigChannel+0x166>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_TIM_PWM_ConfigChannel+0x56>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d021      	beq.n	8002534 <HAL_TIM_PWM_ConfigChannel+0x98>
 80024f0:	e087      	b.n	8002602 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	0011      	movs	r1, r2
 80024fa:	0018      	movs	r0, r3
 80024fc:	f000 f9e8 	bl	80028d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699a      	ldr	r2, [r3, #24]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2108      	movs	r1, #8
 800250c:	430a      	orrs	r2, r1
 800250e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699a      	ldr	r2, [r3, #24]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2104      	movs	r1, #4
 800251c:	438a      	bics	r2, r1
 800251e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6999      	ldr	r1, [r3, #24]
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	691a      	ldr	r2, [r3, #16]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	619a      	str	r2, [r3, #24]
      break;
 8002532:	e06b      	b.n	800260c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	0011      	movs	r1, r2
 800253c:	0018      	movs	r0, r3
 800253e:	f000 fa4f 	bl	80029e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	699a      	ldr	r2, [r3, #24]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2180      	movs	r1, #128	; 0x80
 800254e:	0109      	lsls	r1, r1, #4
 8002550:	430a      	orrs	r2, r1
 8002552:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	699a      	ldr	r2, [r3, #24]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4931      	ldr	r1, [pc, #196]	; (8002624 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002560:	400a      	ands	r2, r1
 8002562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6999      	ldr	r1, [r3, #24]
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	021a      	lsls	r2, r3, #8
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	619a      	str	r2, [r3, #24]
      break;
 8002578:	e048      	b.n	800260c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	0011      	movs	r1, r2
 8002582:	0018      	movs	r0, r3
 8002584:	f000 fab0 	bl	8002ae8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	69da      	ldr	r2, [r3, #28]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2108      	movs	r1, #8
 8002594:	430a      	orrs	r2, r1
 8002596:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	69da      	ldr	r2, [r3, #28]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2104      	movs	r1, #4
 80025a4:	438a      	bics	r2, r1
 80025a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	69d9      	ldr	r1, [r3, #28]
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	691a      	ldr	r2, [r3, #16]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	61da      	str	r2, [r3, #28]
      break;
 80025ba:	e027      	b.n	800260c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	0011      	movs	r1, r2
 80025c4:	0018      	movs	r0, r3
 80025c6:	f000 fb15 	bl	8002bf4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	69da      	ldr	r2, [r3, #28]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2180      	movs	r1, #128	; 0x80
 80025d6:	0109      	lsls	r1, r1, #4
 80025d8:	430a      	orrs	r2, r1
 80025da:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	69da      	ldr	r2, [r3, #28]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	490f      	ldr	r1, [pc, #60]	; (8002624 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80025e8:	400a      	ands	r2, r1
 80025ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	69d9      	ldr	r1, [r3, #28]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	021a      	lsls	r2, r3, #8
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	61da      	str	r2, [r3, #28]
      break;
 8002600:	e004      	b.n	800260c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002602:	2317      	movs	r3, #23
 8002604:	18fb      	adds	r3, r7, r3
 8002606:	2201      	movs	r2, #1
 8002608:	701a      	strb	r2, [r3, #0]
      break;
 800260a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	223c      	movs	r2, #60	; 0x3c
 8002610:	2100      	movs	r1, #0
 8002612:	5499      	strb	r1, [r3, r2]

  return status;
 8002614:	2317      	movs	r3, #23
 8002616:	18fb      	adds	r3, r7, r3
 8002618:	781b      	ldrb	r3, [r3, #0]
}
 800261a:	0018      	movs	r0, r3
 800261c:	46bd      	mov	sp, r7
 800261e:	b006      	add	sp, #24
 8002620:	bd80      	pop	{r7, pc}
 8002622:	46c0      	nop			; (mov r8, r8)
 8002624:	fffffbff 	.word	0xfffffbff

08002628 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002632:	230f      	movs	r3, #15
 8002634:	18fb      	adds	r3, r7, r3
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	223c      	movs	r2, #60	; 0x3c
 800263e:	5c9b      	ldrb	r3, [r3, r2]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <HAL_TIM_ConfigClockSource+0x20>
 8002644:	2302      	movs	r3, #2
 8002646:	e0bc      	b.n	80027c2 <HAL_TIM_ConfigClockSource+0x19a>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	223c      	movs	r2, #60	; 0x3c
 800264c:	2101      	movs	r1, #1
 800264e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	223d      	movs	r2, #61	; 0x3d
 8002654:	2102      	movs	r1, #2
 8002656:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2277      	movs	r2, #119	; 0x77
 8002664:	4393      	bics	r3, r2
 8002666:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	4a58      	ldr	r2, [pc, #352]	; (80027cc <HAL_TIM_ConfigClockSource+0x1a4>)
 800266c:	4013      	ands	r3, r2
 800266e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2280      	movs	r2, #128	; 0x80
 800267e:	0192      	lsls	r2, r2, #6
 8002680:	4293      	cmp	r3, r2
 8002682:	d040      	beq.n	8002706 <HAL_TIM_ConfigClockSource+0xde>
 8002684:	2280      	movs	r2, #128	; 0x80
 8002686:	0192      	lsls	r2, r2, #6
 8002688:	4293      	cmp	r3, r2
 800268a:	d900      	bls.n	800268e <HAL_TIM_ConfigClockSource+0x66>
 800268c:	e088      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x178>
 800268e:	2280      	movs	r2, #128	; 0x80
 8002690:	0152      	lsls	r2, r2, #5
 8002692:	4293      	cmp	r3, r2
 8002694:	d100      	bne.n	8002698 <HAL_TIM_ConfigClockSource+0x70>
 8002696:	e088      	b.n	80027aa <HAL_TIM_ConfigClockSource+0x182>
 8002698:	2280      	movs	r2, #128	; 0x80
 800269a:	0152      	lsls	r2, r2, #5
 800269c:	4293      	cmp	r3, r2
 800269e:	d900      	bls.n	80026a2 <HAL_TIM_ConfigClockSource+0x7a>
 80026a0:	e07e      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x178>
 80026a2:	2b70      	cmp	r3, #112	; 0x70
 80026a4:	d018      	beq.n	80026d8 <HAL_TIM_ConfigClockSource+0xb0>
 80026a6:	d900      	bls.n	80026aa <HAL_TIM_ConfigClockSource+0x82>
 80026a8:	e07a      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x178>
 80026aa:	2b60      	cmp	r3, #96	; 0x60
 80026ac:	d04f      	beq.n	800274e <HAL_TIM_ConfigClockSource+0x126>
 80026ae:	d900      	bls.n	80026b2 <HAL_TIM_ConfigClockSource+0x8a>
 80026b0:	e076      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x178>
 80026b2:	2b50      	cmp	r3, #80	; 0x50
 80026b4:	d03b      	beq.n	800272e <HAL_TIM_ConfigClockSource+0x106>
 80026b6:	d900      	bls.n	80026ba <HAL_TIM_ConfigClockSource+0x92>
 80026b8:	e072      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x178>
 80026ba:	2b40      	cmp	r3, #64	; 0x40
 80026bc:	d057      	beq.n	800276e <HAL_TIM_ConfigClockSource+0x146>
 80026be:	d900      	bls.n	80026c2 <HAL_TIM_ConfigClockSource+0x9a>
 80026c0:	e06e      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x178>
 80026c2:	2b30      	cmp	r3, #48	; 0x30
 80026c4:	d063      	beq.n	800278e <HAL_TIM_ConfigClockSource+0x166>
 80026c6:	d86b      	bhi.n	80027a0 <HAL_TIM_ConfigClockSource+0x178>
 80026c8:	2b20      	cmp	r3, #32
 80026ca:	d060      	beq.n	800278e <HAL_TIM_ConfigClockSource+0x166>
 80026cc:	d868      	bhi.n	80027a0 <HAL_TIM_ConfigClockSource+0x178>
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d05d      	beq.n	800278e <HAL_TIM_ConfigClockSource+0x166>
 80026d2:	2b10      	cmp	r3, #16
 80026d4:	d05b      	beq.n	800278e <HAL_TIM_ConfigClockSource+0x166>
 80026d6:	e063      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	6899      	ldr	r1, [r3, #8]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f000 fb68 	bl	8002dbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2277      	movs	r2, #119	; 0x77
 80026f8:	4313      	orrs	r3, r2
 80026fa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	609a      	str	r2, [r3, #8]
      break;
 8002704:	e052      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6818      	ldr	r0, [r3, #0]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	6899      	ldr	r1, [r3, #8]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f000 fb51 	bl	8002dbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2180      	movs	r1, #128	; 0x80
 8002726:	01c9      	lsls	r1, r1, #7
 8002728:	430a      	orrs	r2, r1
 800272a:	609a      	str	r2, [r3, #8]
      break;
 800272c:	e03e      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6818      	ldr	r0, [r3, #0]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	6859      	ldr	r1, [r3, #4]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	001a      	movs	r2, r3
 800273c:	f000 fac4 	bl	8002cc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2150      	movs	r1, #80	; 0x50
 8002746:	0018      	movs	r0, r3
 8002748:	f000 fb1e 	bl	8002d88 <TIM_ITRx_SetConfig>
      break;
 800274c:	e02e      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	6859      	ldr	r1, [r3, #4]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	001a      	movs	r2, r3
 800275c:	f000 fae2 	bl	8002d24 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2160      	movs	r1, #96	; 0x60
 8002766:	0018      	movs	r0, r3
 8002768:	f000 fb0e 	bl	8002d88 <TIM_ITRx_SetConfig>
      break;
 800276c:	e01e      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6818      	ldr	r0, [r3, #0]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	6859      	ldr	r1, [r3, #4]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	001a      	movs	r2, r3
 800277c:	f000 faa4 	bl	8002cc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2140      	movs	r1, #64	; 0x40
 8002786:	0018      	movs	r0, r3
 8002788:	f000 fafe 	bl	8002d88 <TIM_ITRx_SetConfig>
      break;
 800278c:	e00e      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	0019      	movs	r1, r3
 8002798:	0010      	movs	r0, r2
 800279a:	f000 faf5 	bl	8002d88 <TIM_ITRx_SetConfig>
      break;
 800279e:	e005      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80027a0:	230f      	movs	r3, #15
 80027a2:	18fb      	adds	r3, r7, r3
 80027a4:	2201      	movs	r2, #1
 80027a6:	701a      	strb	r2, [r3, #0]
      break;
 80027a8:	e000      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x184>
      break;
 80027aa:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	223d      	movs	r2, #61	; 0x3d
 80027b0:	2101      	movs	r1, #1
 80027b2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	223c      	movs	r2, #60	; 0x3c
 80027b8:	2100      	movs	r1, #0
 80027ba:	5499      	strb	r1, [r3, r2]

  return status;
 80027bc:	230f      	movs	r3, #15
 80027be:	18fb      	adds	r3, r7, r3
 80027c0:	781b      	ldrb	r3, [r3, #0]
}
 80027c2:	0018      	movs	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	b004      	add	sp, #16
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	46c0      	nop			; (mov r8, r8)
 80027cc:	ffff00ff 	.word	0xffff00ff

080027d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a34      	ldr	r2, [pc, #208]	; (80028b4 <TIM_Base_SetConfig+0xe4>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d008      	beq.n	80027fa <TIM_Base_SetConfig+0x2a>
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	05db      	lsls	r3, r3, #23
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d003      	beq.n	80027fa <TIM_Base_SetConfig+0x2a>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a30      	ldr	r2, [pc, #192]	; (80028b8 <TIM_Base_SetConfig+0xe8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d108      	bne.n	800280c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2270      	movs	r2, #112	; 0x70
 80027fe:	4393      	bics	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	4313      	orrs	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a29      	ldr	r2, [pc, #164]	; (80028b4 <TIM_Base_SetConfig+0xe4>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d018      	beq.n	8002846 <TIM_Base_SetConfig+0x76>
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	2380      	movs	r3, #128	; 0x80
 8002818:	05db      	lsls	r3, r3, #23
 800281a:	429a      	cmp	r2, r3
 800281c:	d013      	beq.n	8002846 <TIM_Base_SetConfig+0x76>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a25      	ldr	r2, [pc, #148]	; (80028b8 <TIM_Base_SetConfig+0xe8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d00f      	beq.n	8002846 <TIM_Base_SetConfig+0x76>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a24      	ldr	r2, [pc, #144]	; (80028bc <TIM_Base_SetConfig+0xec>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d00b      	beq.n	8002846 <TIM_Base_SetConfig+0x76>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a23      	ldr	r2, [pc, #140]	; (80028c0 <TIM_Base_SetConfig+0xf0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d007      	beq.n	8002846 <TIM_Base_SetConfig+0x76>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a22      	ldr	r2, [pc, #136]	; (80028c4 <TIM_Base_SetConfig+0xf4>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d003      	beq.n	8002846 <TIM_Base_SetConfig+0x76>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a21      	ldr	r2, [pc, #132]	; (80028c8 <TIM_Base_SetConfig+0xf8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d108      	bne.n	8002858 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	4a20      	ldr	r2, [pc, #128]	; (80028cc <TIM_Base_SetConfig+0xfc>)
 800284a:	4013      	ands	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	4313      	orrs	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2280      	movs	r2, #128	; 0x80
 800285c:	4393      	bics	r3, r2
 800285e:	001a      	movs	r2, r3
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	4313      	orrs	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a0c      	ldr	r2, [pc, #48]	; (80028b4 <TIM_Base_SetConfig+0xe4>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00b      	beq.n	800289e <TIM_Base_SetConfig+0xce>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a0d      	ldr	r2, [pc, #52]	; (80028c0 <TIM_Base_SetConfig+0xf0>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d007      	beq.n	800289e <TIM_Base_SetConfig+0xce>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a0c      	ldr	r2, [pc, #48]	; (80028c4 <TIM_Base_SetConfig+0xf4>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d003      	beq.n	800289e <TIM_Base_SetConfig+0xce>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a0b      	ldr	r2, [pc, #44]	; (80028c8 <TIM_Base_SetConfig+0xf8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d103      	bne.n	80028a6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	615a      	str	r2, [r3, #20]
}
 80028ac:	46c0      	nop			; (mov r8, r8)
 80028ae:	46bd      	mov	sp, r7
 80028b0:	b004      	add	sp, #16
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40012c00 	.word	0x40012c00
 80028b8:	40000400 	.word	0x40000400
 80028bc:	40002000 	.word	0x40002000
 80028c0:	40014000 	.word	0x40014000
 80028c4:	40014400 	.word	0x40014400
 80028c8:	40014800 	.word	0x40014800
 80028cc:	fffffcff 	.word	0xfffffcff

080028d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	2201      	movs	r2, #1
 80028e0:	4393      	bics	r3, r2
 80028e2:	001a      	movs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2270      	movs	r2, #112	; 0x70
 80028fe:	4393      	bics	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2203      	movs	r2, #3
 8002906:	4393      	bics	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4313      	orrs	r3, r2
 8002912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	2202      	movs	r2, #2
 8002918:	4393      	bics	r3, r2
 800291a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	4313      	orrs	r3, r2
 8002924:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a27      	ldr	r2, [pc, #156]	; (80029c8 <TIM_OC1_SetConfig+0xf8>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d00b      	beq.n	8002946 <TIM_OC1_SetConfig+0x76>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a26      	ldr	r2, [pc, #152]	; (80029cc <TIM_OC1_SetConfig+0xfc>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d007      	beq.n	8002946 <TIM_OC1_SetConfig+0x76>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a25      	ldr	r2, [pc, #148]	; (80029d0 <TIM_OC1_SetConfig+0x100>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d003      	beq.n	8002946 <TIM_OC1_SetConfig+0x76>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a24      	ldr	r2, [pc, #144]	; (80029d4 <TIM_OC1_SetConfig+0x104>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d10c      	bne.n	8002960 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2208      	movs	r2, #8
 800294a:	4393      	bics	r3, r2
 800294c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	4313      	orrs	r3, r2
 8002956:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	2204      	movs	r2, #4
 800295c:	4393      	bics	r3, r2
 800295e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a19      	ldr	r2, [pc, #100]	; (80029c8 <TIM_OC1_SetConfig+0xf8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d00b      	beq.n	8002980 <TIM_OC1_SetConfig+0xb0>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a18      	ldr	r2, [pc, #96]	; (80029cc <TIM_OC1_SetConfig+0xfc>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d007      	beq.n	8002980 <TIM_OC1_SetConfig+0xb0>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a17      	ldr	r2, [pc, #92]	; (80029d0 <TIM_OC1_SetConfig+0x100>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d003      	beq.n	8002980 <TIM_OC1_SetConfig+0xb0>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a16      	ldr	r2, [pc, #88]	; (80029d4 <TIM_OC1_SetConfig+0x104>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d111      	bne.n	80029a4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	4a15      	ldr	r2, [pc, #84]	; (80029d8 <TIM_OC1_SetConfig+0x108>)
 8002984:	4013      	ands	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	4a14      	ldr	r2, [pc, #80]	; (80029dc <TIM_OC1_SetConfig+0x10c>)
 800298c:	4013      	ands	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	621a      	str	r2, [r3, #32]
}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b006      	add	sp, #24
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	40012c00 	.word	0x40012c00
 80029cc:	40014000 	.word	0x40014000
 80029d0:	40014400 	.word	0x40014400
 80029d4:	40014800 	.word	0x40014800
 80029d8:	fffffeff 	.word	0xfffffeff
 80029dc:	fffffdff 	.word	0xfffffdff

080029e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	2210      	movs	r2, #16
 80029f0:	4393      	bics	r3, r2
 80029f2:	001a      	movs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4a2e      	ldr	r2, [pc, #184]	; (8002ac8 <TIM_OC2_SetConfig+0xe8>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4a2d      	ldr	r2, [pc, #180]	; (8002acc <TIM_OC2_SetConfig+0xec>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	021b      	lsls	r3, r3, #8
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	4393      	bics	r3, r2
 8002a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a24      	ldr	r2, [pc, #144]	; (8002ad0 <TIM_OC2_SetConfig+0xf0>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d10d      	bne.n	8002a5e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2280      	movs	r2, #128	; 0x80
 8002a46:	4393      	bics	r3, r2
 8002a48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2240      	movs	r2, #64	; 0x40
 8002a5a:	4393      	bics	r3, r2
 8002a5c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a1b      	ldr	r2, [pc, #108]	; (8002ad0 <TIM_OC2_SetConfig+0xf0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00b      	beq.n	8002a7e <TIM_OC2_SetConfig+0x9e>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a1a      	ldr	r2, [pc, #104]	; (8002ad4 <TIM_OC2_SetConfig+0xf4>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d007      	beq.n	8002a7e <TIM_OC2_SetConfig+0x9e>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a19      	ldr	r2, [pc, #100]	; (8002ad8 <TIM_OC2_SetConfig+0xf8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d003      	beq.n	8002a7e <TIM_OC2_SetConfig+0x9e>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a18      	ldr	r2, [pc, #96]	; (8002adc <TIM_OC2_SetConfig+0xfc>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d113      	bne.n	8002aa6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4a17      	ldr	r2, [pc, #92]	; (8002ae0 <TIM_OC2_SetConfig+0x100>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4a16      	ldr	r2, [pc, #88]	; (8002ae4 <TIM_OC2_SetConfig+0x104>)
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	621a      	str	r2, [r3, #32]
}
 8002ac0:	46c0      	nop			; (mov r8, r8)
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b006      	add	sp, #24
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	ffff8fff 	.word	0xffff8fff
 8002acc:	fffffcff 	.word	0xfffffcff
 8002ad0:	40012c00 	.word	0x40012c00
 8002ad4:	40014000 	.word	0x40014000
 8002ad8:	40014400 	.word	0x40014400
 8002adc:	40014800 	.word	0x40014800
 8002ae0:	fffffbff 	.word	0xfffffbff
 8002ae4:	fffff7ff 	.word	0xfffff7ff

08002ae8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	4a35      	ldr	r2, [pc, #212]	; (8002bcc <TIM_OC3_SetConfig+0xe4>)
 8002af8:	401a      	ands	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2270      	movs	r2, #112	; 0x70
 8002b14:	4393      	bics	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	4393      	bics	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	4a28      	ldr	r2, [pc, #160]	; (8002bd0 <TIM_OC3_SetConfig+0xe8>)
 8002b2e:	4013      	ands	r3, r2
 8002b30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	021b      	lsls	r3, r3, #8
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a24      	ldr	r2, [pc, #144]	; (8002bd4 <TIM_OC3_SetConfig+0xec>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d10d      	bne.n	8002b62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	4a23      	ldr	r2, [pc, #140]	; (8002bd8 <TIM_OC3_SetConfig+0xf0>)
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	021b      	lsls	r3, r3, #8
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	4a1f      	ldr	r2, [pc, #124]	; (8002bdc <TIM_OC3_SetConfig+0xf4>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a1b      	ldr	r2, [pc, #108]	; (8002bd4 <TIM_OC3_SetConfig+0xec>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d00b      	beq.n	8002b82 <TIM_OC3_SetConfig+0x9a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a1c      	ldr	r2, [pc, #112]	; (8002be0 <TIM_OC3_SetConfig+0xf8>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d007      	beq.n	8002b82 <TIM_OC3_SetConfig+0x9a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a1b      	ldr	r2, [pc, #108]	; (8002be4 <TIM_OC3_SetConfig+0xfc>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d003      	beq.n	8002b82 <TIM_OC3_SetConfig+0x9a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a1a      	ldr	r2, [pc, #104]	; (8002be8 <TIM_OC3_SetConfig+0x100>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d113      	bne.n	8002baa <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4a19      	ldr	r2, [pc, #100]	; (8002bec <TIM_OC3_SetConfig+0x104>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4a18      	ldr	r2, [pc, #96]	; (8002bf0 <TIM_OC3_SetConfig+0x108>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	011b      	lsls	r3, r3, #4
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	621a      	str	r2, [r3, #32]
}
 8002bc4:	46c0      	nop			; (mov r8, r8)
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b006      	add	sp, #24
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	fffffeff 	.word	0xfffffeff
 8002bd0:	fffffdff 	.word	0xfffffdff
 8002bd4:	40012c00 	.word	0x40012c00
 8002bd8:	fffff7ff 	.word	0xfffff7ff
 8002bdc:	fffffbff 	.word	0xfffffbff
 8002be0:	40014000 	.word	0x40014000
 8002be4:	40014400 	.word	0x40014400
 8002be8:	40014800 	.word	0x40014800
 8002bec:	ffffefff 	.word	0xffffefff
 8002bf0:	ffffdfff 	.word	0xffffdfff

08002bf4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	4a28      	ldr	r2, [pc, #160]	; (8002ca4 <TIM_OC4_SetConfig+0xb0>)
 8002c04:	401a      	ands	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4a22      	ldr	r2, [pc, #136]	; (8002ca8 <TIM_OC4_SetConfig+0xb4>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4a21      	ldr	r2, [pc, #132]	; (8002cac <TIM_OC4_SetConfig+0xb8>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	021b      	lsls	r3, r3, #8
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	4a1d      	ldr	r2, [pc, #116]	; (8002cb0 <TIM_OC4_SetConfig+0xbc>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	031b      	lsls	r3, r3, #12
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a19      	ldr	r2, [pc, #100]	; (8002cb4 <TIM_OC4_SetConfig+0xc0>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d00b      	beq.n	8002c6c <TIM_OC4_SetConfig+0x78>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a18      	ldr	r2, [pc, #96]	; (8002cb8 <TIM_OC4_SetConfig+0xc4>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d007      	beq.n	8002c6c <TIM_OC4_SetConfig+0x78>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a17      	ldr	r2, [pc, #92]	; (8002cbc <TIM_OC4_SetConfig+0xc8>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d003      	beq.n	8002c6c <TIM_OC4_SetConfig+0x78>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a16      	ldr	r2, [pc, #88]	; (8002cc0 <TIM_OC4_SetConfig+0xcc>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d109      	bne.n	8002c80 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	4a15      	ldr	r2, [pc, #84]	; (8002cc4 <TIM_OC4_SetConfig+0xd0>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	019b      	lsls	r3, r3, #6
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	621a      	str	r2, [r3, #32]
}
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	b006      	add	sp, #24
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	ffffefff 	.word	0xffffefff
 8002ca8:	ffff8fff 	.word	0xffff8fff
 8002cac:	fffffcff 	.word	0xfffffcff
 8002cb0:	ffffdfff 	.word	0xffffdfff
 8002cb4:	40012c00 	.word	0x40012c00
 8002cb8:	40014000 	.word	0x40014000
 8002cbc:	40014400 	.word	0x40014400
 8002cc0:	40014800 	.word	0x40014800
 8002cc4:	ffffbfff 	.word	0xffffbfff

08002cc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	4393      	bics	r3, r2
 8002ce2:	001a      	movs	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	22f0      	movs	r2, #240	; 0xf0
 8002cf2:	4393      	bics	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	220a      	movs	r2, #10
 8002d04:	4393      	bics	r3, r2
 8002d06:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	621a      	str	r2, [r3, #32]
}
 8002d1c:	46c0      	nop			; (mov r8, r8)
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b006      	add	sp, #24
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	2210      	movs	r2, #16
 8002d36:	4393      	bics	r3, r2
 8002d38:	001a      	movs	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	4a0d      	ldr	r2, [pc, #52]	; (8002d84 <TIM_TI2_ConfigInputStage+0x60>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	031b      	lsls	r3, r3, #12
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	22a0      	movs	r2, #160	; 0xa0
 8002d60:	4393      	bics	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	621a      	str	r2, [r3, #32]
}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	b006      	add	sp, #24
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	ffff0fff 	.word	0xffff0fff

08002d88 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2270      	movs	r2, #112	; 0x70
 8002d9c:	4393      	bics	r3, r2
 8002d9e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	2207      	movs	r2, #7
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	609a      	str	r2, [r3, #8]
}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	46bd      	mov	sp, r7
 8002db6:	b004      	add	sp, #16
 8002db8:	bd80      	pop	{r7, pc}
	...

08002dbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	4a09      	ldr	r2, [pc, #36]	; (8002df8 <TIM_ETR_SetConfig+0x3c>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	021a      	lsls	r2, r3, #8
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	431a      	orrs	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	609a      	str	r2, [r3, #8]
}
 8002df0:	46c0      	nop			; (mov r8, r8)
 8002df2:	46bd      	mov	sp, r7
 8002df4:	b006      	add	sp, #24
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	ffff00ff 	.word	0xffff00ff

08002dfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	221f      	movs	r2, #31
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2201      	movs	r2, #1
 8002e10:	409a      	lsls	r2, r3
 8002e12:	0013      	movs	r3, r2
 8002e14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	43d2      	mvns	r2, r2
 8002e1e:	401a      	ands	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a1a      	ldr	r2, [r3, #32]
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	211f      	movs	r1, #31
 8002e2c:	400b      	ands	r3, r1
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	4099      	lsls	r1, r3
 8002e32:	000b      	movs	r3, r1
 8002e34:	431a      	orrs	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	621a      	str	r2, [r3, #32]
}
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	b006      	add	sp, #24
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	223c      	movs	r2, #60	; 0x3c
 8002e52:	5c9b      	ldrb	r3, [r3, r2]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e047      	b.n	8002eec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	223c      	movs	r2, #60	; 0x3c
 8002e60:	2101      	movs	r1, #1
 8002e62:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	223d      	movs	r2, #61	; 0x3d
 8002e68:	2102      	movs	r1, #2
 8002e6a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2270      	movs	r2, #112	; 0x70
 8002e80:	4393      	bics	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a16      	ldr	r2, [pc, #88]	; (8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d00f      	beq.n	8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	2380      	movs	r3, #128	; 0x80
 8002ea6:	05db      	lsls	r3, r3, #23
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d009      	beq.n	8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a11      	ldr	r2, [pc, #68]	; (8002ef8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d004      	beq.n	8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a10      	ldr	r2, [pc, #64]	; (8002efc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d10c      	bne.n	8002eda <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2280      	movs	r2, #128	; 0x80
 8002ec4:	4393      	bics	r3, r2
 8002ec6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	223d      	movs	r2, #61	; 0x3d
 8002ede:	2101      	movs	r1, #1
 8002ee0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	223c      	movs	r2, #60	; 0x3c
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	0018      	movs	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	b004      	add	sp, #16
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40012c00 	.word	0x40012c00
 8002ef8:	40000400 	.word	0x40000400
 8002efc:	40014000 	.word	0x40014000

08002f00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e044      	b.n	8002f9c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d107      	bne.n	8002f2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2274      	movs	r2, #116	; 0x74
 8002f1e:	2100      	movs	r1, #0
 8002f20:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	0018      	movs	r0, r3
 8002f26:	f7fd fe05 	bl	8000b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2224      	movs	r2, #36	; 0x24
 8002f2e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	438a      	bics	r2, r1
 8002f3e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	0018      	movs	r0, r3
 8002f44:	f000 f8da 	bl	80030fc <UART_SetConfig>
 8002f48:	0003      	movs	r3, r0
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d101      	bne.n	8002f52 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e024      	b.n	8002f9c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f000 fa0d 	bl	800337c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	490d      	ldr	r1, [pc, #52]	; (8002fa4 <HAL_UART_Init+0xa4>)
 8002f6e:	400a      	ands	r2, r1
 8002f70:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	212a      	movs	r1, #42	; 0x2a
 8002f7e:	438a      	bics	r2, r1
 8002f80:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	0018      	movs	r0, r3
 8002f96:	f000 faa5 	bl	80034e4 <UART_CheckIdleState>
 8002f9a:	0003      	movs	r3, r0
}
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b002      	add	sp, #8
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	ffffb7ff 	.word	0xffffb7ff

08002fa8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08a      	sub	sp, #40	; 0x28
 8002fac:	af02      	add	r7, sp, #8
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	1dbb      	adds	r3, r7, #6
 8002fb6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fbc:	2b20      	cmp	r3, #32
 8002fbe:	d000      	beq.n	8002fc2 <HAL_UART_Transmit+0x1a>
 8002fc0:	e096      	b.n	80030f0 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <HAL_UART_Transmit+0x28>
 8002fc8:	1dbb      	adds	r3, r7, #6
 8002fca:	881b      	ldrh	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e08e      	b.n	80030f2 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	2380      	movs	r3, #128	; 0x80
 8002fda:	015b      	lsls	r3, r3, #5
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d109      	bne.n	8002ff4 <HAL_UART_Transmit+0x4c>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d105      	bne.n	8002ff4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2201      	movs	r2, #1
 8002fec:	4013      	ands	r3, r2
 8002fee:	d001      	beq.n	8002ff4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e07e      	b.n	80030f2 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2274      	movs	r2, #116	; 0x74
 8002ff8:	5c9b      	ldrb	r3, [r3, r2]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d101      	bne.n	8003002 <HAL_UART_Transmit+0x5a>
 8002ffe:	2302      	movs	r3, #2
 8003000:	e077      	b.n	80030f2 <HAL_UART_Transmit+0x14a>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2274      	movs	r2, #116	; 0x74
 8003006:	2101      	movs	r1, #1
 8003008:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2280      	movs	r2, #128	; 0x80
 800300e:	2100      	movs	r1, #0
 8003010:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2221      	movs	r2, #33	; 0x21
 8003016:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003018:	f7fd febc 	bl	8000d94 <HAL_GetTick>
 800301c:	0003      	movs	r3, r0
 800301e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	1dba      	adds	r2, r7, #6
 8003024:	2150      	movs	r1, #80	; 0x50
 8003026:	8812      	ldrh	r2, [r2, #0]
 8003028:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1dba      	adds	r2, r7, #6
 800302e:	2152      	movs	r1, #82	; 0x52
 8003030:	8812      	ldrh	r2, [r2, #0]
 8003032:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	2380      	movs	r3, #128	; 0x80
 800303a:	015b      	lsls	r3, r3, #5
 800303c:	429a      	cmp	r2, r3
 800303e:	d108      	bne.n	8003052 <HAL_UART_Transmit+0xaa>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d104      	bne.n	8003052 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003048:	2300      	movs	r3, #0
 800304a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	61bb      	str	r3, [r7, #24]
 8003050:	e003      	b.n	800305a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003056:	2300      	movs	r3, #0
 8003058:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2274      	movs	r2, #116	; 0x74
 800305e:	2100      	movs	r1, #0
 8003060:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003062:	e02d      	b.n	80030c0 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	0013      	movs	r3, r2
 800306e:	2200      	movs	r2, #0
 8003070:	2180      	movs	r1, #128	; 0x80
 8003072:	f000 fa7f 	bl	8003574 <UART_WaitOnFlagUntilTimeout>
 8003076:	1e03      	subs	r3, r0, #0
 8003078:	d001      	beq.n	800307e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e039      	b.n	80030f2 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10b      	bne.n	800309c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	881a      	ldrh	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	05d2      	lsls	r2, r2, #23
 800308e:	0dd2      	lsrs	r2, r2, #23
 8003090:	b292      	uxth	r2, r2
 8003092:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	3302      	adds	r3, #2
 8003098:	61bb      	str	r3, [r7, #24]
 800309a:	e008      	b.n	80030ae <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	781a      	ldrb	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	b292      	uxth	r2, r2
 80030a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	3301      	adds	r3, #1
 80030ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2252      	movs	r2, #82	; 0x52
 80030b2:	5a9b      	ldrh	r3, [r3, r2]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	3b01      	subs	r3, #1
 80030b8:	b299      	uxth	r1, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2252      	movs	r2, #82	; 0x52
 80030be:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2252      	movs	r2, #82	; 0x52
 80030c4:	5a9b      	ldrh	r3, [r3, r2]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1cb      	bne.n	8003064 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	0013      	movs	r3, r2
 80030d6:	2200      	movs	r2, #0
 80030d8:	2140      	movs	r1, #64	; 0x40
 80030da:	f000 fa4b 	bl	8003574 <UART_WaitOnFlagUntilTimeout>
 80030de:	1e03      	subs	r3, r0, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e005      	b.n	80030f2 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2220      	movs	r2, #32
 80030ea:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80030ec:	2300      	movs	r3, #0
 80030ee:	e000      	b.n	80030f2 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80030f0:	2302      	movs	r3, #2
  }
}
 80030f2:	0018      	movs	r0, r3
 80030f4:	46bd      	mov	sp, r7
 80030f6:	b008      	add	sp, #32
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b088      	sub	sp, #32
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003104:	231e      	movs	r3, #30
 8003106:	18fb      	adds	r3, r7, r3
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	4313      	orrs	r3, r2
 8003122:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a8d      	ldr	r2, [pc, #564]	; (8003360 <UART_SetConfig+0x264>)
 800312c:	4013      	ands	r3, r2
 800312e:	0019      	movs	r1, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	430a      	orrs	r2, r1
 8003138:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	4a88      	ldr	r2, [pc, #544]	; (8003364 <UART_SetConfig+0x268>)
 8003142:	4013      	ands	r3, r2
 8003144:	0019      	movs	r1, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	4313      	orrs	r3, r2
 8003160:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	4a7f      	ldr	r2, [pc, #508]	; (8003368 <UART_SetConfig+0x26c>)
 800316a:	4013      	ands	r3, r2
 800316c:	0019      	movs	r1, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	430a      	orrs	r2, r1
 8003176:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a7b      	ldr	r2, [pc, #492]	; (800336c <UART_SetConfig+0x270>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d127      	bne.n	80031d2 <UART_SetConfig+0xd6>
 8003182:	4b7b      	ldr	r3, [pc, #492]	; (8003370 <UART_SetConfig+0x274>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	2203      	movs	r2, #3
 8003188:	4013      	ands	r3, r2
 800318a:	2b03      	cmp	r3, #3
 800318c:	d00d      	beq.n	80031aa <UART_SetConfig+0xae>
 800318e:	d81b      	bhi.n	80031c8 <UART_SetConfig+0xcc>
 8003190:	2b02      	cmp	r3, #2
 8003192:	d014      	beq.n	80031be <UART_SetConfig+0xc2>
 8003194:	d818      	bhi.n	80031c8 <UART_SetConfig+0xcc>
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <UART_SetConfig+0xa4>
 800319a:	2b01      	cmp	r3, #1
 800319c:	d00a      	beq.n	80031b4 <UART_SetConfig+0xb8>
 800319e:	e013      	b.n	80031c8 <UART_SetConfig+0xcc>
 80031a0:	231f      	movs	r3, #31
 80031a2:	18fb      	adds	r3, r7, r3
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]
 80031a8:	e021      	b.n	80031ee <UART_SetConfig+0xf2>
 80031aa:	231f      	movs	r3, #31
 80031ac:	18fb      	adds	r3, r7, r3
 80031ae:	2202      	movs	r2, #2
 80031b0:	701a      	strb	r2, [r3, #0]
 80031b2:	e01c      	b.n	80031ee <UART_SetConfig+0xf2>
 80031b4:	231f      	movs	r3, #31
 80031b6:	18fb      	adds	r3, r7, r3
 80031b8:	2204      	movs	r2, #4
 80031ba:	701a      	strb	r2, [r3, #0]
 80031bc:	e017      	b.n	80031ee <UART_SetConfig+0xf2>
 80031be:	231f      	movs	r3, #31
 80031c0:	18fb      	adds	r3, r7, r3
 80031c2:	2208      	movs	r2, #8
 80031c4:	701a      	strb	r2, [r3, #0]
 80031c6:	e012      	b.n	80031ee <UART_SetConfig+0xf2>
 80031c8:	231f      	movs	r3, #31
 80031ca:	18fb      	adds	r3, r7, r3
 80031cc:	2210      	movs	r2, #16
 80031ce:	701a      	strb	r2, [r3, #0]
 80031d0:	e00d      	b.n	80031ee <UART_SetConfig+0xf2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a67      	ldr	r2, [pc, #412]	; (8003374 <UART_SetConfig+0x278>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d104      	bne.n	80031e6 <UART_SetConfig+0xea>
 80031dc:	231f      	movs	r3, #31
 80031de:	18fb      	adds	r3, r7, r3
 80031e0:	2200      	movs	r2, #0
 80031e2:	701a      	strb	r2, [r3, #0]
 80031e4:	e003      	b.n	80031ee <UART_SetConfig+0xf2>
 80031e6:	231f      	movs	r3, #31
 80031e8:	18fb      	adds	r3, r7, r3
 80031ea:	2210      	movs	r2, #16
 80031ec:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69da      	ldr	r2, [r3, #28]
 80031f2:	2380      	movs	r3, #128	; 0x80
 80031f4:	021b      	lsls	r3, r3, #8
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d15d      	bne.n	80032b6 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80031fa:	231f      	movs	r3, #31
 80031fc:	18fb      	adds	r3, r7, r3
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b08      	cmp	r3, #8
 8003202:	d015      	beq.n	8003230 <UART_SetConfig+0x134>
 8003204:	dc18      	bgt.n	8003238 <UART_SetConfig+0x13c>
 8003206:	2b04      	cmp	r3, #4
 8003208:	d00d      	beq.n	8003226 <UART_SetConfig+0x12a>
 800320a:	dc15      	bgt.n	8003238 <UART_SetConfig+0x13c>
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <UART_SetConfig+0x11a>
 8003210:	2b02      	cmp	r3, #2
 8003212:	d005      	beq.n	8003220 <UART_SetConfig+0x124>
 8003214:	e010      	b.n	8003238 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003216:	f7fe fe63 	bl	8001ee0 <HAL_RCC_GetPCLK1Freq>
 800321a:	0003      	movs	r3, r0
 800321c:	61bb      	str	r3, [r7, #24]
        break;
 800321e:	e012      	b.n	8003246 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003220:	4b55      	ldr	r3, [pc, #340]	; (8003378 <UART_SetConfig+0x27c>)
 8003222:	61bb      	str	r3, [r7, #24]
        break;
 8003224:	e00f      	b.n	8003246 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003226:	f7fe fded 	bl	8001e04 <HAL_RCC_GetSysClockFreq>
 800322a:	0003      	movs	r3, r0
 800322c:	61bb      	str	r3, [r7, #24]
        break;
 800322e:	e00a      	b.n	8003246 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003230:	2380      	movs	r3, #128	; 0x80
 8003232:	021b      	lsls	r3, r3, #8
 8003234:	61bb      	str	r3, [r7, #24]
        break;
 8003236:	e006      	b.n	8003246 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800323c:	231e      	movs	r3, #30
 800323e:	18fb      	adds	r3, r7, r3
 8003240:	2201      	movs	r2, #1
 8003242:	701a      	strb	r2, [r3, #0]
        break;
 8003244:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d100      	bne.n	800324e <UART_SetConfig+0x152>
 800324c:	e07b      	b.n	8003346 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	005a      	lsls	r2, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	085b      	lsrs	r3, r3, #1
 8003258:	18d2      	adds	r2, r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	0019      	movs	r1, r3
 8003260:	0010      	movs	r0, r2
 8003262:	f7fc ff5b 	bl	800011c <__udivsi3>
 8003266:	0003      	movs	r3, r0
 8003268:	b29b      	uxth	r3, r3
 800326a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	2b0f      	cmp	r3, #15
 8003270:	d91c      	bls.n	80032ac <UART_SetConfig+0x1b0>
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	2380      	movs	r3, #128	; 0x80
 8003276:	025b      	lsls	r3, r3, #9
 8003278:	429a      	cmp	r2, r3
 800327a:	d217      	bcs.n	80032ac <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	b29a      	uxth	r2, r3
 8003280:	200e      	movs	r0, #14
 8003282:	183b      	adds	r3, r7, r0
 8003284:	210f      	movs	r1, #15
 8003286:	438a      	bics	r2, r1
 8003288:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	085b      	lsrs	r3, r3, #1
 800328e:	b29b      	uxth	r3, r3
 8003290:	2207      	movs	r2, #7
 8003292:	4013      	ands	r3, r2
 8003294:	b299      	uxth	r1, r3
 8003296:	183b      	adds	r3, r7, r0
 8003298:	183a      	adds	r2, r7, r0
 800329a:	8812      	ldrh	r2, [r2, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	183a      	adds	r2, r7, r0
 80032a6:	8812      	ldrh	r2, [r2, #0]
 80032a8:	60da      	str	r2, [r3, #12]
 80032aa:	e04c      	b.n	8003346 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80032ac:	231e      	movs	r3, #30
 80032ae:	18fb      	adds	r3, r7, r3
 80032b0:	2201      	movs	r2, #1
 80032b2:	701a      	strb	r2, [r3, #0]
 80032b4:	e047      	b.n	8003346 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032b6:	231f      	movs	r3, #31
 80032b8:	18fb      	adds	r3, r7, r3
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d015      	beq.n	80032ec <UART_SetConfig+0x1f0>
 80032c0:	dc18      	bgt.n	80032f4 <UART_SetConfig+0x1f8>
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d00d      	beq.n	80032e2 <UART_SetConfig+0x1e6>
 80032c6:	dc15      	bgt.n	80032f4 <UART_SetConfig+0x1f8>
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d002      	beq.n	80032d2 <UART_SetConfig+0x1d6>
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d005      	beq.n	80032dc <UART_SetConfig+0x1e0>
 80032d0:	e010      	b.n	80032f4 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032d2:	f7fe fe05 	bl	8001ee0 <HAL_RCC_GetPCLK1Freq>
 80032d6:	0003      	movs	r3, r0
 80032d8:	61bb      	str	r3, [r7, #24]
        break;
 80032da:	e012      	b.n	8003302 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032dc:	4b26      	ldr	r3, [pc, #152]	; (8003378 <UART_SetConfig+0x27c>)
 80032de:	61bb      	str	r3, [r7, #24]
        break;
 80032e0:	e00f      	b.n	8003302 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032e2:	f7fe fd8f 	bl	8001e04 <HAL_RCC_GetSysClockFreq>
 80032e6:	0003      	movs	r3, r0
 80032e8:	61bb      	str	r3, [r7, #24]
        break;
 80032ea:	e00a      	b.n	8003302 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032ec:	2380      	movs	r3, #128	; 0x80
 80032ee:	021b      	lsls	r3, r3, #8
 80032f0:	61bb      	str	r3, [r7, #24]
        break;
 80032f2:	e006      	b.n	8003302 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032f8:	231e      	movs	r3, #30
 80032fa:	18fb      	adds	r3, r7, r3
 80032fc:	2201      	movs	r2, #1
 80032fe:	701a      	strb	r2, [r3, #0]
        break;
 8003300:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d01e      	beq.n	8003346 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	085a      	lsrs	r2, r3, #1
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	18d2      	adds	r2, r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	0019      	movs	r1, r3
 8003318:	0010      	movs	r0, r2
 800331a:	f7fc feff 	bl	800011c <__udivsi3>
 800331e:	0003      	movs	r3, r0
 8003320:	b29b      	uxth	r3, r3
 8003322:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	2b0f      	cmp	r3, #15
 8003328:	d909      	bls.n	800333e <UART_SetConfig+0x242>
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	2380      	movs	r3, #128	; 0x80
 800332e:	025b      	lsls	r3, r3, #9
 8003330:	429a      	cmp	r2, r3
 8003332:	d204      	bcs.n	800333e <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	60da      	str	r2, [r3, #12]
 800333c:	e003      	b.n	8003346 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800333e:	231e      	movs	r3, #30
 8003340:	18fb      	adds	r3, r7, r3
 8003342:	2201      	movs	r2, #1
 8003344:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003352:	231e      	movs	r3, #30
 8003354:	18fb      	adds	r3, r7, r3
 8003356:	781b      	ldrb	r3, [r3, #0]
}
 8003358:	0018      	movs	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	b008      	add	sp, #32
 800335e:	bd80      	pop	{r7, pc}
 8003360:	ffff69f3 	.word	0xffff69f3
 8003364:	ffffcfff 	.word	0xffffcfff
 8003368:	fffff4ff 	.word	0xfffff4ff
 800336c:	40013800 	.word	0x40013800
 8003370:	40021000 	.word	0x40021000
 8003374:	40004400 	.word	0x40004400
 8003378:	007a1200 	.word	0x007a1200

0800337c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	2201      	movs	r2, #1
 800338a:	4013      	ands	r3, r2
 800338c:	d00b      	beq.n	80033a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	4a4a      	ldr	r2, [pc, #296]	; (80034c0 <UART_AdvFeatureConfig+0x144>)
 8003396:	4013      	ands	r3, r2
 8003398:	0019      	movs	r1, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	2202      	movs	r2, #2
 80033ac:	4013      	ands	r3, r2
 80033ae:	d00b      	beq.n	80033c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	4a43      	ldr	r2, [pc, #268]	; (80034c4 <UART_AdvFeatureConfig+0x148>)
 80033b8:	4013      	ands	r3, r2
 80033ba:	0019      	movs	r1, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	2204      	movs	r2, #4
 80033ce:	4013      	ands	r3, r2
 80033d0:	d00b      	beq.n	80033ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	4a3b      	ldr	r2, [pc, #236]	; (80034c8 <UART_AdvFeatureConfig+0x14c>)
 80033da:	4013      	ands	r3, r2
 80033dc:	0019      	movs	r1, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	2208      	movs	r2, #8
 80033f0:	4013      	ands	r3, r2
 80033f2:	d00b      	beq.n	800340c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	4a34      	ldr	r2, [pc, #208]	; (80034cc <UART_AdvFeatureConfig+0x150>)
 80033fc:	4013      	ands	r3, r2
 80033fe:	0019      	movs	r1, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	2210      	movs	r2, #16
 8003412:	4013      	ands	r3, r2
 8003414:	d00b      	beq.n	800342e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	4a2c      	ldr	r2, [pc, #176]	; (80034d0 <UART_AdvFeatureConfig+0x154>)
 800341e:	4013      	ands	r3, r2
 8003420:	0019      	movs	r1, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	2220      	movs	r2, #32
 8003434:	4013      	ands	r3, r2
 8003436:	d00b      	beq.n	8003450 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	4a25      	ldr	r2, [pc, #148]	; (80034d4 <UART_AdvFeatureConfig+0x158>)
 8003440:	4013      	ands	r3, r2
 8003442:	0019      	movs	r1, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	2240      	movs	r2, #64	; 0x40
 8003456:	4013      	ands	r3, r2
 8003458:	d01d      	beq.n	8003496 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	4a1d      	ldr	r2, [pc, #116]	; (80034d8 <UART_AdvFeatureConfig+0x15c>)
 8003462:	4013      	ands	r3, r2
 8003464:	0019      	movs	r1, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003476:	2380      	movs	r3, #128	; 0x80
 8003478:	035b      	lsls	r3, r3, #13
 800347a:	429a      	cmp	r2, r3
 800347c:	d10b      	bne.n	8003496 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	4a15      	ldr	r2, [pc, #84]	; (80034dc <UART_AdvFeatureConfig+0x160>)
 8003486:	4013      	ands	r3, r2
 8003488:	0019      	movs	r1, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	2280      	movs	r2, #128	; 0x80
 800349c:	4013      	ands	r3, r2
 800349e:	d00b      	beq.n	80034b8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	4a0e      	ldr	r2, [pc, #56]	; (80034e0 <UART_AdvFeatureConfig+0x164>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	0019      	movs	r1, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	605a      	str	r2, [r3, #4]
  }
}
 80034b8:	46c0      	nop			; (mov r8, r8)
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b002      	add	sp, #8
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	fffdffff 	.word	0xfffdffff
 80034c4:	fffeffff 	.word	0xfffeffff
 80034c8:	fffbffff 	.word	0xfffbffff
 80034cc:	ffff7fff 	.word	0xffff7fff
 80034d0:	ffffefff 	.word	0xffffefff
 80034d4:	ffffdfff 	.word	0xffffdfff
 80034d8:	ffefffff 	.word	0xffefffff
 80034dc:	ff9fffff 	.word	0xff9fffff
 80034e0:	fff7ffff 	.word	0xfff7ffff

080034e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2280      	movs	r2, #128	; 0x80
 80034f0:	2100      	movs	r1, #0
 80034f2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034f4:	f7fd fc4e 	bl	8000d94 <HAL_GetTick>
 80034f8:	0003      	movs	r3, r0
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2208      	movs	r2, #8
 8003504:	4013      	ands	r3, r2
 8003506:	2b08      	cmp	r3, #8
 8003508:	d10c      	bne.n	8003524 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2280      	movs	r2, #128	; 0x80
 800350e:	0391      	lsls	r1, r2, #14
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	4a17      	ldr	r2, [pc, #92]	; (8003570 <UART_CheckIdleState+0x8c>)
 8003514:	9200      	str	r2, [sp, #0]
 8003516:	2200      	movs	r2, #0
 8003518:	f000 f82c 	bl	8003574 <UART_WaitOnFlagUntilTimeout>
 800351c:	1e03      	subs	r3, r0, #0
 800351e:	d001      	beq.n	8003524 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e021      	b.n	8003568 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2204      	movs	r2, #4
 800352c:	4013      	ands	r3, r2
 800352e:	2b04      	cmp	r3, #4
 8003530:	d10c      	bne.n	800354c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2280      	movs	r2, #128	; 0x80
 8003536:	03d1      	lsls	r1, r2, #15
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	4a0d      	ldr	r2, [pc, #52]	; (8003570 <UART_CheckIdleState+0x8c>)
 800353c:	9200      	str	r2, [sp, #0]
 800353e:	2200      	movs	r2, #0
 8003540:	f000 f818 	bl	8003574 <UART_WaitOnFlagUntilTimeout>
 8003544:	1e03      	subs	r3, r0, #0
 8003546:	d001      	beq.n	800354c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e00d      	b.n	8003568 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2220      	movs	r2, #32
 8003550:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2220      	movs	r2, #32
 8003556:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2274      	movs	r2, #116	; 0x74
 8003562:	2100      	movs	r1, #0
 8003564:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	0018      	movs	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	b004      	add	sp, #16
 800356e:	bd80      	pop	{r7, pc}
 8003570:	01ffffff 	.word	0x01ffffff

08003574 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b094      	sub	sp, #80	; 0x50
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	603b      	str	r3, [r7, #0]
 8003580:	1dfb      	adds	r3, r7, #7
 8003582:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003584:	e0a3      	b.n	80036ce <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003586:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003588:	3301      	adds	r3, #1
 800358a:	d100      	bne.n	800358e <UART_WaitOnFlagUntilTimeout+0x1a>
 800358c:	e09f      	b.n	80036ce <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800358e:	f7fd fc01 	bl	8000d94 <HAL_GetTick>
 8003592:	0002      	movs	r2, r0
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800359a:	429a      	cmp	r2, r3
 800359c:	d302      	bcc.n	80035a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800359e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d13d      	bne.n	8003620 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035a4:	f3ef 8310 	mrs	r3, PRIMASK
 80035a8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80035aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035ac:	647b      	str	r3, [r7, #68]	; 0x44
 80035ae:	2301      	movs	r3, #1
 80035b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b4:	f383 8810 	msr	PRIMASK, r3
}
 80035b8:	46c0      	nop			; (mov r8, r8)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	494c      	ldr	r1, [pc, #304]	; (80036f8 <UART_WaitOnFlagUntilTimeout+0x184>)
 80035c6:	400a      	ands	r2, r1
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035cc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d0:	f383 8810 	msr	PRIMASK, r3
}
 80035d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035d6:	f3ef 8310 	mrs	r3, PRIMASK
 80035da:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80035dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035de:	643b      	str	r3, [r7, #64]	; 0x40
 80035e0:	2301      	movs	r3, #1
 80035e2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e6:	f383 8810 	msr	PRIMASK, r3
}
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2101      	movs	r1, #1
 80035f8:	438a      	bics	r2, r1
 80035fa:	609a      	str	r2, [r3, #8]
 80035fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003602:	f383 8810 	msr	PRIMASK, r3
}
 8003606:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2220      	movs	r2, #32
 8003612:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2274      	movs	r2, #116	; 0x74
 8003618:	2100      	movs	r1, #0
 800361a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e067      	b.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2204      	movs	r2, #4
 8003628:	4013      	ands	r3, r2
 800362a:	d050      	beq.n	80036ce <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	69da      	ldr	r2, [r3, #28]
 8003632:	2380      	movs	r3, #128	; 0x80
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	401a      	ands	r2, r3
 8003638:	2380      	movs	r3, #128	; 0x80
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	429a      	cmp	r2, r3
 800363e:	d146      	bne.n	80036ce <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2280      	movs	r2, #128	; 0x80
 8003646:	0112      	lsls	r2, r2, #4
 8003648:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800364a:	f3ef 8310 	mrs	r3, PRIMASK
 800364e:	613b      	str	r3, [r7, #16]
  return(result);
 8003650:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003652:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003654:	2301      	movs	r3, #1
 8003656:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f383 8810 	msr	PRIMASK, r3
}
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4923      	ldr	r1, [pc, #140]	; (80036f8 <UART_WaitOnFlagUntilTimeout+0x184>)
 800366c:	400a      	ands	r2, r1
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003672:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	f383 8810 	msr	PRIMASK, r3
}
 800367a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800367c:	f3ef 8310 	mrs	r3, PRIMASK
 8003680:	61fb      	str	r3, [r7, #28]
  return(result);
 8003682:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003684:	64bb      	str	r3, [r7, #72]	; 0x48
 8003686:	2301      	movs	r3, #1
 8003688:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	f383 8810 	msr	PRIMASK, r3
}
 8003690:	46c0      	nop			; (mov r8, r8)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2101      	movs	r1, #1
 800369e:	438a      	bics	r2, r1
 80036a0:	609a      	str	r2, [r3, #8]
 80036a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036a4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	f383 8810 	msr	PRIMASK, r3
}
 80036ac:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2220      	movs	r2, #32
 80036b2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2220      	movs	r2, #32
 80036b8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2280      	movs	r2, #128	; 0x80
 80036be:	2120      	movs	r1, #32
 80036c0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2274      	movs	r2, #116	; 0x74
 80036c6:	2100      	movs	r1, #0
 80036c8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e010      	b.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	4013      	ands	r3, r2
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	425a      	negs	r2, r3
 80036de:	4153      	adcs	r3, r2
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	001a      	movs	r2, r3
 80036e4:	1dfb      	adds	r3, r7, #7
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d100      	bne.n	80036ee <UART_WaitOnFlagUntilTimeout+0x17a>
 80036ec:	e74b      	b.n	8003586 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	0018      	movs	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b014      	add	sp, #80	; 0x50
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	fffffe5f 	.word	0xfffffe5f

080036fc <__errno>:
 80036fc:	4b01      	ldr	r3, [pc, #4]	; (8003704 <__errno+0x8>)
 80036fe:	6818      	ldr	r0, [r3, #0]
 8003700:	4770      	bx	lr
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	2000060c 	.word	0x2000060c

08003708 <__libc_init_array>:
 8003708:	b570      	push	{r4, r5, r6, lr}
 800370a:	2600      	movs	r6, #0
 800370c:	4d0c      	ldr	r5, [pc, #48]	; (8003740 <__libc_init_array+0x38>)
 800370e:	4c0d      	ldr	r4, [pc, #52]	; (8003744 <__libc_init_array+0x3c>)
 8003710:	1b64      	subs	r4, r4, r5
 8003712:	10a4      	asrs	r4, r4, #2
 8003714:	42a6      	cmp	r6, r4
 8003716:	d109      	bne.n	800372c <__libc_init_array+0x24>
 8003718:	2600      	movs	r6, #0
 800371a:	f000 fc8b 	bl	8004034 <_init>
 800371e:	4d0a      	ldr	r5, [pc, #40]	; (8003748 <__libc_init_array+0x40>)
 8003720:	4c0a      	ldr	r4, [pc, #40]	; (800374c <__libc_init_array+0x44>)
 8003722:	1b64      	subs	r4, r4, r5
 8003724:	10a4      	asrs	r4, r4, #2
 8003726:	42a6      	cmp	r6, r4
 8003728:	d105      	bne.n	8003736 <__libc_init_array+0x2e>
 800372a:	bd70      	pop	{r4, r5, r6, pc}
 800372c:	00b3      	lsls	r3, r6, #2
 800372e:	58eb      	ldr	r3, [r5, r3]
 8003730:	4798      	blx	r3
 8003732:	3601      	adds	r6, #1
 8003734:	e7ee      	b.n	8003714 <__libc_init_array+0xc>
 8003736:	00b3      	lsls	r3, r6, #2
 8003738:	58eb      	ldr	r3, [r5, r3]
 800373a:	4798      	blx	r3
 800373c:	3601      	adds	r6, #1
 800373e:	e7f2      	b.n	8003726 <__libc_init_array+0x1e>
 8003740:	080040cc 	.word	0x080040cc
 8003744:	080040cc 	.word	0x080040cc
 8003748:	080040cc 	.word	0x080040cc
 800374c:	080040d0 	.word	0x080040d0

08003750 <memset>:
 8003750:	0003      	movs	r3, r0
 8003752:	1882      	adds	r2, r0, r2
 8003754:	4293      	cmp	r3, r2
 8003756:	d100      	bne.n	800375a <memset+0xa>
 8003758:	4770      	bx	lr
 800375a:	7019      	strb	r1, [r3, #0]
 800375c:	3301      	adds	r3, #1
 800375e:	e7f9      	b.n	8003754 <memset+0x4>

08003760 <siprintf>:
 8003760:	b40e      	push	{r1, r2, r3}
 8003762:	b500      	push	{lr}
 8003764:	490b      	ldr	r1, [pc, #44]	; (8003794 <siprintf+0x34>)
 8003766:	b09c      	sub	sp, #112	; 0x70
 8003768:	ab1d      	add	r3, sp, #116	; 0x74
 800376a:	9002      	str	r0, [sp, #8]
 800376c:	9006      	str	r0, [sp, #24]
 800376e:	9107      	str	r1, [sp, #28]
 8003770:	9104      	str	r1, [sp, #16]
 8003772:	4809      	ldr	r0, [pc, #36]	; (8003798 <siprintf+0x38>)
 8003774:	4909      	ldr	r1, [pc, #36]	; (800379c <siprintf+0x3c>)
 8003776:	cb04      	ldmia	r3!, {r2}
 8003778:	9105      	str	r1, [sp, #20]
 800377a:	6800      	ldr	r0, [r0, #0]
 800377c:	a902      	add	r1, sp, #8
 800377e:	9301      	str	r3, [sp, #4]
 8003780:	f000 f870 	bl	8003864 <_svfiprintf_r>
 8003784:	2300      	movs	r3, #0
 8003786:	9a02      	ldr	r2, [sp, #8]
 8003788:	7013      	strb	r3, [r2, #0]
 800378a:	b01c      	add	sp, #112	; 0x70
 800378c:	bc08      	pop	{r3}
 800378e:	b003      	add	sp, #12
 8003790:	4718      	bx	r3
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	7fffffff 	.word	0x7fffffff
 8003798:	2000060c 	.word	0x2000060c
 800379c:	ffff0208 	.word	0xffff0208

080037a0 <__ssputs_r>:
 80037a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037a2:	688e      	ldr	r6, [r1, #8]
 80037a4:	b085      	sub	sp, #20
 80037a6:	0007      	movs	r7, r0
 80037a8:	000c      	movs	r4, r1
 80037aa:	9203      	str	r2, [sp, #12]
 80037ac:	9301      	str	r3, [sp, #4]
 80037ae:	429e      	cmp	r6, r3
 80037b0:	d83c      	bhi.n	800382c <__ssputs_r+0x8c>
 80037b2:	2390      	movs	r3, #144	; 0x90
 80037b4:	898a      	ldrh	r2, [r1, #12]
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	421a      	tst	r2, r3
 80037ba:	d034      	beq.n	8003826 <__ssputs_r+0x86>
 80037bc:	6909      	ldr	r1, [r1, #16]
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	6960      	ldr	r0, [r4, #20]
 80037c2:	1a5b      	subs	r3, r3, r1
 80037c4:	9302      	str	r3, [sp, #8]
 80037c6:	2303      	movs	r3, #3
 80037c8:	4343      	muls	r3, r0
 80037ca:	0fdd      	lsrs	r5, r3, #31
 80037cc:	18ed      	adds	r5, r5, r3
 80037ce:	9b01      	ldr	r3, [sp, #4]
 80037d0:	9802      	ldr	r0, [sp, #8]
 80037d2:	3301      	adds	r3, #1
 80037d4:	181b      	adds	r3, r3, r0
 80037d6:	106d      	asrs	r5, r5, #1
 80037d8:	42ab      	cmp	r3, r5
 80037da:	d900      	bls.n	80037de <__ssputs_r+0x3e>
 80037dc:	001d      	movs	r5, r3
 80037de:	0553      	lsls	r3, r2, #21
 80037e0:	d532      	bpl.n	8003848 <__ssputs_r+0xa8>
 80037e2:	0029      	movs	r1, r5
 80037e4:	0038      	movs	r0, r7
 80037e6:	f000 fb53 	bl	8003e90 <_malloc_r>
 80037ea:	1e06      	subs	r6, r0, #0
 80037ec:	d109      	bne.n	8003802 <__ssputs_r+0x62>
 80037ee:	230c      	movs	r3, #12
 80037f0:	603b      	str	r3, [r7, #0]
 80037f2:	2340      	movs	r3, #64	; 0x40
 80037f4:	2001      	movs	r0, #1
 80037f6:	89a2      	ldrh	r2, [r4, #12]
 80037f8:	4240      	negs	r0, r0
 80037fa:	4313      	orrs	r3, r2
 80037fc:	81a3      	strh	r3, [r4, #12]
 80037fe:	b005      	add	sp, #20
 8003800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003802:	9a02      	ldr	r2, [sp, #8]
 8003804:	6921      	ldr	r1, [r4, #16]
 8003806:	f000 faba 	bl	8003d7e <memcpy>
 800380a:	89a3      	ldrh	r3, [r4, #12]
 800380c:	4a14      	ldr	r2, [pc, #80]	; (8003860 <__ssputs_r+0xc0>)
 800380e:	401a      	ands	r2, r3
 8003810:	2380      	movs	r3, #128	; 0x80
 8003812:	4313      	orrs	r3, r2
 8003814:	81a3      	strh	r3, [r4, #12]
 8003816:	9b02      	ldr	r3, [sp, #8]
 8003818:	6126      	str	r6, [r4, #16]
 800381a:	18f6      	adds	r6, r6, r3
 800381c:	6026      	str	r6, [r4, #0]
 800381e:	6165      	str	r5, [r4, #20]
 8003820:	9e01      	ldr	r6, [sp, #4]
 8003822:	1aed      	subs	r5, r5, r3
 8003824:	60a5      	str	r5, [r4, #8]
 8003826:	9b01      	ldr	r3, [sp, #4]
 8003828:	429e      	cmp	r6, r3
 800382a:	d900      	bls.n	800382e <__ssputs_r+0x8e>
 800382c:	9e01      	ldr	r6, [sp, #4]
 800382e:	0032      	movs	r2, r6
 8003830:	9903      	ldr	r1, [sp, #12]
 8003832:	6820      	ldr	r0, [r4, #0]
 8003834:	f000 faac 	bl	8003d90 <memmove>
 8003838:	68a3      	ldr	r3, [r4, #8]
 800383a:	2000      	movs	r0, #0
 800383c:	1b9b      	subs	r3, r3, r6
 800383e:	60a3      	str	r3, [r4, #8]
 8003840:	6823      	ldr	r3, [r4, #0]
 8003842:	199e      	adds	r6, r3, r6
 8003844:	6026      	str	r6, [r4, #0]
 8003846:	e7da      	b.n	80037fe <__ssputs_r+0x5e>
 8003848:	002a      	movs	r2, r5
 800384a:	0038      	movs	r0, r7
 800384c:	f000 fb96 	bl	8003f7c <_realloc_r>
 8003850:	1e06      	subs	r6, r0, #0
 8003852:	d1e0      	bne.n	8003816 <__ssputs_r+0x76>
 8003854:	0038      	movs	r0, r7
 8003856:	6921      	ldr	r1, [r4, #16]
 8003858:	f000 faae 	bl	8003db8 <_free_r>
 800385c:	e7c7      	b.n	80037ee <__ssputs_r+0x4e>
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	fffffb7f 	.word	0xfffffb7f

08003864 <_svfiprintf_r>:
 8003864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003866:	b0a1      	sub	sp, #132	; 0x84
 8003868:	9003      	str	r0, [sp, #12]
 800386a:	001d      	movs	r5, r3
 800386c:	898b      	ldrh	r3, [r1, #12]
 800386e:	000f      	movs	r7, r1
 8003870:	0016      	movs	r6, r2
 8003872:	061b      	lsls	r3, r3, #24
 8003874:	d511      	bpl.n	800389a <_svfiprintf_r+0x36>
 8003876:	690b      	ldr	r3, [r1, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10e      	bne.n	800389a <_svfiprintf_r+0x36>
 800387c:	2140      	movs	r1, #64	; 0x40
 800387e:	f000 fb07 	bl	8003e90 <_malloc_r>
 8003882:	6038      	str	r0, [r7, #0]
 8003884:	6138      	str	r0, [r7, #16]
 8003886:	2800      	cmp	r0, #0
 8003888:	d105      	bne.n	8003896 <_svfiprintf_r+0x32>
 800388a:	230c      	movs	r3, #12
 800388c:	9a03      	ldr	r2, [sp, #12]
 800388e:	3801      	subs	r0, #1
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	b021      	add	sp, #132	; 0x84
 8003894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003896:	2340      	movs	r3, #64	; 0x40
 8003898:	617b      	str	r3, [r7, #20]
 800389a:	2300      	movs	r3, #0
 800389c:	ac08      	add	r4, sp, #32
 800389e:	6163      	str	r3, [r4, #20]
 80038a0:	3320      	adds	r3, #32
 80038a2:	7663      	strb	r3, [r4, #25]
 80038a4:	3310      	adds	r3, #16
 80038a6:	76a3      	strb	r3, [r4, #26]
 80038a8:	9507      	str	r5, [sp, #28]
 80038aa:	0035      	movs	r5, r6
 80038ac:	782b      	ldrb	r3, [r5, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <_svfiprintf_r+0x52>
 80038b2:	2b25      	cmp	r3, #37	; 0x25
 80038b4:	d147      	bne.n	8003946 <_svfiprintf_r+0xe2>
 80038b6:	1bab      	subs	r3, r5, r6
 80038b8:	9305      	str	r3, [sp, #20]
 80038ba:	42b5      	cmp	r5, r6
 80038bc:	d00c      	beq.n	80038d8 <_svfiprintf_r+0x74>
 80038be:	0032      	movs	r2, r6
 80038c0:	0039      	movs	r1, r7
 80038c2:	9803      	ldr	r0, [sp, #12]
 80038c4:	f7ff ff6c 	bl	80037a0 <__ssputs_r>
 80038c8:	1c43      	adds	r3, r0, #1
 80038ca:	d100      	bne.n	80038ce <_svfiprintf_r+0x6a>
 80038cc:	e0ae      	b.n	8003a2c <_svfiprintf_r+0x1c8>
 80038ce:	6962      	ldr	r2, [r4, #20]
 80038d0:	9b05      	ldr	r3, [sp, #20]
 80038d2:	4694      	mov	ip, r2
 80038d4:	4463      	add	r3, ip
 80038d6:	6163      	str	r3, [r4, #20]
 80038d8:	782b      	ldrb	r3, [r5, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d100      	bne.n	80038e0 <_svfiprintf_r+0x7c>
 80038de:	e0a5      	b.n	8003a2c <_svfiprintf_r+0x1c8>
 80038e0:	2201      	movs	r2, #1
 80038e2:	2300      	movs	r3, #0
 80038e4:	4252      	negs	r2, r2
 80038e6:	6062      	str	r2, [r4, #4]
 80038e8:	a904      	add	r1, sp, #16
 80038ea:	3254      	adds	r2, #84	; 0x54
 80038ec:	1852      	adds	r2, r2, r1
 80038ee:	1c6e      	adds	r6, r5, #1
 80038f0:	6023      	str	r3, [r4, #0]
 80038f2:	60e3      	str	r3, [r4, #12]
 80038f4:	60a3      	str	r3, [r4, #8]
 80038f6:	7013      	strb	r3, [r2, #0]
 80038f8:	65a3      	str	r3, [r4, #88]	; 0x58
 80038fa:	2205      	movs	r2, #5
 80038fc:	7831      	ldrb	r1, [r6, #0]
 80038fe:	4854      	ldr	r0, [pc, #336]	; (8003a50 <_svfiprintf_r+0x1ec>)
 8003900:	f000 fa32 	bl	8003d68 <memchr>
 8003904:	1c75      	adds	r5, r6, #1
 8003906:	2800      	cmp	r0, #0
 8003908:	d11f      	bne.n	800394a <_svfiprintf_r+0xe6>
 800390a:	6822      	ldr	r2, [r4, #0]
 800390c:	06d3      	lsls	r3, r2, #27
 800390e:	d504      	bpl.n	800391a <_svfiprintf_r+0xb6>
 8003910:	2353      	movs	r3, #83	; 0x53
 8003912:	a904      	add	r1, sp, #16
 8003914:	185b      	adds	r3, r3, r1
 8003916:	2120      	movs	r1, #32
 8003918:	7019      	strb	r1, [r3, #0]
 800391a:	0713      	lsls	r3, r2, #28
 800391c:	d504      	bpl.n	8003928 <_svfiprintf_r+0xc4>
 800391e:	2353      	movs	r3, #83	; 0x53
 8003920:	a904      	add	r1, sp, #16
 8003922:	185b      	adds	r3, r3, r1
 8003924:	212b      	movs	r1, #43	; 0x2b
 8003926:	7019      	strb	r1, [r3, #0]
 8003928:	7833      	ldrb	r3, [r6, #0]
 800392a:	2b2a      	cmp	r3, #42	; 0x2a
 800392c:	d016      	beq.n	800395c <_svfiprintf_r+0xf8>
 800392e:	0035      	movs	r5, r6
 8003930:	2100      	movs	r1, #0
 8003932:	200a      	movs	r0, #10
 8003934:	68e3      	ldr	r3, [r4, #12]
 8003936:	782a      	ldrb	r2, [r5, #0]
 8003938:	1c6e      	adds	r6, r5, #1
 800393a:	3a30      	subs	r2, #48	; 0x30
 800393c:	2a09      	cmp	r2, #9
 800393e:	d94e      	bls.n	80039de <_svfiprintf_r+0x17a>
 8003940:	2900      	cmp	r1, #0
 8003942:	d111      	bne.n	8003968 <_svfiprintf_r+0x104>
 8003944:	e017      	b.n	8003976 <_svfiprintf_r+0x112>
 8003946:	3501      	adds	r5, #1
 8003948:	e7b0      	b.n	80038ac <_svfiprintf_r+0x48>
 800394a:	4b41      	ldr	r3, [pc, #260]	; (8003a50 <_svfiprintf_r+0x1ec>)
 800394c:	6822      	ldr	r2, [r4, #0]
 800394e:	1ac0      	subs	r0, r0, r3
 8003950:	2301      	movs	r3, #1
 8003952:	4083      	lsls	r3, r0
 8003954:	4313      	orrs	r3, r2
 8003956:	002e      	movs	r6, r5
 8003958:	6023      	str	r3, [r4, #0]
 800395a:	e7ce      	b.n	80038fa <_svfiprintf_r+0x96>
 800395c:	9b07      	ldr	r3, [sp, #28]
 800395e:	1d19      	adds	r1, r3, #4
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	9107      	str	r1, [sp, #28]
 8003964:	2b00      	cmp	r3, #0
 8003966:	db01      	blt.n	800396c <_svfiprintf_r+0x108>
 8003968:	930b      	str	r3, [sp, #44]	; 0x2c
 800396a:	e004      	b.n	8003976 <_svfiprintf_r+0x112>
 800396c:	425b      	negs	r3, r3
 800396e:	60e3      	str	r3, [r4, #12]
 8003970:	2302      	movs	r3, #2
 8003972:	4313      	orrs	r3, r2
 8003974:	6023      	str	r3, [r4, #0]
 8003976:	782b      	ldrb	r3, [r5, #0]
 8003978:	2b2e      	cmp	r3, #46	; 0x2e
 800397a:	d10a      	bne.n	8003992 <_svfiprintf_r+0x12e>
 800397c:	786b      	ldrb	r3, [r5, #1]
 800397e:	2b2a      	cmp	r3, #42	; 0x2a
 8003980:	d135      	bne.n	80039ee <_svfiprintf_r+0x18a>
 8003982:	9b07      	ldr	r3, [sp, #28]
 8003984:	3502      	adds	r5, #2
 8003986:	1d1a      	adds	r2, r3, #4
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	9207      	str	r2, [sp, #28]
 800398c:	2b00      	cmp	r3, #0
 800398e:	db2b      	blt.n	80039e8 <_svfiprintf_r+0x184>
 8003990:	9309      	str	r3, [sp, #36]	; 0x24
 8003992:	4e30      	ldr	r6, [pc, #192]	; (8003a54 <_svfiprintf_r+0x1f0>)
 8003994:	2203      	movs	r2, #3
 8003996:	0030      	movs	r0, r6
 8003998:	7829      	ldrb	r1, [r5, #0]
 800399a:	f000 f9e5 	bl	8003d68 <memchr>
 800399e:	2800      	cmp	r0, #0
 80039a0:	d006      	beq.n	80039b0 <_svfiprintf_r+0x14c>
 80039a2:	2340      	movs	r3, #64	; 0x40
 80039a4:	1b80      	subs	r0, r0, r6
 80039a6:	4083      	lsls	r3, r0
 80039a8:	6822      	ldr	r2, [r4, #0]
 80039aa:	3501      	adds	r5, #1
 80039ac:	4313      	orrs	r3, r2
 80039ae:	6023      	str	r3, [r4, #0]
 80039b0:	7829      	ldrb	r1, [r5, #0]
 80039b2:	2206      	movs	r2, #6
 80039b4:	4828      	ldr	r0, [pc, #160]	; (8003a58 <_svfiprintf_r+0x1f4>)
 80039b6:	1c6e      	adds	r6, r5, #1
 80039b8:	7621      	strb	r1, [r4, #24]
 80039ba:	f000 f9d5 	bl	8003d68 <memchr>
 80039be:	2800      	cmp	r0, #0
 80039c0:	d03c      	beq.n	8003a3c <_svfiprintf_r+0x1d8>
 80039c2:	4b26      	ldr	r3, [pc, #152]	; (8003a5c <_svfiprintf_r+0x1f8>)
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d125      	bne.n	8003a14 <_svfiprintf_r+0x1b0>
 80039c8:	2207      	movs	r2, #7
 80039ca:	9b07      	ldr	r3, [sp, #28]
 80039cc:	3307      	adds	r3, #7
 80039ce:	4393      	bics	r3, r2
 80039d0:	3308      	adds	r3, #8
 80039d2:	9307      	str	r3, [sp, #28]
 80039d4:	6963      	ldr	r3, [r4, #20]
 80039d6:	9a04      	ldr	r2, [sp, #16]
 80039d8:	189b      	adds	r3, r3, r2
 80039da:	6163      	str	r3, [r4, #20]
 80039dc:	e765      	b.n	80038aa <_svfiprintf_r+0x46>
 80039de:	4343      	muls	r3, r0
 80039e0:	0035      	movs	r5, r6
 80039e2:	2101      	movs	r1, #1
 80039e4:	189b      	adds	r3, r3, r2
 80039e6:	e7a6      	b.n	8003936 <_svfiprintf_r+0xd2>
 80039e8:	2301      	movs	r3, #1
 80039ea:	425b      	negs	r3, r3
 80039ec:	e7d0      	b.n	8003990 <_svfiprintf_r+0x12c>
 80039ee:	2300      	movs	r3, #0
 80039f0:	200a      	movs	r0, #10
 80039f2:	001a      	movs	r2, r3
 80039f4:	3501      	adds	r5, #1
 80039f6:	6063      	str	r3, [r4, #4]
 80039f8:	7829      	ldrb	r1, [r5, #0]
 80039fa:	1c6e      	adds	r6, r5, #1
 80039fc:	3930      	subs	r1, #48	; 0x30
 80039fe:	2909      	cmp	r1, #9
 8003a00:	d903      	bls.n	8003a0a <_svfiprintf_r+0x1a6>
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0c5      	beq.n	8003992 <_svfiprintf_r+0x12e>
 8003a06:	9209      	str	r2, [sp, #36]	; 0x24
 8003a08:	e7c3      	b.n	8003992 <_svfiprintf_r+0x12e>
 8003a0a:	4342      	muls	r2, r0
 8003a0c:	0035      	movs	r5, r6
 8003a0e:	2301      	movs	r3, #1
 8003a10:	1852      	adds	r2, r2, r1
 8003a12:	e7f1      	b.n	80039f8 <_svfiprintf_r+0x194>
 8003a14:	ab07      	add	r3, sp, #28
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	003a      	movs	r2, r7
 8003a1a:	0021      	movs	r1, r4
 8003a1c:	4b10      	ldr	r3, [pc, #64]	; (8003a60 <_svfiprintf_r+0x1fc>)
 8003a1e:	9803      	ldr	r0, [sp, #12]
 8003a20:	e000      	b.n	8003a24 <_svfiprintf_r+0x1c0>
 8003a22:	bf00      	nop
 8003a24:	9004      	str	r0, [sp, #16]
 8003a26:	9b04      	ldr	r3, [sp, #16]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	d1d3      	bne.n	80039d4 <_svfiprintf_r+0x170>
 8003a2c:	89bb      	ldrh	r3, [r7, #12]
 8003a2e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003a30:	065b      	lsls	r3, r3, #25
 8003a32:	d400      	bmi.n	8003a36 <_svfiprintf_r+0x1d2>
 8003a34:	e72d      	b.n	8003892 <_svfiprintf_r+0x2e>
 8003a36:	2001      	movs	r0, #1
 8003a38:	4240      	negs	r0, r0
 8003a3a:	e72a      	b.n	8003892 <_svfiprintf_r+0x2e>
 8003a3c:	ab07      	add	r3, sp, #28
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	003a      	movs	r2, r7
 8003a42:	0021      	movs	r1, r4
 8003a44:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <_svfiprintf_r+0x1fc>)
 8003a46:	9803      	ldr	r0, [sp, #12]
 8003a48:	f000 f87c 	bl	8003b44 <_printf_i>
 8003a4c:	e7ea      	b.n	8003a24 <_svfiprintf_r+0x1c0>
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	08004098 	.word	0x08004098
 8003a54:	0800409e 	.word	0x0800409e
 8003a58:	080040a2 	.word	0x080040a2
 8003a5c:	00000000 	.word	0x00000000
 8003a60:	080037a1 	.word	0x080037a1

08003a64 <_printf_common>:
 8003a64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a66:	0015      	movs	r5, r2
 8003a68:	9301      	str	r3, [sp, #4]
 8003a6a:	688a      	ldr	r2, [r1, #8]
 8003a6c:	690b      	ldr	r3, [r1, #16]
 8003a6e:	000c      	movs	r4, r1
 8003a70:	9000      	str	r0, [sp, #0]
 8003a72:	4293      	cmp	r3, r2
 8003a74:	da00      	bge.n	8003a78 <_printf_common+0x14>
 8003a76:	0013      	movs	r3, r2
 8003a78:	0022      	movs	r2, r4
 8003a7a:	602b      	str	r3, [r5, #0]
 8003a7c:	3243      	adds	r2, #67	; 0x43
 8003a7e:	7812      	ldrb	r2, [r2, #0]
 8003a80:	2a00      	cmp	r2, #0
 8003a82:	d001      	beq.n	8003a88 <_printf_common+0x24>
 8003a84:	3301      	adds	r3, #1
 8003a86:	602b      	str	r3, [r5, #0]
 8003a88:	6823      	ldr	r3, [r4, #0]
 8003a8a:	069b      	lsls	r3, r3, #26
 8003a8c:	d502      	bpl.n	8003a94 <_printf_common+0x30>
 8003a8e:	682b      	ldr	r3, [r5, #0]
 8003a90:	3302      	adds	r3, #2
 8003a92:	602b      	str	r3, [r5, #0]
 8003a94:	6822      	ldr	r2, [r4, #0]
 8003a96:	2306      	movs	r3, #6
 8003a98:	0017      	movs	r7, r2
 8003a9a:	401f      	ands	r7, r3
 8003a9c:	421a      	tst	r2, r3
 8003a9e:	d027      	beq.n	8003af0 <_printf_common+0x8c>
 8003aa0:	0023      	movs	r3, r4
 8003aa2:	3343      	adds	r3, #67	; 0x43
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	1e5a      	subs	r2, r3, #1
 8003aa8:	4193      	sbcs	r3, r2
 8003aaa:	6822      	ldr	r2, [r4, #0]
 8003aac:	0692      	lsls	r2, r2, #26
 8003aae:	d430      	bmi.n	8003b12 <_printf_common+0xae>
 8003ab0:	0022      	movs	r2, r4
 8003ab2:	9901      	ldr	r1, [sp, #4]
 8003ab4:	9800      	ldr	r0, [sp, #0]
 8003ab6:	9e08      	ldr	r6, [sp, #32]
 8003ab8:	3243      	adds	r2, #67	; 0x43
 8003aba:	47b0      	blx	r6
 8003abc:	1c43      	adds	r3, r0, #1
 8003abe:	d025      	beq.n	8003b0c <_printf_common+0xa8>
 8003ac0:	2306      	movs	r3, #6
 8003ac2:	6820      	ldr	r0, [r4, #0]
 8003ac4:	682a      	ldr	r2, [r5, #0]
 8003ac6:	68e1      	ldr	r1, [r4, #12]
 8003ac8:	2500      	movs	r5, #0
 8003aca:	4003      	ands	r3, r0
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d103      	bne.n	8003ad8 <_printf_common+0x74>
 8003ad0:	1a8d      	subs	r5, r1, r2
 8003ad2:	43eb      	mvns	r3, r5
 8003ad4:	17db      	asrs	r3, r3, #31
 8003ad6:	401d      	ands	r5, r3
 8003ad8:	68a3      	ldr	r3, [r4, #8]
 8003ada:	6922      	ldr	r2, [r4, #16]
 8003adc:	4293      	cmp	r3, r2
 8003ade:	dd01      	ble.n	8003ae4 <_printf_common+0x80>
 8003ae0:	1a9b      	subs	r3, r3, r2
 8003ae2:	18ed      	adds	r5, r5, r3
 8003ae4:	2700      	movs	r7, #0
 8003ae6:	42bd      	cmp	r5, r7
 8003ae8:	d120      	bne.n	8003b2c <_printf_common+0xc8>
 8003aea:	2000      	movs	r0, #0
 8003aec:	e010      	b.n	8003b10 <_printf_common+0xac>
 8003aee:	3701      	adds	r7, #1
 8003af0:	68e3      	ldr	r3, [r4, #12]
 8003af2:	682a      	ldr	r2, [r5, #0]
 8003af4:	1a9b      	subs	r3, r3, r2
 8003af6:	42bb      	cmp	r3, r7
 8003af8:	ddd2      	ble.n	8003aa0 <_printf_common+0x3c>
 8003afa:	0022      	movs	r2, r4
 8003afc:	2301      	movs	r3, #1
 8003afe:	9901      	ldr	r1, [sp, #4]
 8003b00:	9800      	ldr	r0, [sp, #0]
 8003b02:	9e08      	ldr	r6, [sp, #32]
 8003b04:	3219      	adds	r2, #25
 8003b06:	47b0      	blx	r6
 8003b08:	1c43      	adds	r3, r0, #1
 8003b0a:	d1f0      	bne.n	8003aee <_printf_common+0x8a>
 8003b0c:	2001      	movs	r0, #1
 8003b0e:	4240      	negs	r0, r0
 8003b10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b12:	2030      	movs	r0, #48	; 0x30
 8003b14:	18e1      	adds	r1, r4, r3
 8003b16:	3143      	adds	r1, #67	; 0x43
 8003b18:	7008      	strb	r0, [r1, #0]
 8003b1a:	0021      	movs	r1, r4
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	3145      	adds	r1, #69	; 0x45
 8003b20:	7809      	ldrb	r1, [r1, #0]
 8003b22:	18a2      	adds	r2, r4, r2
 8003b24:	3243      	adds	r2, #67	; 0x43
 8003b26:	3302      	adds	r3, #2
 8003b28:	7011      	strb	r1, [r2, #0]
 8003b2a:	e7c1      	b.n	8003ab0 <_printf_common+0x4c>
 8003b2c:	0022      	movs	r2, r4
 8003b2e:	2301      	movs	r3, #1
 8003b30:	9901      	ldr	r1, [sp, #4]
 8003b32:	9800      	ldr	r0, [sp, #0]
 8003b34:	9e08      	ldr	r6, [sp, #32]
 8003b36:	321a      	adds	r2, #26
 8003b38:	47b0      	blx	r6
 8003b3a:	1c43      	adds	r3, r0, #1
 8003b3c:	d0e6      	beq.n	8003b0c <_printf_common+0xa8>
 8003b3e:	3701      	adds	r7, #1
 8003b40:	e7d1      	b.n	8003ae6 <_printf_common+0x82>
	...

08003b44 <_printf_i>:
 8003b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b46:	b08b      	sub	sp, #44	; 0x2c
 8003b48:	9206      	str	r2, [sp, #24]
 8003b4a:	000a      	movs	r2, r1
 8003b4c:	3243      	adds	r2, #67	; 0x43
 8003b4e:	9307      	str	r3, [sp, #28]
 8003b50:	9005      	str	r0, [sp, #20]
 8003b52:	9204      	str	r2, [sp, #16]
 8003b54:	7e0a      	ldrb	r2, [r1, #24]
 8003b56:	000c      	movs	r4, r1
 8003b58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003b5a:	2a78      	cmp	r2, #120	; 0x78
 8003b5c:	d807      	bhi.n	8003b6e <_printf_i+0x2a>
 8003b5e:	2a62      	cmp	r2, #98	; 0x62
 8003b60:	d809      	bhi.n	8003b76 <_printf_i+0x32>
 8003b62:	2a00      	cmp	r2, #0
 8003b64:	d100      	bne.n	8003b68 <_printf_i+0x24>
 8003b66:	e0c1      	b.n	8003cec <_printf_i+0x1a8>
 8003b68:	2a58      	cmp	r2, #88	; 0x58
 8003b6a:	d100      	bne.n	8003b6e <_printf_i+0x2a>
 8003b6c:	e08c      	b.n	8003c88 <_printf_i+0x144>
 8003b6e:	0026      	movs	r6, r4
 8003b70:	3642      	adds	r6, #66	; 0x42
 8003b72:	7032      	strb	r2, [r6, #0]
 8003b74:	e022      	b.n	8003bbc <_printf_i+0x78>
 8003b76:	0010      	movs	r0, r2
 8003b78:	3863      	subs	r0, #99	; 0x63
 8003b7a:	2815      	cmp	r0, #21
 8003b7c:	d8f7      	bhi.n	8003b6e <_printf_i+0x2a>
 8003b7e:	f7fc fac3 	bl	8000108 <__gnu_thumb1_case_shi>
 8003b82:	0016      	.short	0x0016
 8003b84:	fff6001f 	.word	0xfff6001f
 8003b88:	fff6fff6 	.word	0xfff6fff6
 8003b8c:	001ffff6 	.word	0x001ffff6
 8003b90:	fff6fff6 	.word	0xfff6fff6
 8003b94:	fff6fff6 	.word	0xfff6fff6
 8003b98:	003600a8 	.word	0x003600a8
 8003b9c:	fff6009a 	.word	0xfff6009a
 8003ba0:	00b9fff6 	.word	0x00b9fff6
 8003ba4:	0036fff6 	.word	0x0036fff6
 8003ba8:	fff6fff6 	.word	0xfff6fff6
 8003bac:	009e      	.short	0x009e
 8003bae:	0026      	movs	r6, r4
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	3642      	adds	r6, #66	; 0x42
 8003bb4:	1d11      	adds	r1, r2, #4
 8003bb6:	6019      	str	r1, [r3, #0]
 8003bb8:	6813      	ldr	r3, [r2, #0]
 8003bba:	7033      	strb	r3, [r6, #0]
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e0a7      	b.n	8003d10 <_printf_i+0x1cc>
 8003bc0:	6808      	ldr	r0, [r1, #0]
 8003bc2:	6819      	ldr	r1, [r3, #0]
 8003bc4:	1d0a      	adds	r2, r1, #4
 8003bc6:	0605      	lsls	r5, r0, #24
 8003bc8:	d50b      	bpl.n	8003be2 <_printf_i+0x9e>
 8003bca:	680d      	ldr	r5, [r1, #0]
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	2d00      	cmp	r5, #0
 8003bd0:	da03      	bge.n	8003bda <_printf_i+0x96>
 8003bd2:	232d      	movs	r3, #45	; 0x2d
 8003bd4:	9a04      	ldr	r2, [sp, #16]
 8003bd6:	426d      	negs	r5, r5
 8003bd8:	7013      	strb	r3, [r2, #0]
 8003bda:	4b61      	ldr	r3, [pc, #388]	; (8003d60 <_printf_i+0x21c>)
 8003bdc:	270a      	movs	r7, #10
 8003bde:	9303      	str	r3, [sp, #12]
 8003be0:	e01b      	b.n	8003c1a <_printf_i+0xd6>
 8003be2:	680d      	ldr	r5, [r1, #0]
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	0641      	lsls	r1, r0, #25
 8003be8:	d5f1      	bpl.n	8003bce <_printf_i+0x8a>
 8003bea:	b22d      	sxth	r5, r5
 8003bec:	e7ef      	b.n	8003bce <_printf_i+0x8a>
 8003bee:	680d      	ldr	r5, [r1, #0]
 8003bf0:	6819      	ldr	r1, [r3, #0]
 8003bf2:	1d08      	adds	r0, r1, #4
 8003bf4:	6018      	str	r0, [r3, #0]
 8003bf6:	062e      	lsls	r6, r5, #24
 8003bf8:	d501      	bpl.n	8003bfe <_printf_i+0xba>
 8003bfa:	680d      	ldr	r5, [r1, #0]
 8003bfc:	e003      	b.n	8003c06 <_printf_i+0xc2>
 8003bfe:	066d      	lsls	r5, r5, #25
 8003c00:	d5fb      	bpl.n	8003bfa <_printf_i+0xb6>
 8003c02:	680d      	ldr	r5, [r1, #0]
 8003c04:	b2ad      	uxth	r5, r5
 8003c06:	4b56      	ldr	r3, [pc, #344]	; (8003d60 <_printf_i+0x21c>)
 8003c08:	2708      	movs	r7, #8
 8003c0a:	9303      	str	r3, [sp, #12]
 8003c0c:	2a6f      	cmp	r2, #111	; 0x6f
 8003c0e:	d000      	beq.n	8003c12 <_printf_i+0xce>
 8003c10:	3702      	adds	r7, #2
 8003c12:	0023      	movs	r3, r4
 8003c14:	2200      	movs	r2, #0
 8003c16:	3343      	adds	r3, #67	; 0x43
 8003c18:	701a      	strb	r2, [r3, #0]
 8003c1a:	6863      	ldr	r3, [r4, #4]
 8003c1c:	60a3      	str	r3, [r4, #8]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	db03      	blt.n	8003c2a <_printf_i+0xe6>
 8003c22:	2204      	movs	r2, #4
 8003c24:	6821      	ldr	r1, [r4, #0]
 8003c26:	4391      	bics	r1, r2
 8003c28:	6021      	str	r1, [r4, #0]
 8003c2a:	2d00      	cmp	r5, #0
 8003c2c:	d102      	bne.n	8003c34 <_printf_i+0xf0>
 8003c2e:	9e04      	ldr	r6, [sp, #16]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00c      	beq.n	8003c4e <_printf_i+0x10a>
 8003c34:	9e04      	ldr	r6, [sp, #16]
 8003c36:	0028      	movs	r0, r5
 8003c38:	0039      	movs	r1, r7
 8003c3a:	f7fc faf5 	bl	8000228 <__aeabi_uidivmod>
 8003c3e:	9b03      	ldr	r3, [sp, #12]
 8003c40:	3e01      	subs	r6, #1
 8003c42:	5c5b      	ldrb	r3, [r3, r1]
 8003c44:	7033      	strb	r3, [r6, #0]
 8003c46:	002b      	movs	r3, r5
 8003c48:	0005      	movs	r5, r0
 8003c4a:	429f      	cmp	r7, r3
 8003c4c:	d9f3      	bls.n	8003c36 <_printf_i+0xf2>
 8003c4e:	2f08      	cmp	r7, #8
 8003c50:	d109      	bne.n	8003c66 <_printf_i+0x122>
 8003c52:	6823      	ldr	r3, [r4, #0]
 8003c54:	07db      	lsls	r3, r3, #31
 8003c56:	d506      	bpl.n	8003c66 <_printf_i+0x122>
 8003c58:	6863      	ldr	r3, [r4, #4]
 8003c5a:	6922      	ldr	r2, [r4, #16]
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	dc02      	bgt.n	8003c66 <_printf_i+0x122>
 8003c60:	2330      	movs	r3, #48	; 0x30
 8003c62:	3e01      	subs	r6, #1
 8003c64:	7033      	strb	r3, [r6, #0]
 8003c66:	9b04      	ldr	r3, [sp, #16]
 8003c68:	1b9b      	subs	r3, r3, r6
 8003c6a:	6123      	str	r3, [r4, #16]
 8003c6c:	9b07      	ldr	r3, [sp, #28]
 8003c6e:	0021      	movs	r1, r4
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	9805      	ldr	r0, [sp, #20]
 8003c74:	9b06      	ldr	r3, [sp, #24]
 8003c76:	aa09      	add	r2, sp, #36	; 0x24
 8003c78:	f7ff fef4 	bl	8003a64 <_printf_common>
 8003c7c:	1c43      	adds	r3, r0, #1
 8003c7e:	d14c      	bne.n	8003d1a <_printf_i+0x1d6>
 8003c80:	2001      	movs	r0, #1
 8003c82:	4240      	negs	r0, r0
 8003c84:	b00b      	add	sp, #44	; 0x2c
 8003c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c88:	3145      	adds	r1, #69	; 0x45
 8003c8a:	700a      	strb	r2, [r1, #0]
 8003c8c:	4a34      	ldr	r2, [pc, #208]	; (8003d60 <_printf_i+0x21c>)
 8003c8e:	9203      	str	r2, [sp, #12]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	6821      	ldr	r1, [r4, #0]
 8003c94:	ca20      	ldmia	r2!, {r5}
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	0608      	lsls	r0, r1, #24
 8003c9a:	d516      	bpl.n	8003cca <_printf_i+0x186>
 8003c9c:	07cb      	lsls	r3, r1, #31
 8003c9e:	d502      	bpl.n	8003ca6 <_printf_i+0x162>
 8003ca0:	2320      	movs	r3, #32
 8003ca2:	4319      	orrs	r1, r3
 8003ca4:	6021      	str	r1, [r4, #0]
 8003ca6:	2710      	movs	r7, #16
 8003ca8:	2d00      	cmp	r5, #0
 8003caa:	d1b2      	bne.n	8003c12 <_printf_i+0xce>
 8003cac:	2320      	movs	r3, #32
 8003cae:	6822      	ldr	r2, [r4, #0]
 8003cb0:	439a      	bics	r2, r3
 8003cb2:	6022      	str	r2, [r4, #0]
 8003cb4:	e7ad      	b.n	8003c12 <_printf_i+0xce>
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	6809      	ldr	r1, [r1, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	6022      	str	r2, [r4, #0]
 8003cbe:	0022      	movs	r2, r4
 8003cc0:	2178      	movs	r1, #120	; 0x78
 8003cc2:	3245      	adds	r2, #69	; 0x45
 8003cc4:	7011      	strb	r1, [r2, #0]
 8003cc6:	4a27      	ldr	r2, [pc, #156]	; (8003d64 <_printf_i+0x220>)
 8003cc8:	e7e1      	b.n	8003c8e <_printf_i+0x14a>
 8003cca:	0648      	lsls	r0, r1, #25
 8003ccc:	d5e6      	bpl.n	8003c9c <_printf_i+0x158>
 8003cce:	b2ad      	uxth	r5, r5
 8003cd0:	e7e4      	b.n	8003c9c <_printf_i+0x158>
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	680d      	ldr	r5, [r1, #0]
 8003cd6:	1d10      	adds	r0, r2, #4
 8003cd8:	6949      	ldr	r1, [r1, #20]
 8003cda:	6018      	str	r0, [r3, #0]
 8003cdc:	6813      	ldr	r3, [r2, #0]
 8003cde:	062e      	lsls	r6, r5, #24
 8003ce0:	d501      	bpl.n	8003ce6 <_printf_i+0x1a2>
 8003ce2:	6019      	str	r1, [r3, #0]
 8003ce4:	e002      	b.n	8003cec <_printf_i+0x1a8>
 8003ce6:	066d      	lsls	r5, r5, #25
 8003ce8:	d5fb      	bpl.n	8003ce2 <_printf_i+0x19e>
 8003cea:	8019      	strh	r1, [r3, #0]
 8003cec:	2300      	movs	r3, #0
 8003cee:	9e04      	ldr	r6, [sp, #16]
 8003cf0:	6123      	str	r3, [r4, #16]
 8003cf2:	e7bb      	b.n	8003c6c <_printf_i+0x128>
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	1d11      	adds	r1, r2, #4
 8003cf8:	6019      	str	r1, [r3, #0]
 8003cfa:	6816      	ldr	r6, [r2, #0]
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	0030      	movs	r0, r6
 8003d00:	6862      	ldr	r2, [r4, #4]
 8003d02:	f000 f831 	bl	8003d68 <memchr>
 8003d06:	2800      	cmp	r0, #0
 8003d08:	d001      	beq.n	8003d0e <_printf_i+0x1ca>
 8003d0a:	1b80      	subs	r0, r0, r6
 8003d0c:	6060      	str	r0, [r4, #4]
 8003d0e:	6863      	ldr	r3, [r4, #4]
 8003d10:	6123      	str	r3, [r4, #16]
 8003d12:	2300      	movs	r3, #0
 8003d14:	9a04      	ldr	r2, [sp, #16]
 8003d16:	7013      	strb	r3, [r2, #0]
 8003d18:	e7a8      	b.n	8003c6c <_printf_i+0x128>
 8003d1a:	6923      	ldr	r3, [r4, #16]
 8003d1c:	0032      	movs	r2, r6
 8003d1e:	9906      	ldr	r1, [sp, #24]
 8003d20:	9805      	ldr	r0, [sp, #20]
 8003d22:	9d07      	ldr	r5, [sp, #28]
 8003d24:	47a8      	blx	r5
 8003d26:	1c43      	adds	r3, r0, #1
 8003d28:	d0aa      	beq.n	8003c80 <_printf_i+0x13c>
 8003d2a:	6823      	ldr	r3, [r4, #0]
 8003d2c:	079b      	lsls	r3, r3, #30
 8003d2e:	d415      	bmi.n	8003d5c <_printf_i+0x218>
 8003d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d32:	68e0      	ldr	r0, [r4, #12]
 8003d34:	4298      	cmp	r0, r3
 8003d36:	daa5      	bge.n	8003c84 <_printf_i+0x140>
 8003d38:	0018      	movs	r0, r3
 8003d3a:	e7a3      	b.n	8003c84 <_printf_i+0x140>
 8003d3c:	0022      	movs	r2, r4
 8003d3e:	2301      	movs	r3, #1
 8003d40:	9906      	ldr	r1, [sp, #24]
 8003d42:	9805      	ldr	r0, [sp, #20]
 8003d44:	9e07      	ldr	r6, [sp, #28]
 8003d46:	3219      	adds	r2, #25
 8003d48:	47b0      	blx	r6
 8003d4a:	1c43      	adds	r3, r0, #1
 8003d4c:	d098      	beq.n	8003c80 <_printf_i+0x13c>
 8003d4e:	3501      	adds	r5, #1
 8003d50:	68e3      	ldr	r3, [r4, #12]
 8003d52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d54:	1a9b      	subs	r3, r3, r2
 8003d56:	42ab      	cmp	r3, r5
 8003d58:	dcf0      	bgt.n	8003d3c <_printf_i+0x1f8>
 8003d5a:	e7e9      	b.n	8003d30 <_printf_i+0x1ec>
 8003d5c:	2500      	movs	r5, #0
 8003d5e:	e7f7      	b.n	8003d50 <_printf_i+0x20c>
 8003d60:	080040a9 	.word	0x080040a9
 8003d64:	080040ba 	.word	0x080040ba

08003d68 <memchr>:
 8003d68:	b2c9      	uxtb	r1, r1
 8003d6a:	1882      	adds	r2, r0, r2
 8003d6c:	4290      	cmp	r0, r2
 8003d6e:	d101      	bne.n	8003d74 <memchr+0xc>
 8003d70:	2000      	movs	r0, #0
 8003d72:	4770      	bx	lr
 8003d74:	7803      	ldrb	r3, [r0, #0]
 8003d76:	428b      	cmp	r3, r1
 8003d78:	d0fb      	beq.n	8003d72 <memchr+0xa>
 8003d7a:	3001      	adds	r0, #1
 8003d7c:	e7f6      	b.n	8003d6c <memchr+0x4>

08003d7e <memcpy>:
 8003d7e:	2300      	movs	r3, #0
 8003d80:	b510      	push	{r4, lr}
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d100      	bne.n	8003d88 <memcpy+0xa>
 8003d86:	bd10      	pop	{r4, pc}
 8003d88:	5ccc      	ldrb	r4, [r1, r3]
 8003d8a:	54c4      	strb	r4, [r0, r3]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	e7f8      	b.n	8003d82 <memcpy+0x4>

08003d90 <memmove>:
 8003d90:	b510      	push	{r4, lr}
 8003d92:	4288      	cmp	r0, r1
 8003d94:	d902      	bls.n	8003d9c <memmove+0xc>
 8003d96:	188b      	adds	r3, r1, r2
 8003d98:	4298      	cmp	r0, r3
 8003d9a:	d303      	bcc.n	8003da4 <memmove+0x14>
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	e007      	b.n	8003db0 <memmove+0x20>
 8003da0:	5c8b      	ldrb	r3, [r1, r2]
 8003da2:	5483      	strb	r3, [r0, r2]
 8003da4:	3a01      	subs	r2, #1
 8003da6:	d2fb      	bcs.n	8003da0 <memmove+0x10>
 8003da8:	bd10      	pop	{r4, pc}
 8003daa:	5ccc      	ldrb	r4, [r1, r3]
 8003dac:	54c4      	strb	r4, [r0, r3]
 8003dae:	3301      	adds	r3, #1
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d1fa      	bne.n	8003daa <memmove+0x1a>
 8003db4:	e7f8      	b.n	8003da8 <memmove+0x18>
	...

08003db8 <_free_r>:
 8003db8:	b570      	push	{r4, r5, r6, lr}
 8003dba:	0005      	movs	r5, r0
 8003dbc:	2900      	cmp	r1, #0
 8003dbe:	d010      	beq.n	8003de2 <_free_r+0x2a>
 8003dc0:	1f0c      	subs	r4, r1, #4
 8003dc2:	6823      	ldr	r3, [r4, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	da00      	bge.n	8003dca <_free_r+0x12>
 8003dc8:	18e4      	adds	r4, r4, r3
 8003dca:	0028      	movs	r0, r5
 8003dcc:	f000 f918 	bl	8004000 <__malloc_lock>
 8003dd0:	4a1d      	ldr	r2, [pc, #116]	; (8003e48 <_free_r+0x90>)
 8003dd2:	6813      	ldr	r3, [r2, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d105      	bne.n	8003de4 <_free_r+0x2c>
 8003dd8:	6063      	str	r3, [r4, #4]
 8003dda:	6014      	str	r4, [r2, #0]
 8003ddc:	0028      	movs	r0, r5
 8003dde:	f000 f917 	bl	8004010 <__malloc_unlock>
 8003de2:	bd70      	pop	{r4, r5, r6, pc}
 8003de4:	42a3      	cmp	r3, r4
 8003de6:	d908      	bls.n	8003dfa <_free_r+0x42>
 8003de8:	6821      	ldr	r1, [r4, #0]
 8003dea:	1860      	adds	r0, r4, r1
 8003dec:	4283      	cmp	r3, r0
 8003dee:	d1f3      	bne.n	8003dd8 <_free_r+0x20>
 8003df0:	6818      	ldr	r0, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	1841      	adds	r1, r0, r1
 8003df6:	6021      	str	r1, [r4, #0]
 8003df8:	e7ee      	b.n	8003dd8 <_free_r+0x20>
 8003dfa:	001a      	movs	r2, r3
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <_free_r+0x4e>
 8003e02:	42a3      	cmp	r3, r4
 8003e04:	d9f9      	bls.n	8003dfa <_free_r+0x42>
 8003e06:	6811      	ldr	r1, [r2, #0]
 8003e08:	1850      	adds	r0, r2, r1
 8003e0a:	42a0      	cmp	r0, r4
 8003e0c:	d10b      	bne.n	8003e26 <_free_r+0x6e>
 8003e0e:	6820      	ldr	r0, [r4, #0]
 8003e10:	1809      	adds	r1, r1, r0
 8003e12:	1850      	adds	r0, r2, r1
 8003e14:	6011      	str	r1, [r2, #0]
 8003e16:	4283      	cmp	r3, r0
 8003e18:	d1e0      	bne.n	8003ddc <_free_r+0x24>
 8003e1a:	6818      	ldr	r0, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	1841      	adds	r1, r0, r1
 8003e20:	6011      	str	r1, [r2, #0]
 8003e22:	6053      	str	r3, [r2, #4]
 8003e24:	e7da      	b.n	8003ddc <_free_r+0x24>
 8003e26:	42a0      	cmp	r0, r4
 8003e28:	d902      	bls.n	8003e30 <_free_r+0x78>
 8003e2a:	230c      	movs	r3, #12
 8003e2c:	602b      	str	r3, [r5, #0]
 8003e2e:	e7d5      	b.n	8003ddc <_free_r+0x24>
 8003e30:	6821      	ldr	r1, [r4, #0]
 8003e32:	1860      	adds	r0, r4, r1
 8003e34:	4283      	cmp	r3, r0
 8003e36:	d103      	bne.n	8003e40 <_free_r+0x88>
 8003e38:	6818      	ldr	r0, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	1841      	adds	r1, r0, r1
 8003e3e:	6021      	str	r1, [r4, #0]
 8003e40:	6063      	str	r3, [r4, #4]
 8003e42:	6054      	str	r4, [r2, #4]
 8003e44:	e7ca      	b.n	8003ddc <_free_r+0x24>
 8003e46:	46c0      	nop			; (mov r8, r8)
 8003e48:	20000808 	.word	0x20000808

08003e4c <sbrk_aligned>:
 8003e4c:	b570      	push	{r4, r5, r6, lr}
 8003e4e:	4e0f      	ldr	r6, [pc, #60]	; (8003e8c <sbrk_aligned+0x40>)
 8003e50:	000d      	movs	r5, r1
 8003e52:	6831      	ldr	r1, [r6, #0]
 8003e54:	0004      	movs	r4, r0
 8003e56:	2900      	cmp	r1, #0
 8003e58:	d102      	bne.n	8003e60 <sbrk_aligned+0x14>
 8003e5a:	f000 f8bf 	bl	8003fdc <_sbrk_r>
 8003e5e:	6030      	str	r0, [r6, #0]
 8003e60:	0029      	movs	r1, r5
 8003e62:	0020      	movs	r0, r4
 8003e64:	f000 f8ba 	bl	8003fdc <_sbrk_r>
 8003e68:	1c43      	adds	r3, r0, #1
 8003e6a:	d00a      	beq.n	8003e82 <sbrk_aligned+0x36>
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	1cc5      	adds	r5, r0, #3
 8003e70:	439d      	bics	r5, r3
 8003e72:	42a8      	cmp	r0, r5
 8003e74:	d007      	beq.n	8003e86 <sbrk_aligned+0x3a>
 8003e76:	1a29      	subs	r1, r5, r0
 8003e78:	0020      	movs	r0, r4
 8003e7a:	f000 f8af 	bl	8003fdc <_sbrk_r>
 8003e7e:	1c43      	adds	r3, r0, #1
 8003e80:	d101      	bne.n	8003e86 <sbrk_aligned+0x3a>
 8003e82:	2501      	movs	r5, #1
 8003e84:	426d      	negs	r5, r5
 8003e86:	0028      	movs	r0, r5
 8003e88:	bd70      	pop	{r4, r5, r6, pc}
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	2000080c 	.word	0x2000080c

08003e90 <_malloc_r>:
 8003e90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e92:	2203      	movs	r2, #3
 8003e94:	1ccb      	adds	r3, r1, #3
 8003e96:	4393      	bics	r3, r2
 8003e98:	3308      	adds	r3, #8
 8003e9a:	0006      	movs	r6, r0
 8003e9c:	001f      	movs	r7, r3
 8003e9e:	2b0c      	cmp	r3, #12
 8003ea0:	d232      	bcs.n	8003f08 <_malloc_r+0x78>
 8003ea2:	270c      	movs	r7, #12
 8003ea4:	42b9      	cmp	r1, r7
 8003ea6:	d831      	bhi.n	8003f0c <_malloc_r+0x7c>
 8003ea8:	0030      	movs	r0, r6
 8003eaa:	f000 f8a9 	bl	8004000 <__malloc_lock>
 8003eae:	4d32      	ldr	r5, [pc, #200]	; (8003f78 <_malloc_r+0xe8>)
 8003eb0:	682b      	ldr	r3, [r5, #0]
 8003eb2:	001c      	movs	r4, r3
 8003eb4:	2c00      	cmp	r4, #0
 8003eb6:	d12e      	bne.n	8003f16 <_malloc_r+0x86>
 8003eb8:	0039      	movs	r1, r7
 8003eba:	0030      	movs	r0, r6
 8003ebc:	f7ff ffc6 	bl	8003e4c <sbrk_aligned>
 8003ec0:	0004      	movs	r4, r0
 8003ec2:	1c43      	adds	r3, r0, #1
 8003ec4:	d11e      	bne.n	8003f04 <_malloc_r+0x74>
 8003ec6:	682c      	ldr	r4, [r5, #0]
 8003ec8:	0025      	movs	r5, r4
 8003eca:	2d00      	cmp	r5, #0
 8003ecc:	d14a      	bne.n	8003f64 <_malloc_r+0xd4>
 8003ece:	6823      	ldr	r3, [r4, #0]
 8003ed0:	0029      	movs	r1, r5
 8003ed2:	18e3      	adds	r3, r4, r3
 8003ed4:	0030      	movs	r0, r6
 8003ed6:	9301      	str	r3, [sp, #4]
 8003ed8:	f000 f880 	bl	8003fdc <_sbrk_r>
 8003edc:	9b01      	ldr	r3, [sp, #4]
 8003ede:	4283      	cmp	r3, r0
 8003ee0:	d143      	bne.n	8003f6a <_malloc_r+0xda>
 8003ee2:	6823      	ldr	r3, [r4, #0]
 8003ee4:	3703      	adds	r7, #3
 8003ee6:	1aff      	subs	r7, r7, r3
 8003ee8:	2303      	movs	r3, #3
 8003eea:	439f      	bics	r7, r3
 8003eec:	3708      	adds	r7, #8
 8003eee:	2f0c      	cmp	r7, #12
 8003ef0:	d200      	bcs.n	8003ef4 <_malloc_r+0x64>
 8003ef2:	270c      	movs	r7, #12
 8003ef4:	0039      	movs	r1, r7
 8003ef6:	0030      	movs	r0, r6
 8003ef8:	f7ff ffa8 	bl	8003e4c <sbrk_aligned>
 8003efc:	1c43      	adds	r3, r0, #1
 8003efe:	d034      	beq.n	8003f6a <_malloc_r+0xda>
 8003f00:	6823      	ldr	r3, [r4, #0]
 8003f02:	19df      	adds	r7, r3, r7
 8003f04:	6027      	str	r7, [r4, #0]
 8003f06:	e013      	b.n	8003f30 <_malloc_r+0xa0>
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	dacb      	bge.n	8003ea4 <_malloc_r+0x14>
 8003f0c:	230c      	movs	r3, #12
 8003f0e:	2500      	movs	r5, #0
 8003f10:	6033      	str	r3, [r6, #0]
 8003f12:	0028      	movs	r0, r5
 8003f14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f16:	6822      	ldr	r2, [r4, #0]
 8003f18:	1bd1      	subs	r1, r2, r7
 8003f1a:	d420      	bmi.n	8003f5e <_malloc_r+0xce>
 8003f1c:	290b      	cmp	r1, #11
 8003f1e:	d917      	bls.n	8003f50 <_malloc_r+0xc0>
 8003f20:	19e2      	adds	r2, r4, r7
 8003f22:	6027      	str	r7, [r4, #0]
 8003f24:	42a3      	cmp	r3, r4
 8003f26:	d111      	bne.n	8003f4c <_malloc_r+0xbc>
 8003f28:	602a      	str	r2, [r5, #0]
 8003f2a:	6863      	ldr	r3, [r4, #4]
 8003f2c:	6011      	str	r1, [r2, #0]
 8003f2e:	6053      	str	r3, [r2, #4]
 8003f30:	0030      	movs	r0, r6
 8003f32:	0025      	movs	r5, r4
 8003f34:	f000 f86c 	bl	8004010 <__malloc_unlock>
 8003f38:	2207      	movs	r2, #7
 8003f3a:	350b      	adds	r5, #11
 8003f3c:	1d23      	adds	r3, r4, #4
 8003f3e:	4395      	bics	r5, r2
 8003f40:	1aea      	subs	r2, r5, r3
 8003f42:	429d      	cmp	r5, r3
 8003f44:	d0e5      	beq.n	8003f12 <_malloc_r+0x82>
 8003f46:	1b5b      	subs	r3, r3, r5
 8003f48:	50a3      	str	r3, [r4, r2]
 8003f4a:	e7e2      	b.n	8003f12 <_malloc_r+0x82>
 8003f4c:	605a      	str	r2, [r3, #4]
 8003f4e:	e7ec      	b.n	8003f2a <_malloc_r+0x9a>
 8003f50:	6862      	ldr	r2, [r4, #4]
 8003f52:	42a3      	cmp	r3, r4
 8003f54:	d101      	bne.n	8003f5a <_malloc_r+0xca>
 8003f56:	602a      	str	r2, [r5, #0]
 8003f58:	e7ea      	b.n	8003f30 <_malloc_r+0xa0>
 8003f5a:	605a      	str	r2, [r3, #4]
 8003f5c:	e7e8      	b.n	8003f30 <_malloc_r+0xa0>
 8003f5e:	0023      	movs	r3, r4
 8003f60:	6864      	ldr	r4, [r4, #4]
 8003f62:	e7a7      	b.n	8003eb4 <_malloc_r+0x24>
 8003f64:	002c      	movs	r4, r5
 8003f66:	686d      	ldr	r5, [r5, #4]
 8003f68:	e7af      	b.n	8003eca <_malloc_r+0x3a>
 8003f6a:	230c      	movs	r3, #12
 8003f6c:	0030      	movs	r0, r6
 8003f6e:	6033      	str	r3, [r6, #0]
 8003f70:	f000 f84e 	bl	8004010 <__malloc_unlock>
 8003f74:	e7cd      	b.n	8003f12 <_malloc_r+0x82>
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	20000808 	.word	0x20000808

08003f7c <_realloc_r>:
 8003f7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f7e:	0007      	movs	r7, r0
 8003f80:	000e      	movs	r6, r1
 8003f82:	0014      	movs	r4, r2
 8003f84:	2900      	cmp	r1, #0
 8003f86:	d105      	bne.n	8003f94 <_realloc_r+0x18>
 8003f88:	0011      	movs	r1, r2
 8003f8a:	f7ff ff81 	bl	8003e90 <_malloc_r>
 8003f8e:	0005      	movs	r5, r0
 8003f90:	0028      	movs	r0, r5
 8003f92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f94:	2a00      	cmp	r2, #0
 8003f96:	d103      	bne.n	8003fa0 <_realloc_r+0x24>
 8003f98:	f7ff ff0e 	bl	8003db8 <_free_r>
 8003f9c:	0025      	movs	r5, r4
 8003f9e:	e7f7      	b.n	8003f90 <_realloc_r+0x14>
 8003fa0:	f000 f83e 	bl	8004020 <_malloc_usable_size_r>
 8003fa4:	9001      	str	r0, [sp, #4]
 8003fa6:	4284      	cmp	r4, r0
 8003fa8:	d803      	bhi.n	8003fb2 <_realloc_r+0x36>
 8003faa:	0035      	movs	r5, r6
 8003fac:	0843      	lsrs	r3, r0, #1
 8003fae:	42a3      	cmp	r3, r4
 8003fb0:	d3ee      	bcc.n	8003f90 <_realloc_r+0x14>
 8003fb2:	0021      	movs	r1, r4
 8003fb4:	0038      	movs	r0, r7
 8003fb6:	f7ff ff6b 	bl	8003e90 <_malloc_r>
 8003fba:	1e05      	subs	r5, r0, #0
 8003fbc:	d0e8      	beq.n	8003f90 <_realloc_r+0x14>
 8003fbe:	9b01      	ldr	r3, [sp, #4]
 8003fc0:	0022      	movs	r2, r4
 8003fc2:	429c      	cmp	r4, r3
 8003fc4:	d900      	bls.n	8003fc8 <_realloc_r+0x4c>
 8003fc6:	001a      	movs	r2, r3
 8003fc8:	0031      	movs	r1, r6
 8003fca:	0028      	movs	r0, r5
 8003fcc:	f7ff fed7 	bl	8003d7e <memcpy>
 8003fd0:	0031      	movs	r1, r6
 8003fd2:	0038      	movs	r0, r7
 8003fd4:	f7ff fef0 	bl	8003db8 <_free_r>
 8003fd8:	e7da      	b.n	8003f90 <_realloc_r+0x14>
	...

08003fdc <_sbrk_r>:
 8003fdc:	2300      	movs	r3, #0
 8003fde:	b570      	push	{r4, r5, r6, lr}
 8003fe0:	4d06      	ldr	r5, [pc, #24]	; (8003ffc <_sbrk_r+0x20>)
 8003fe2:	0004      	movs	r4, r0
 8003fe4:	0008      	movs	r0, r1
 8003fe6:	602b      	str	r3, [r5, #0]
 8003fe8:	f7fc fe14 	bl	8000c14 <_sbrk>
 8003fec:	1c43      	adds	r3, r0, #1
 8003fee:	d103      	bne.n	8003ff8 <_sbrk_r+0x1c>
 8003ff0:	682b      	ldr	r3, [r5, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d000      	beq.n	8003ff8 <_sbrk_r+0x1c>
 8003ff6:	6023      	str	r3, [r4, #0]
 8003ff8:	bd70      	pop	{r4, r5, r6, pc}
 8003ffa:	46c0      	nop			; (mov r8, r8)
 8003ffc:	20000810 	.word	0x20000810

08004000 <__malloc_lock>:
 8004000:	b510      	push	{r4, lr}
 8004002:	4802      	ldr	r0, [pc, #8]	; (800400c <__malloc_lock+0xc>)
 8004004:	f000 f814 	bl	8004030 <__retarget_lock_acquire_recursive>
 8004008:	bd10      	pop	{r4, pc}
 800400a:	46c0      	nop			; (mov r8, r8)
 800400c:	20000814 	.word	0x20000814

08004010 <__malloc_unlock>:
 8004010:	b510      	push	{r4, lr}
 8004012:	4802      	ldr	r0, [pc, #8]	; (800401c <__malloc_unlock+0xc>)
 8004014:	f000 f80d 	bl	8004032 <__retarget_lock_release_recursive>
 8004018:	bd10      	pop	{r4, pc}
 800401a:	46c0      	nop			; (mov r8, r8)
 800401c:	20000814 	.word	0x20000814

08004020 <_malloc_usable_size_r>:
 8004020:	1f0b      	subs	r3, r1, #4
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	1f18      	subs	r0, r3, #4
 8004026:	2b00      	cmp	r3, #0
 8004028:	da01      	bge.n	800402e <_malloc_usable_size_r+0xe>
 800402a:	580b      	ldr	r3, [r1, r0]
 800402c:	18c0      	adds	r0, r0, r3
 800402e:	4770      	bx	lr

08004030 <__retarget_lock_acquire_recursive>:
 8004030:	4770      	bx	lr

08004032 <__retarget_lock_release_recursive>:
 8004032:	4770      	bx	lr

08004034 <_init>:
 8004034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004036:	46c0      	nop			; (mov r8, r8)
 8004038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800403a:	bc08      	pop	{r3}
 800403c:	469e      	mov	lr, r3
 800403e:	4770      	bx	lr

08004040 <_fini>:
 8004040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004046:	bc08      	pop	{r3}
 8004048:	469e      	mov	lr, r3
 800404a:	4770      	bx	lr
